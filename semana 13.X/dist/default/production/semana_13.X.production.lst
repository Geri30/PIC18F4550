

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Jun 13 09:43:22 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    24  0000                     
    25                           ; Version 2.05
    26                           ; Generated 20/12/2018 GMT
    27                           ; 
    28                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC18F4550 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     
    60                           	psect	idataCOMRAM
    61  007C7C                     __pidataCOMRAM:
    62                           	opt callstack 0
    63                           
    64                           ;initializer for _cadena1
    65  007C7C  55                 	db	85
    66  007C7D  50                 	db	80
    67  007C7E  43                 	db	67
    68  007C7F  20                 	db	32
    69  007C80  4D                 	db	77
    70  007C81  6F                 	db	111
    71  007C82  6E                 	db	110
    72  007C83  69                 	db	105
    73  007C84  74                 	db	116
    74  007C85  6F                 	db	111
    75  007C86  72                 	db	114
    76  007C87  00                 	db	0
    77                           
    78                           ;initializer for _cadena3
    79  007C88  53                 	db	83
    80  007C89  61                 	db	97
    81  007C8A  6C                 	db	108
    82  007C8B  69                 	db	105
    83  007C8C  64                 	db	100
    84  007C8D  61                 	db	97
    85  007C8E  20                 	db	32
    86  007C8F  52                 	db	82
    87  007C90  42                 	db	66
    88  007C91  30                 	db	48
    89  007C92  20                 	db	32
    90  007C93  3D                 	db	61
    91  007C94  20                 	db	32
    92  007C95  4F                 	db	79
    93  007C96  4E                 	db	78
    94  007C97  20                 	db	32
    95  007C98  00                 	db	0
    96                           
    97                           ;initializer for _cadena2
    98  007C99  49                 	db	73
    99  007C9A  6E                 	db	110
   100  007C9B  67                 	db	103
   101  007C9C  4D                 	db	77
   102  007C9D  65                 	db	101
   103  007C9E  63                 	db	99
   104  007C9F  61                 	db	97
   105  007CA0  45                 	db	69
   106  007CA1  6C                 	db	108
   107  007CA2  65                 	db	101
   108  007CA3  63                 	db	99
   109  007CA4  20                 	db	32
   110  007CA5  32                 	db	50
   111  007CA6  30                 	db	48
   112  007CA7  31                 	db	49
   113  007CA8  39                 	db	57
   114  007CA9  00                 	db	0
   115                           
   116                           	psect	idataBANK0
   117  007BE7                     __pidataBANK0:
   118                           	opt callstack 0
   119                           
   120                           ;initializer for _cadena4
   121  007BE7  53                 	db	83
   122  007BE8  61                 	db	97
   123  007BE9  6C                 	db	108
   124  007BEA  69                 	db	105
   125  007BEB  64                 	db	100
   126  007BEC  61                 	db	97
   127  007BED  20                 	db	32
   128  007BEE  52                 	db	82
   129  007BEF  42                 	db	66
   130  007BF0  30                 	db	48
   131  007BF1  20                 	db	32
   132  007BF2  3D                 	db	61
   133  007BF3  20                 	db	32
   134  007BF4  4F                 	db	79
   135  007BF5  46                 	db	70
   136  007BF6  46                 	db	70
   137  007BF7  00                 	db	0
   138  0000                     _LATBbits	set	3978
   139  0000                     _PORTBbits	set	3969
   140  0000                     _TXREG	set	4013
   141  0000                     _RCSTAbits	set	4011
   142  0000                     _SPBRGH	set	4016
   143  0000                     _SPBRG	set	4015
   144  0000                     _TXSTAbits	set	4012
   145  0000                     _BAUDCONbits	set	4024
   146  0000                     _TRISCbits	set	3988
   147  0000                     _TRISBbits	set	3987
   148  0000                     _PORTD	set	3971
   149  0000                     _LATD	set	3980
   150  0000                     _TRISD	set	3989
   151  0000                     _LATDbits	set	3980
   152  0000                     _ADRESL	set	4035
   153  0000                     _ADCON0bits	set	4034
   154  0000                     _ADCON2	set	4032
   155  0000                     _ADCON0	set	4034
   156  0000                     _ADCON1	set	4033
   157  0000                     _TRISB	set	3987
   158  0000                     _TRISE	set	3990
   159  0000                     _TRISA	set	3986
   160  0000                     _ADRESH	set	4036
   161                           
   162                           ; #config settings
   163  0000                     
   164                           	psect	cinit
   165  007D12                     __pcinit:
   166                           	opt callstack 0
   167  007D12                     start_initialization:
   168                           	opt callstack 0
   169  007D12                     __initialization:
   170                           	opt callstack 0
   171                           
   172                           ; Initialize objects allocated to BANK0 (17 bytes)
   173                           ; load TBLPTR registers with __pidataBANK0
   174  007D12  0EE7               	movlw	low __pidataBANK0
   175  007D14  6EF6               	movwf	tblptrl,c
   176  007D16  0E7B               	movlw	high __pidataBANK0
   177  007D18  6EF7               	movwf	tblptrh,c
   178  007D1A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   179  007D1C  6EF8               	movwf	tblptru,c
   180  007D1E  EE00  F060         	lfsr	0,__pdataBANK0
   181  007D22  EE10 F011          	lfsr	1,17
   182  007D26                     copy_data0:
   183  007D26  0009               	tblrd		*+
   184  007D28  CFF5 FFEE          	movff	tablat,postinc0
   185  007D2C  50E5               	movf	postdec1,w,c
   186  007D2E  50E1               	movf	fsr1l,w,c
   187  007D30  E1FA               	bnz	copy_data0
   188                           
   189                           ; Initialize objects allocated to COMRAM (46 bytes)
   190                           ; load TBLPTR registers with __pidataCOMRAM
   191  007D32  0E7C               	movlw	low __pidataCOMRAM
   192  007D34  6EF6               	movwf	tblptrl,c
   193  007D36  0E7C               	movlw	high __pidataCOMRAM
   194  007D38  6EF7               	movwf	tblptrh,c
   195  007D3A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   196  007D3C  6EF8               	movwf	tblptru,c
   197  007D3E  EE00  F001         	lfsr	0,__pdataCOMRAM
   198  007D42  EE10 F02E          	lfsr	1,46
   199  007D46                     copy_data1:
   200  007D46  0009               	tblrd		*+
   201  007D48  CFF5 FFEE          	movff	tablat,postinc0
   202  007D4C  50E5               	movf	postdec1,w,c
   203  007D4E  50E1               	movf	fsr1l,w,c
   204  007D50  E1FA               	bnz	copy_data1
   205                           
   206                           ; Clear objects allocated to COMRAM (16 bytes)
   207  007D52  EE00  F040         	lfsr	0,__pbssCOMRAM
   208  007D56  0E10               	movlw	16
   209  007D58                     clear_0:
   210  007D58  6AEE               	clrf	postinc0,c
   211  007D5A  06E8               	decf	wreg,f,c
   212  007D5C  E1FD               	bnz	clear_0
   213  007D5E                     end_of_initialization:
   214                           	opt callstack 0
   215  007D5E                     __end_of__initialization:
   216                           	opt callstack 0
   217  007D5E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   218  007D60  6EF8               	movwf	tblptru,c
   219  007D62  0100               	movlb	0
   220  007D64  EF15  F03F         	goto	_main	;jump to C main() function
   221                           
   222                           	psect	bssCOMRAM
   223  000040                     __pbssCOMRAM:
   224                           	opt callstack 0
   225  000040                     _temporal3:
   226                           	opt callstack 0
   227  000040                     	ds	2
   228  000042                     _temporal2:
   229                           	opt callstack 0
   230  000042                     	ds	2
   231  000044                     _temporal:
   232                           	opt callstack 0
   233  000044                     	ds	2
   234  000046                     _diguni:
   235                           	opt callstack 0
   236  000046                     	ds	2
   237  000048                     _digdec:
   238                           	opt callstack 0
   239  000048                     	ds	2
   240  00004A                     _digcen:
   241                           	opt callstack 0
   242  00004A                     	ds	2
   243  00004C                     _digmil:
   244                           	opt callstack 0
   245  00004C                     	ds	2
   246  00004E                     _digdmi:
   247                           	opt callstack 0
   248  00004E                     	ds	2
   249                           
   250                           	psect	dataCOMRAM
   251  000001                     __pdataCOMRAM:
   252                           	opt callstack 0
   253  000001                     _cadena1:
   254                           	opt callstack 0
   255  000001                     	ds	12
   256  00000D                     _cadena3:
   257                           	opt callstack 0
   258  00000D                     	ds	17
   259  00001E                     _cadena2:
   260                           	opt callstack 0
   261  00001E                     	ds	17
   262                           
   263                           	psect	dataBANK0
   264  000060                     __pdataBANK0:
   265                           	opt callstack 0
   266  000060                     _cadena4:
   267                           	opt callstack 0
   268  000060                     	ds	17
   269                           
   270                           	psect	cstackCOMRAM
   271  00002F                     __pcstackCOMRAM:
   272                           	opt callstack 0
   273  00002F                     ENVIA_NIBBLE@dato:
   274                           	opt callstack 0
   275  00002F                     LEER_LCD@aux:
   276                           	opt callstack 0
   277                           
   278                           ; 1 bytes @ 0x0
   279  00002F                     	ds	1
   280  000030                     ENVIA_CHAR@dato:
   281                           	opt callstack 0
   282  000030                     ENVIA_LCD_CMD@dato:
   283                           	opt callstack 0
   284                           
   285                           ; 1 bytes @ 0x1
   286  000030                     	ds	1
   287  000031                     ENVIA_CHAR@aux:
   288                           	opt callstack 0
   289  000031                     ENVIA_LCD_CMD@aux:
   290                           	opt callstack 0
   291                           
   292                           ; 1 bytes @ 0x2
   293  000031                     	ds	1
   294  000032                     ??_LCD_CONFIG:
   295  000032                     POS_CURSOR@columna:
   296                           	opt callstack 0
   297  000032                     CURSOR_ONOFF@estado:
   298                           	opt callstack 0
   299  000032                     ESCRIBE_MENSAJE@cadena:
   300                           	opt callstack 0
   301                           
   302                           ; 2 bytes @ 0x3
   303  000032                     	ds	1
   304  000033                     POS_CURSOR@fila:
   305                           	opt callstack 0
   306                           
   307                           ; 1 bytes @ 0x4
   308  000033                     	ds	1
   309  000034                     ESCRIBE_MENSAJE@tam:
   310                           	opt callstack 0
   311                           
   312                           ; 1 bytes @ 0x5
   313  000034                     	ds	1
   314  000035                     ESCRIBE_MENSAJE@i:
   315                           	opt callstack 0
   316                           
   317                           ; 1 bytes @ 0x6
   318  000035                     	ds	1
   319  000036                     ??_main:
   320                           
   321                           ; 1 bytes @ 0x7
   322  000036                     	ds	2
   323  000038                     main@c:
   324                           	opt callstack 0
   325                           
   326                           ; 2 bytes @ 0x9
   327  000038                     	ds	2
   328  00003A                     main@c_599:
   329                           	opt callstack 0
   330                           
   331                           ; 2 bytes @ 0xB
   332  00003A                     	ds	2
   333  00003C                     main@c_608:
   334                           	opt callstack 0
   335                           
   336                           ; 2 bytes @ 0xD
   337  00003C                     	ds	2
   338  00003E                     main@c_609:
   339                           	opt callstack 0
   340                           
   341                           ; 2 bytes @ 0xF
   342  00003E                     	ds	2
   343                           
   344 ;;
   345 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   346 ;;
   347 ;; *************** function _main *****************
   348 ;; Defined at:
   349 ;;		line 51 in file "labortario ejercicio2.c"
   350 ;; Parameters:    Size  Location     Type
   351 ;;		None
   352 ;; Auto vars:     Size  Location     Type
   353 ;;  c               2   15[COMRAM] int 
   354 ;;  c               2   13[COMRAM] int 
   355 ;;  c               2   11[COMRAM] int 
   356 ;;  c               2    9[COMRAM] int 
   357 ;; Return value:  Size  Location     Type
   358 ;;                  1    wreg      void 
   359 ;; Registers used:
   360 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   361 ;; Tracked objects:
   362 ;;		On entry : 0/0
   363 ;;		On exit  : 0/0
   364 ;;		Unchanged: 0/0
   365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   366 ;;      Params:         0       0       0       0       0       0       0       0       0
   367 ;;      Locals:         8       0       0       0       0       0       0       0       0
   368 ;;      Temps:          2       0       0       0       0       0       0       0       0
   369 ;;      Totals:        10       0       0       0       0       0       0       0       0
   370 ;;Total ram usage:       10 bytes
   371 ;; Hardware stack levels required when called:    3
   372 ;; This function calls:
   373 ;;		_BORRAR_LCD
   374 ;;		_CURSOR_ONOFF
   375 ;;		_ESCRIBE_MENSAJE
   376 ;;		_LCD_CONFIG
   377 ;;		_POS_CURSOR
   378 ;; This function is called by:
   379 ;;		Startup code after reset
   380 ;; This function uses a non-reentrant model
   381 ;;
   382                           
   383                           	psect	text0
   384  007E2A                     __ptext0:
   385                           	opt callstack 0
   386  007E2A                     _main:
   387                           	opt callstack 28
   388                           
   389                           ;labortario ejercicio2.c: 53:     _delay((unsigned long)((500)*(48000000UL/4000.0)));
   390                           
   391                           ;incstack = 0
   392  007E2A  0E1F               	movlw	31
   393  007E2C  6E37               	movwf	(??_main+1)& (0+255),c
   394  007E2E  0E71               	movlw	113
   395  007E30  6E36               	movwf	??_main& (0+255),c
   396  007E32  0E1E               	movlw	30
   397  007E34                     u627:
   398  007E34  2EE8               	decfsz	wreg,f,c
   399  007E36  D7FE               	bra	u627
   400  007E38  2E36               	decfsz	??_main& (0+255),f,c
   401  007E3A  D7FC               	bra	u627
   402  007E3C  2E37               	decfsz	(??_main+1)& (0+255),f,c
   403  007E3E  D7FA               	bra	u627
   404  007E40  D000               	nop2	
   405                           
   406                           ;labortario ejercicio2.c: 54:     TRISD = 0x00;
   407  007E42  0E00               	movlw	0
   408  007E44  6E95               	movwf	3989,c	;volatile
   409                           
   410                           ;labortario ejercicio2.c: 55:     LCD_CONFIG();
   411  007E46  ECB4  F03E         	call	_LCD_CONFIG	;wreg free
   412                           
   413                           ;labortario ejercicio2.c: 56:     _delay((unsigned long)((15)*(48000000UL/4000.0)));
   414  007E4A  0EEA               	movlw	234
   415  007E4C  6E36               	movwf	??_main& (0+255),c
   416  007E4E  0EC3               	movlw	195
   417  007E50                     u637:
   418  007E50  2EE8               	decfsz	wreg,f,c
   419  007E52  D7FE               	bra	u637
   420  007E54  2E36               	decfsz	??_main& (0+255),f,c
   421  007E56  D7FC               	bra	u637
   422  007E58  F000               	nop	
   423                           
   424                           ;labortario ejercicio2.c: 57:     CURSOR_ONOFF(1);
   425  007E5A  0E01               	movlw	1
   426  007E5C  EC0A  F03E         	call	_CURSOR_ONOFF
   427                           
   428                           ;labortario ejercicio2.c: 58:     BORRAR_LCD();
   429  007E60  ECEF  F03D         	call	_BORRAR_LCD	;wreg free
   430                           
   431                           ;labortario ejercicio2.c: 60:     TRISBbits.RB0 = 0;
   432  007E64  9093               	bcf	3987,0,c	;volatile
   433                           
   434                           ;labortario ejercicio2.c: 63:     TRISCbits.RC6 = 0;
   435  007E66  9C94               	bcf	3988,6,c	;volatile
   436                           
   437                           ;labortario ejercicio2.c: 64:     BAUDCONbits.BRG16 = 0;
   438  007E68  96B8               	bcf	4024,3,c	;volatile
   439                           
   440                           ;labortario ejercicio2.c: 65:     TXSTAbits.SYNC = 0;
   441  007E6A  98AC               	bcf	4012,4,c	;volatile
   442                           
   443                           ;labortario ejercicio2.c: 66:     TXSTAbits.BRGH = 0;
   444  007E6C  94AC               	bcf	4012,2,c	;volatile
   445                           
   446                           ;labortario ejercicio2.c: 67:     SPBRG = 38;
   447  007E6E  0E26               	movlw	38
   448  007E70  6EAF               	movwf	4015,c	;volatile
   449                           
   450                           ;labortario ejercicio2.c: 68:     SPBRGH = 0;
   451  007E72  0E00               	movlw	0
   452  007E74  6EB0               	movwf	4016,c	;volatile
   453                           
   454                           ;labortario ejercicio2.c: 69:     RCSTAbits.SPEN = 1;
   455  007E76  8EAB               	bsf	4011,7,c	;volatile
   456                           
   457                           ;labortario ejercicio2.c: 70:     RCSTAbits.CREN = 1;
   458  007E78  88AB               	bsf	4011,4,c	;volatile
   459                           
   460                           ;labortario ejercicio2.c: 71:     TXSTAbits.TXEN = 1;
   461  007E7A  8AAC               	bsf	4012,5,c	;volatile
   462                           
   463                           ;labortario ejercicio2.c: 76:     POS_CURSOR(1,0);
   464  007E7C  0E00               	movlw	0
   465  007E7E  6E32               	movwf	POS_CURSOR@columna,c
   466  007E80  0E01               	movlw	1
   467  007E82  EC18  F03E         	call	_POS_CURSOR
   468                           
   469                           ;labortario ejercicio2.c: 77:     ESCRIBE_MENSAJE(cadena2,16);
   470  007E86  0E1E               	movlw	low _cadena2
   471  007E88  6E32               	movwf	ESCRIBE_MENSAJE@cadena,c
   472  007E8A  0E00               	movlw	high _cadena2
   473  007E8C  6E33               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   474  007E8E  0E10               	movlw	16
   475  007E90  6E34               	movwf	ESCRIBE_MENSAJE@tam,c
   476  007E92  EC2A  F03E         	call	_ESCRIBE_MENSAJE	;wreg free
   477  007E96                     l1486:
   478                           
   479                           ;labortario ejercicio2.c: 80:         for (int c=0;c<11;c++) {
   480  007E96  0E00               	movlw	0
   481  007E98  6E39               	movwf	main@c+1,c
   482  007E9A  0E00               	movlw	0
   483  007E9C  6E38               	movwf	main@c,c
   484  007E9E                     l1492:
   485                           
   486                           ;labortario ejercicio2.c: 81:             TXREG = cadena1[c];
   487  007E9E  0E01               	movlw	low _cadena1
   488  007EA0  2438               	addwf	main@c,w,c
   489  007EA2  6ED9               	movwf	fsr2l,c
   490  007EA4  0E00               	movlw	high _cadena1
   491  007EA6  2039               	addwfc	main@c+1,w,c
   492  007EA8  6EDA               	movwf	fsr2h,c
   493  007EAA  50DF               	movf	indf2,w,c
   494  007EAC  6EAD               	movwf	4013,c	;volatile
   495  007EAE                     l188:
   496  007EAE  A2AC               	btfss	4012,1,c	;volatile
   497  007EB0  D7FE               	goto	l188
   498                           
   499                           ;labortario ejercicio2.c: 83:         }
   500  007EB2  4A38               	infsnz	main@c,f,c
   501  007EB4  2A39               	incf	main@c+1,f,c
   502  007EB6  BE39               	btfsc	main@c+1,7,c
   503  007EB8  D7F2               	goto	l1492
   504  007EBA  5039               	movf	main@c+1,w,c
   505  007EBC  E104               	bnz	u440
   506  007EBE  0E0B               	movlw	11
   507  007EC0  5C38               	subwf	main@c,w,c
   508  007EC2  A0D8               	btfss	status,0,c
   509  007EC4  D7EC               	goto	l1492
   510  007EC6                     u440:
   511                           
   512                           ;labortario ejercicio2.c: 84:         TXREG = 0x0A;
   513  007EC6  0E0A               	movlw	10
   514  007EC8  6EAD               	movwf	4013,c	;volatile
   515  007ECA                     l191:
   516  007ECA  A2AC               	btfss	4012,1,c	;volatile
   517  007ECC  D7FE               	goto	l191
   518                           
   519                           ;labortario ejercicio2.c: 86:         TXREG = 0x0D;
   520  007ECE  0E0D               	movlw	13
   521  007ED0  6EAD               	movwf	4013,c	;volatile
   522  007ED2                     l194:
   523  007ED2  A2AC               	btfss	4012,1,c	;volatile
   524  007ED4  D7FE               	goto	l194
   525                           
   526                           ;labortario ejercicio2.c: 88:         for (int c=0;c<16;c++) {
   527  007ED6  0E00               	movlw	0
   528  007ED8  6E3B               	movwf	main@c_599+1,c
   529  007EDA  0E00               	movlw	0
   530  007EDC  6E3A               	movwf	main@c_599,c
   531  007EDE                     l1508:
   532                           
   533                           ;labortario ejercicio2.c: 89:             TXREG = cadena2[c];
   534  007EDE  0E1E               	movlw	low _cadena2
   535  007EE0  243A               	addwf	main@c_599,w,c
   536  007EE2  6ED9               	movwf	fsr2l,c
   537  007EE4  0E00               	movlw	high _cadena2
   538  007EE6  203B               	addwfc	main@c_599+1,w,c
   539  007EE8  6EDA               	movwf	fsr2h,c
   540  007EEA  50DF               	movf	indf2,w,c
   541  007EEC  6EAD               	movwf	4013,c	;volatile
   542  007EEE                     l199:
   543  007EEE  A2AC               	btfss	4012,1,c	;volatile
   544  007EF0  D7FE               	goto	l199
   545                           
   546                           ;labortario ejercicio2.c: 91:         }
   547  007EF2  4A3A               	infsnz	main@c_599,f,c
   548  007EF4  2A3B               	incf	main@c_599+1,f,c
   549  007EF6  BE3B               	btfsc	main@c_599+1,7,c
   550  007EF8  D7F2               	goto	l1508
   551  007EFA  503B               	movf	main@c_599+1,w,c
   552  007EFC  E104               	bnz	u480
   553  007EFE  0E10               	movlw	16
   554  007F00  5C3A               	subwf	main@c_599,w,c
   555  007F02  A0D8               	btfss	status,0,c
   556  007F04  D7EC               	goto	l1508
   557  007F06                     u480:
   558                           
   559                           ;labortario ejercicio2.c: 92:         TXREG = 0x0A;
   560  007F06  0E0A               	movlw	10
   561  007F08  6EAD               	movwf	4013,c	;volatile
   562  007F0A                     l202:
   563  007F0A  A2AC               	btfss	4012,1,c	;volatile
   564  007F0C  D7FE               	goto	l202
   565                           
   566                           ;labortario ejercicio2.c: 94:         TXREG = 0x0D;
   567  007F0E  0E0D               	movlw	13
   568  007F10  6EAD               	movwf	4013,c	;volatile
   569  007F12                     l205:
   570  007F12  A2AC               	btfss	4012,1,c	;volatile
   571  007F14  D7FE               	goto	l205
   572                           
   573                           ;labortario ejercicio2.c: 96:         if (PORTBbits.RB0 == 1){
   574  007F16  A081               	btfss	3969,0,c	;volatile
   575  007F18  D026               	goto	l1534
   576                           
   577                           ;labortario ejercicio2.c: 97:             for (int c=0;c<16;c++) {
   578  007F1A  0E00               	movlw	0
   579  007F1C  6E3D               	movwf	main@c_608+1,c
   580  007F1E  0E00               	movlw	0
   581  007F20  6E3C               	movwf	main@c_608,c
   582  007F22                     l1524:
   583                           
   584                           ;labortario ejercicio2.c: 98:                 TXREG = cadena3[c];
   585  007F22  0E0D               	movlw	low _cadena3
   586  007F24  243C               	addwf	main@c_608,w,c
   587  007F26  6ED9               	movwf	fsr2l,c
   588  007F28  0E00               	movlw	high _cadena3
   589  007F2A  203D               	addwfc	main@c_608+1,w,c
   590  007F2C  6EDA               	movwf	fsr2h,c
   591  007F2E  50DF               	movf	indf2,w,c
   592  007F30  6EAD               	movwf	4013,c	;volatile
   593  007F32                     l211:
   594  007F32  A2AC               	btfss	4012,1,c	;volatile
   595  007F34  D7FE               	goto	l211
   596                           
   597                           ;labortario ejercicio2.c: 100:             }
   598  007F36  4A3C               	infsnz	main@c_608,f,c
   599  007F38  2A3D               	incf	main@c_608+1,f,c
   600  007F3A  BE3D               	btfsc	main@c_608+1,7,c
   601  007F3C  D7F2               	goto	l1524
   602  007F3E  503D               	movf	main@c_608+1,w,c
   603  007F40  E104               	bnz	u530
   604  007F42  0E10               	movlw	16
   605  007F44  5C3C               	subwf	main@c_608,w,c
   606  007F46  A0D8               	btfss	status,0,c
   607  007F48  D7EC               	goto	l1524
   608  007F4A                     u530:
   609                           
   610                           ;labortario ejercicio2.c: 101:             POS_CURSOR(2,0);
   611  007F4A  0E00               	movlw	0
   612  007F4C  6E32               	movwf	POS_CURSOR@columna,c
   613  007F4E  0E02               	movlw	2
   614  007F50  EC18  F03E         	call	_POS_CURSOR
   615                           
   616                           ;labortario ejercicio2.c: 102:             ESCRIBE_MENSAJE(cadena3,16);
   617  007F54  0E0D               	movlw	low _cadena3
   618  007F56  6E32               	movwf	ESCRIBE_MENSAJE@cadena,c
   619  007F58  0E00               	movlw	high _cadena3
   620  007F5A  6E33               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   621  007F5C  0E10               	movlw	16
   622  007F5E  6E34               	movwf	ESCRIBE_MENSAJE@tam,c
   623  007F60  EC2A  F03E         	call	_ESCRIBE_MENSAJE	;wreg free
   624                           
   625                           ;labortario ejercicio2.c: 103:         }
   626  007F64  D025               	goto	l1550
   627  007F66                     l1534:
   628                           
   629                           ;labortario ejercicio2.c: 105:             for (int c=0;c<16;c++) {
   630  007F66  0E00               	movlw	0
   631  007F68  6E3F               	movwf	main@c_609+1,c
   632  007F6A  0E00               	movlw	0
   633  007F6C  6E3E               	movwf	main@c_609,c
   634  007F6E                     l1540:
   635                           
   636                           ;labortario ejercicio2.c: 106:                 TXREG = cadena4[c];
   637  007F6E  0E60               	movlw	low _cadena4
   638  007F70  243E               	addwf	main@c_609,w,c
   639  007F72  6ED9               	movwf	fsr2l,c
   640  007F74  0E00               	movlw	high _cadena4
   641  007F76  203F               	addwfc	main@c_609+1,w,c
   642  007F78  6EDA               	movwf	fsr2h,c
   643  007F7A  50DF               	movf	indf2,w,c
   644  007F7C  6EAD               	movwf	4013,c	;volatile
   645  007F7E                     l217:
   646  007F7E  A2AC               	btfss	4012,1,c	;volatile
   647  007F80  D7FE               	goto	l217
   648                           
   649                           ;labortario ejercicio2.c: 108:             }
   650  007F82  4A3E               	infsnz	main@c_609,f,c
   651  007F84  2A3F               	incf	main@c_609+1,f,c
   652  007F86  BE3F               	btfsc	main@c_609+1,7,c
   653  007F88  D7F2               	goto	l1540
   654  007F8A  503F               	movf	main@c_609+1,w,c
   655  007F8C  E104               	bnz	u550
   656  007F8E  0E10               	movlw	16
   657  007F90  5C3E               	subwf	main@c_609,w,c
   658  007F92  A0D8               	btfss	status,0,c
   659  007F94  D7EC               	goto	l1540
   660  007F96                     u550:
   661                           
   662                           ;labortario ejercicio2.c: 109:             POS_CURSOR(2,0);
   663  007F96  0E00               	movlw	0
   664  007F98  6E32               	movwf	POS_CURSOR@columna,c
   665  007F9A  0E02               	movlw	2
   666  007F9C  EC18  F03E         	call	_POS_CURSOR
   667                           
   668                           ;labortario ejercicio2.c: 110:             ESCRIBE_MENSAJE(cadena4,16);
   669  007FA0  0E60               	movlw	low _cadena4
   670  007FA2  6E32               	movwf	ESCRIBE_MENSAJE@cadena,c
   671  007FA4  0E00               	movlw	high _cadena4
   672  007FA6  6E33               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   673  007FA8  0E10               	movlw	16
   674  007FAA  6E34               	movwf	ESCRIBE_MENSAJE@tam,c
   675  007FAC  EC2A  F03E         	call	_ESCRIBE_MENSAJE	;wreg free
   676  007FB0                     l1550:
   677                           
   678                           ;labortario ejercicio2.c: 112:         TXREG = 0x0A;
   679  007FB0  0E0A               	movlw	10
   680  007FB2  6EAD               	movwf	4013,c	;volatile
   681  007FB4                     l220:
   682  007FB4  A2AC               	btfss	4012,1,c	;volatile
   683  007FB6  D7FE               	goto	l220
   684                           
   685                           ;labortario ejercicio2.c: 114:         TXREG = 0x0D;
   686  007FB8  0E0D               	movlw	13
   687  007FBA  6EAD               	movwf	4013,c	;volatile
   688  007FBC                     l223:
   689  007FBC  A2AC               	btfss	4012,1,c	;volatile
   690  007FBE  D7FE               	goto	l223
   691                           
   692                           ;labortario ejercicio2.c: 116:         TXREG = 0x0A;
   693  007FC0  0E0A               	movlw	10
   694  007FC2  6EAD               	movwf	4013,c	;volatile
   695  007FC4                     l226:
   696  007FC4  A2AC               	btfss	4012,1,c	;volatile
   697  007FC6  D7FE               	goto	l226
   698                           
   699                           ;labortario ejercicio2.c: 118:         TXREG = 0x0D;
   700  007FC8  0E0D               	movlw	13
   701  007FCA  6EAD               	movwf	4013,c	;volatile
   702  007FCC                     l229:
   703  007FCC  A2AC               	btfss	4012,1,c	;volatile
   704  007FCE  D7FE               	goto	l229
   705                           
   706                           ;labortario ejercicio2.c: 121:         _delay((unsigned long)((500)*(48000000UL/4000.0))
      +                          );
   707  007FD0  0E1F               	movlw	31
   708  007FD2  6E37               	movwf	(??_main+1)& (0+255),c
   709  007FD4  0E71               	movlw	113
   710  007FD6  6E36               	movwf	??_main& (0+255),c
   711  007FD8  0E1E               	movlw	30
   712  007FDA                     u647:
   713  007FDA  2EE8               	decfsz	wreg,f,c
   714  007FDC  D7FE               	bra	u647
   715  007FDE  2E36               	decfsz	??_main& (0+255),f,c
   716  007FE0  D7FC               	bra	u647
   717  007FE2  2E37               	decfsz	(??_main+1)& (0+255),f,c
   718  007FE4  D7FA               	bra	u647
   719  007FE6  D000               	nop2	
   720                           
   721                           ;labortario ejercicio2.c: 122:         LATBbits.LB0 = !LATBbits.LB0;
   722  007FE8  B08A               	btfsc	3978,0,c	;volatile
   723  007FEA  D003               	goto	u600
   724  007FEC  6A36               	clrf	??_main& (0+255),c
   725  007FEE  2A36               	incf	??_main& (0+255),f,c
   726  007FF0  D001               	goto	u618
   727  007FF2                     u600:
   728  007FF2  6A36               	clrf	??_main& (0+255),c
   729  007FF4                     u618:
   730  007FF4  508A               	movf	3978,w,c	;volatile
   731  007FF6  1836               	xorwf	??_main,w,c
   732  007FF8  0BFE               	andlw	-2
   733  007FFA  1836               	xorwf	??_main,w,c
   734  007FFC  6E8A               	movwf	3978,c	;volatile
   735  007FFE  D74B               	goto	l1486
   736  008000                     __end_of_main:
   737                           	opt callstack 0
   738                           
   739 ;; *************** function _POS_CURSOR *****************
   740 ;; Defined at:
   741 ;;		line 6 in file "LCD.c"
   742 ;; Parameters:    Size  Location     Type
   743 ;;  fila            1    wreg     unsigned char 
   744 ;;  columna         1    3[COMRAM] unsigned char 
   745 ;; Auto vars:     Size  Location     Type
   746 ;;  fila            1    4[COMRAM] unsigned char 
   747 ;; Return value:  Size  Location     Type
   748 ;;                  1    wreg      void 
   749 ;; Registers used:
   750 ;;		wreg, status,2, status,0, cstack
   751 ;; Tracked objects:
   752 ;;		On entry : 0/0
   753 ;;		On exit  : 0/0
   754 ;;		Unchanged: 0/0
   755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   756 ;;      Params:         1       0       0       0       0       0       0       0       0
   757 ;;      Locals:         1       0       0       0       0       0       0       0       0
   758 ;;      Temps:          0       0       0       0       0       0       0       0       0
   759 ;;      Totals:         2       0       0       0       0       0       0       0       0
   760 ;;Total ram usage:        2 bytes
   761 ;; Hardware stack levels used:    1
   762 ;; Hardware stack levels required when called:    2
   763 ;; This function calls:
   764 ;;		_ENVIA_LCD_CMD
   765 ;; This function is called by:
   766 ;;		_main
   767 ;; This function uses a non-reentrant model
   768 ;;
   769                           
   770                           	psect	text1
   771  007C30                     __ptext1:
   772                           	opt callstack 0
   773  007C30                     _POS_CURSOR:
   774                           	opt callstack 28
   775                           
   776                           ;incstack = 0
   777                           ;POS_CURSOR@fila stored from wreg
   778  007C30  6E33               	movwf	POS_CURSOR@fila,c
   779                           
   780                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
   781  007C32  0433               	decf	POS_CURSOR@fila,w,c
   782  007C34  A4D8               	btfss	status,2,c
   783  007C36  D005               	goto	l1370
   784                           
   785                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
   786  007C38  5032               	movf	POS_CURSOR@columna,w,c
   787  007C3A  0F80               	addlw	128
   788  007C3C  EC55  F03E         	call	_ENVIA_LCD_CMD
   789                           
   790                           ;LCD.c: 11:  }
   791  007C40  0012               	return	
   792  007C42                     l1370:
   793  007C42  0E02               	movlw	2
   794  007C44  1833               	xorwf	POS_CURSOR@fila,w,c
   795  007C46  A4D8               	btfss	status,2,c
   796  007C48  0012               	return	
   797                           
   798                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
   799  007C4A  5032               	movf	POS_CURSOR@columna,w,c
   800  007C4C  0FC0               	addlw	192
   801  007C4E  EC55  F03E         	call	_ENVIA_LCD_CMD
   802  007C52  0012               	return		;funcret
   803  007C54                     __end_of_POS_CURSOR:
   804                           	opt callstack 0
   805                           
   806 ;; *************** function _LCD_CONFIG *****************
   807 ;; Defined at:
   808 ;;		line 72 in file "LCD.c"
   809 ;; Parameters:    Size  Location     Type
   810 ;;		None
   811 ;; Auto vars:     Size  Location     Type
   812 ;;		None
   813 ;; Return value:  Size  Location     Type
   814 ;;                  1    wreg      void 
   815 ;; Registers used:
   816 ;;		wreg, status,2, status,0, cstack
   817 ;; Tracked objects:
   818 ;;		On entry : 0/0
   819 ;;		On exit  : 0/0
   820 ;;		Unchanged: 0/0
   821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   822 ;;      Params:         0       0       0       0       0       0       0       0       0
   823 ;;      Locals:         0       0       0       0       0       0       0       0       0
   824 ;;      Temps:          1       0       0       0       0       0       0       0       0
   825 ;;      Totals:         1       0       0       0       0       0       0       0       0
   826 ;;Total ram usage:        1 bytes
   827 ;; Hardware stack levels used:    1
   828 ;; Hardware stack levels required when called:    2
   829 ;; This function calls:
   830 ;;		_ENVIA_LCD_CMD
   831 ;;		_ENVIA_NIBBLE
   832 ;; This function is called by:
   833 ;;		_main
   834 ;; This function uses a non-reentrant model
   835 ;;
   836                           
   837                           	psect	text2
   838  007D68                     __ptext2:
   839                           	opt callstack 0
   840  007D68                     _LCD_CONFIG:
   841                           	opt callstack 28
   842                           
   843                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   844                           
   845                           ;incstack = 0
   846  007D68  908C               	bcf	3980,0,c	;volatile
   847                           
   848                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   849  007D6A  928C               	bcf	3980,1,c	;volatile
   850                           
   851                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   852  007D6C  0E30               	movlw	48
   853  007D6E  ECFC  F03D         	call	_ENVIA_NIBBLE
   854                           
   855                           ;LCD.c: 77:         _delay(24000);
   856  007D72  0E20               	movlw	32
   857  007D74  6E32               	movwf	??_LCD_CONFIG& (0+255),c
   858  007D76  0E2A               	movlw	42
   859  007D78                     u657:
   860  007D78  2EE8               	decfsz	wreg,f,c
   861  007D7A  D7FE               	bra	u657
   862  007D7C  2E32               	decfsz	??_LCD_CONFIG& (0+255),f,c
   863  007D7E  D7FC               	bra	u657
   864                           
   865                           ;LCD.c: 78:         _delay(24000);
   866  007D80  0E20               	movlw	32
   867  007D82  6E32               	movwf	??_LCD_CONFIG& (0+255),c
   868  007D84  0E2A               	movlw	42
   869  007D86                     u667:
   870  007D86  2EE8               	decfsz	wreg,f,c
   871  007D88  D7FE               	bra	u667
   872  007D8A  2E32               	decfsz	??_LCD_CONFIG& (0+255),f,c
   873  007D8C  D7FC               	bra	u667
   874                           
   875                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   876  007D8E  0E30               	movlw	48
   877  007D90  ECFC  F03D         	call	_ENVIA_NIBBLE
   878                           
   879                           ;LCD.c: 83:  _delay(1200);
   880  007D94  0EF0               	movlw	240
   881  007D96                     u677:
   882  007D96  D000               	nop2	
   883  007D98  2EE8               	decfsz	wreg,f,c
   884  007D9A  D7FD               	bra	u677
   885                           
   886                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   887  007D9C  0E30               	movlw	48
   888  007D9E  ECFC  F03D         	call	_ENVIA_NIBBLE
   889                           
   890                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   891  007DA2  0E20               	movlw	32
   892  007DA4  ECFC  F03D         	call	_ENVIA_NIBBLE
   893                           
   894                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   895  007DA8  0E01               	movlw	1
   896  007DAA  EC55  F03E         	call	_ENVIA_LCD_CMD
   897                           
   898                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   899  007DAE  0E28               	movlw	40
   900  007DB0  EC55  F03E         	call	_ENVIA_LCD_CMD
   901                           
   902                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   903  007DB4  0E0F               	movlw	15
   904  007DB6  EC55  F03E         	call	_ENVIA_LCD_CMD
   905                           
   906                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   907  007DBA  0E06               	movlw	6
   908  007DBC  EC55  F03E         	call	_ENVIA_LCD_CMD
   909                           
   910                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
   911  007DC0  0E01               	movlw	1
   912  007DC2  EC55  F03E         	call	_ENVIA_LCD_CMD
   913  007DC6  0012               	return		;funcret
   914  007DC8                     __end_of_LCD_CONFIG:
   915                           	opt callstack 0
   916                           
   917 ;; *************** function _ESCRIBE_MENSAJE *****************
   918 ;; Defined at:
   919 ;;		line 41 in file "LCD.c"
   920 ;; Parameters:    Size  Location     Type
   921 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
   922 ;;		 -> cadena4(17), cadena3(17), cadena2(17), 
   923 ;;  tam             1    5[COMRAM] unsigned char 
   924 ;; Auto vars:     Size  Location     Type
   925 ;;  i               1    6[COMRAM] unsigned char 
   926 ;; Return value:  Size  Location     Type
   927 ;;                  1    wreg      void 
   928 ;; Registers used:
   929 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   930 ;; Tracked objects:
   931 ;;		On entry : 0/0
   932 ;;		On exit  : 0/0
   933 ;;		Unchanged: 0/0
   934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   935 ;;      Params:         3       0       0       0       0       0       0       0       0
   936 ;;      Locals:         1       0       0       0       0       0       0       0       0
   937 ;;      Temps:          0       0       0       0       0       0       0       0       0
   938 ;;      Totals:         4       0       0       0       0       0       0       0       0
   939 ;;Total ram usage:        4 bytes
   940 ;; Hardware stack levels used:    1
   941 ;; Hardware stack levels required when called:    2
   942 ;; This function calls:
   943 ;;		_ENVIA_CHAR
   944 ;; This function is called by:
   945 ;;		_main
   946 ;; This function uses a non-reentrant model
   947 ;;
   948                           
   949                           	psect	text3
   950  007C54                     __ptext3:
   951                           	opt callstack 0
   952  007C54                     _ESCRIBE_MENSAJE:
   953                           	opt callstack 28
   954                           
   955                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
   956                           
   957                           ;incstack = 0
   958  007C54  0E00               	movlw	0
   959  007C56  6E35               	movwf	ESCRIBE_MENSAJE@i,c
   960                           
   961                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
   962  007C58  0E00               	movlw	0
   963  007C5A  6E35               	movwf	ESCRIBE_MENSAJE@i,c
   964  007C5C  D00A               	goto	l1388
   965  007C5E                     l1384:
   966                           
   967                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
   968  007C5E  5035               	movf	ESCRIBE_MENSAJE@i,w,c
   969  007C60  2432               	addwf	ESCRIBE_MENSAJE@cadena,w,c
   970  007C62  6ED9               	movwf	fsr2l,c
   971  007C64  0E00               	movlw	0
   972  007C66  2033               	addwfc	ESCRIBE_MENSAJE@cadena+1,w,c
   973  007C68  6EDA               	movwf	fsr2h,c
   974  007C6A  50DF               	movf	indf2,w,c
   975  007C6C  EC6F  F03E         	call	_ENVIA_CHAR
   976                           
   977                           ;LCD.c: 47:  }
   978  007C70  2A35               	incf	ESCRIBE_MENSAJE@i,f,c
   979  007C72                     l1388:
   980  007C72  5034               	movf	ESCRIBE_MENSAJE@tam,w,c
   981  007C74  5C35               	subwf	ESCRIBE_MENSAJE@i,w,c
   982  007C76  B0D8               	btfsc	status,0,c
   983  007C78  0012               	return	
   984  007C7A  D7F1               	goto	l1384
   985  007C7C                     __end_of_ESCRIBE_MENSAJE:
   986                           	opt callstack 0
   987                           
   988 ;; *************** function _ENVIA_CHAR *****************
   989 ;; Defined at:
   990 ;;		line 50 in file "LCD.c"
   991 ;; Parameters:    Size  Location     Type
   992 ;;  dato            1    wreg     unsigned char 
   993 ;; Auto vars:     Size  Location     Type
   994 ;;  dato            1    1[COMRAM] unsigned char 
   995 ;;  aux             1    2[COMRAM] unsigned char 
   996 ;; Return value:  Size  Location     Type
   997 ;;                  1    wreg      void 
   998 ;; Registers used:
   999 ;;		wreg, status,2, status,0, cstack
  1000 ;; Tracked objects:
  1001 ;;		On entry : 0/0
  1002 ;;		On exit  : 0/0
  1003 ;;		Unchanged: 0/0
  1004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1005 ;;      Params:         0       0       0       0       0       0       0       0       0
  1006 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1007 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1008 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1009 ;;Total ram usage:        2 bytes
  1010 ;; Hardware stack levels used:    1
  1011 ;; Hardware stack levels required when called:    1
  1012 ;; This function calls:
  1013 ;;		_ENVIA_NIBBLE
  1014 ;;		_LEER_LCD
  1015 ;; This function is called by:
  1016 ;;		_ESCRIBE_MENSAJE
  1017 ;;		_GENERACARACTER
  1018 ;; This function uses a non-reentrant model
  1019 ;;
  1020                           
  1021                           	psect	text4
  1022  007CDE                     __ptext4:
  1023                           	opt callstack 0
  1024  007CDE                     _ENVIA_CHAR:
  1025                           	opt callstack 28
  1026                           
  1027                           ;incstack = 0
  1028                           ;ENVIA_CHAR@dato stored from wreg
  1029  007CDE  6E30               	movwf	ENVIA_CHAR@dato,c
  1030                           
  1031                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
  1032  007CE0  808C               	bsf	3980,0,c	;volatile
  1033                           
  1034                           ;LCD.c: 54:  LEER_LCD();
  1035  007CE2  ECE4  F03E         	call	_LEER_LCD	;wreg free
  1036                           
  1037                           ;LCD.c: 55:  TRISD = 0x00;
  1038  007CE6  0E00               	movlw	0
  1039  007CE8  6E95               	movwf	3989,c	;volatile
  1040                           
  1041                           ;LCD.c: 56:         _delay(1200);
  1042  007CEA  0EF0               	movlw	240
  1043  007CEC                     u687:
  1044  007CEC  D000               	nop2	
  1045  007CEE  2EE8               	decfsz	wreg,f,c
  1046  007CF0  D7FD               	bra	u687
  1047                           
  1048                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
  1049  007CF2  928C               	bcf	3980,1,c	;volatile
  1050                           
  1051                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
  1052  007CF4  948C               	bcf	3980,2,c	;volatile
  1053                           
  1054                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
  1055  007CF6  808C               	bsf	3980,0,c	;volatile
  1056                           
  1057                           ;LCD.c: 61:  aux = dato & 0xF0;
  1058  007CF8  5030               	movf	ENVIA_CHAR@dato,w,c
  1059  007CFA  0BF0               	andlw	240
  1060  007CFC  6E31               	movwf	ENVIA_CHAR@aux,c
  1061                           
  1062                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
  1063  007CFE  5031               	movf	ENVIA_CHAR@aux,w,c
  1064  007D00  ECFC  F03D         	call	_ENVIA_NIBBLE
  1065                           
  1066                           ;LCD.c: 63:  aux = dato << 4;
  1067  007D04  3830               	swapf	ENVIA_CHAR@dato,w,c
  1068  007D06  0BF0               	andlw	240
  1069  007D08  6E31               	movwf	ENVIA_CHAR@aux,c
  1070                           
  1071                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
  1072  007D0A  5031               	movf	ENVIA_CHAR@aux,w,c
  1073  007D0C  ECFC  F03D         	call	_ENVIA_NIBBLE
  1074  007D10  0012               	return		;funcret
  1075  007D12                     __end_of_ENVIA_CHAR:
  1076                           	opt callstack 0
  1077                           
  1078 ;; *************** function _CURSOR_ONOFF *****************
  1079 ;; Defined at:
  1080 ;;		line 35 in file "LCD.c"
  1081 ;; Parameters:    Size  Location     Type
  1082 ;;  estado          1    wreg     unsigned char 
  1083 ;; Auto vars:     Size  Location     Type
  1084 ;;  estado          1    3[COMRAM] unsigned char 
  1085 ;; Return value:  Size  Location     Type
  1086 ;;                  1    wreg      void 
  1087 ;; Registers used:
  1088 ;;		wreg, status,2, status,0, cstack
  1089 ;; Tracked objects:
  1090 ;;		On entry : 0/0
  1091 ;;		On exit  : 0/0
  1092 ;;		Unchanged: 0/0
  1093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1094 ;;      Params:         0       0       0       0       0       0       0       0       0
  1095 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1096 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1097 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1098 ;;Total ram usage:        1 bytes
  1099 ;; Hardware stack levels used:    1
  1100 ;; Hardware stack levels required when called:    2
  1101 ;; This function calls:
  1102 ;;		_ENVIA_LCD_CMD
  1103 ;; This function is called by:
  1104 ;;		_main
  1105 ;; This function uses a non-reentrant model
  1106 ;;
  1107                           
  1108                           	psect	text5
  1109  007C14                     __ptext5:
  1110                           	opt callstack 0
  1111  007C14                     _CURSOR_ONOFF:
  1112                           	opt callstack 28
  1113                           
  1114                           ;incstack = 0
  1115                           ;CURSOR_ONOFF@estado stored from wreg
  1116  007C14  6E32               	movwf	CURSOR_ONOFF@estado,c
  1117                           
  1118                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
  1119  007C16  5032               	movf	CURSOR_ONOFF@estado,w,c
  1120  007C18  A4D8               	btfss	status,2,c
  1121  007C1A  D003               	goto	l1378
  1122  007C1C  0E0E               	movlw	14
  1123  007C1E  EC55  F03E         	call	_ENVIA_LCD_CMD
  1124  007C22                     l1378:
  1125                           
  1126                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
  1127  007C22  0432               	decf	CURSOR_ONOFF@estado,w,c
  1128  007C24  A4D8               	btfss	status,2,c
  1129  007C26  0012               	return	
  1130  007C28  0E0C               	movlw	12
  1131  007C2A  EC55  F03E         	call	_ENVIA_LCD_CMD
  1132  007C2E  0012               	return		;funcret
  1133  007C30                     __end_of_CURSOR_ONOFF:
  1134                           	opt callstack 0
  1135                           
  1136 ;; *************** function _BORRAR_LCD *****************
  1137 ;; Defined at:
  1138 ;;		line 67 in file "LCD.c"
  1139 ;; Parameters:    Size  Location     Type
  1140 ;;		None
  1141 ;; Auto vars:     Size  Location     Type
  1142 ;;		None
  1143 ;; Return value:  Size  Location     Type
  1144 ;;                  1    wreg      void 
  1145 ;; Registers used:
  1146 ;;		wreg, status,2, status,0, cstack
  1147 ;; Tracked objects:
  1148 ;;		On entry : 0/0
  1149 ;;		On exit  : 0/0
  1150 ;;		Unchanged: 0/0
  1151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1152 ;;      Params:         0       0       0       0       0       0       0       0       0
  1153 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1154 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1155 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1156 ;;Total ram usage:        0 bytes
  1157 ;; Hardware stack levels used:    1
  1158 ;; Hardware stack levels required when called:    2
  1159 ;; This function calls:
  1160 ;;		_ENVIA_LCD_CMD
  1161 ;; This function is called by:
  1162 ;;		_main
  1163 ;; This function uses a non-reentrant model
  1164 ;;
  1165                           
  1166                           	psect	text6
  1167  007BDE                     __ptext6:
  1168                           	opt callstack 0
  1169  007BDE                     _BORRAR_LCD:
  1170                           	opt callstack 28
  1171                           
  1172                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
  1173                           
  1174                           ;incstack = 0
  1175  007BDE  0E01               	movlw	1
  1176  007BE0  EC55  F03E         	call	_ENVIA_LCD_CMD
  1177  007BE4  0012               	return		;funcret
  1178  007BE6                     __end_of_BORRAR_LCD:
  1179                           	opt callstack 0
  1180                           
  1181 ;; *************** function _ENVIA_LCD_CMD *****************
  1182 ;; Defined at:
  1183 ;;		line 104 in file "LCD.c"
  1184 ;; Parameters:    Size  Location     Type
  1185 ;;  dato            1    wreg     unsigned char 
  1186 ;; Auto vars:     Size  Location     Type
  1187 ;;  dato            1    1[COMRAM] unsigned char 
  1188 ;;  aux             1    2[COMRAM] unsigned char 
  1189 ;; Return value:  Size  Location     Type
  1190 ;;                  1    wreg      void 
  1191 ;; Registers used:
  1192 ;;		wreg, status,2, status,0, cstack
  1193 ;; Tracked objects:
  1194 ;;		On entry : 0/0
  1195 ;;		On exit  : 0/0
  1196 ;;		Unchanged: 0/0
  1197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1198 ;;      Params:         0       0       0       0       0       0       0       0       0
  1199 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1200 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1201 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1202 ;;Total ram usage:        2 bytes
  1203 ;; Hardware stack levels used:    1
  1204 ;; Hardware stack levels required when called:    1
  1205 ;; This function calls:
  1206 ;;		_ENVIA_NIBBLE
  1207 ;;		_LEER_LCD
  1208 ;; This function is called by:
  1209 ;;		_POS_CURSOR
  1210 ;;		_CURSOR_ONOFF
  1211 ;;		_BORRAR_LCD
  1212 ;;		_LCD_CONFIG
  1213 ;;		_BLINK_CURSOR
  1214 ;;		_DISPLAY_ONOFF
  1215 ;;		_CURSOR_HOME
  1216 ;;		_GENERACARACTER
  1217 ;; This function uses a non-reentrant model
  1218 ;;
  1219                           
  1220                           	psect	text7
  1221  007CAA                     __ptext7:
  1222                           	opt callstack 0
  1223  007CAA                     _ENVIA_LCD_CMD:
  1224                           	opt callstack 28
  1225                           
  1226                           ;incstack = 0
  1227                           ;ENVIA_LCD_CMD@dato stored from wreg
  1228  007CAA  6E30               	movwf	ENVIA_LCD_CMD@dato,c
  1229                           
  1230                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1231  007CAC  908C               	bcf	3980,0,c	;volatile
  1232                           
  1233                           ;LCD.c: 108:  LEER_LCD();
  1234  007CAE  ECE4  F03E         	call	_LEER_LCD	;wreg free
  1235                           
  1236                           ;LCD.c: 109:  TRISD = 0b00000000;
  1237  007CB2  0E00               	movlw	0
  1238  007CB4  6E95               	movwf	3989,c	;volatile
  1239                           
  1240                           ;LCD.c: 111:         _delay(1200);
  1241  007CB6  0EF0               	movlw	240
  1242  007CB8                     u697:
  1243  007CB8  D000               	nop2	
  1244  007CBA  2EE8               	decfsz	wreg,f,c
  1245  007CBC  D7FD               	bra	u697
  1246                           
  1247                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1248  007CBE  928C               	bcf	3980,1,c	;volatile
  1249                           
  1250                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1251  007CC0  948C               	bcf	3980,2,c	;volatile
  1252                           
  1253                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1254  007CC2  908C               	bcf	3980,0,c	;volatile
  1255                           
  1256                           ;LCD.c: 115:  aux = dato & 0xF0;
  1257  007CC4  5030               	movf	ENVIA_LCD_CMD@dato,w,c
  1258  007CC6  0BF0               	andlw	240
  1259  007CC8  6E31               	movwf	ENVIA_LCD_CMD@aux,c
  1260                           
  1261                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1262  007CCA  5031               	movf	ENVIA_LCD_CMD@aux,w,c
  1263  007CCC  ECFC  F03D         	call	_ENVIA_NIBBLE
  1264                           
  1265                           ;LCD.c: 117:  aux = dato<<4;
  1266  007CD0  3830               	swapf	ENVIA_LCD_CMD@dato,w,c
  1267  007CD2  0BF0               	andlw	240
  1268  007CD4  6E31               	movwf	ENVIA_LCD_CMD@aux,c
  1269                           
  1270                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1271  007CD6  5031               	movf	ENVIA_LCD_CMD@aux,w,c
  1272  007CD8  ECFC  F03D         	call	_ENVIA_NIBBLE
  1273  007CDC  0012               	return		;funcret
  1274  007CDE                     __end_of_ENVIA_LCD_CMD:
  1275                           	opt callstack 0
  1276                           
  1277 ;; *************** function _LEER_LCD *****************
  1278 ;; Defined at:
  1279 ;;		line 121 in file "LCD.c"
  1280 ;; Parameters:    Size  Location     Type
  1281 ;;		None
  1282 ;; Auto vars:     Size  Location     Type
  1283 ;;  aux             1    0[COMRAM] unsigned char 
  1284 ;; Return value:  Size  Location     Type
  1285 ;;                  1    wreg      void 
  1286 ;; Registers used:
  1287 ;;		wreg, status,2, status,0
  1288 ;; Tracked objects:
  1289 ;;		On entry : 0/0
  1290 ;;		On exit  : 0/0
  1291 ;;		Unchanged: 0/0
  1292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1293 ;;      Params:         0       0       0       0       0       0       0       0       0
  1294 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1295 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1296 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1297 ;;Total ram usage:        1 bytes
  1298 ;; Hardware stack levels used:    1
  1299 ;; This function calls:
  1300 ;;		Nothing
  1301 ;; This function is called by:
  1302 ;;		_ENVIA_CHAR
  1303 ;;		_ENVIA_LCD_CMD
  1304 ;; This function uses a non-reentrant model
  1305 ;;
  1306                           
  1307                           	psect	text8
  1308  007DC8                     __ptext8:
  1309                           	opt callstack 0
  1310  007DC8                     _LEER_LCD:
  1311                           	opt callstack 28
  1312                           
  1313                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1314                           
  1315                           ;incstack = 0
  1316  007DC8  0EF8               	movlw	248
  1317  007DCA  6E95               	movwf	3989,c	;volatile
  1318                           
  1319                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1320  007DCC  908C               	bcf	3980,0,c	;volatile
  1321                           
  1322                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1323  007DCE  828C               	bsf	3980,1,c	;volatile
  1324                           
  1325                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1326  007DD0  848C               	bsf	3980,2,c	;volatile
  1327                           
  1328                           ;LCD.c: 128:         _delay(1200);
  1329  007DD2  0EF0               	movlw	240
  1330  007DD4                     u707:
  1331  007DD4  D000               	nop2	
  1332  007DD6  2EE8               	decfsz	wreg,f,c
  1333  007DD8  D7FD               	bra	u707
  1334                           
  1335                           ;LCD.c: 130:  aux = PORTD;
  1336  007DDA  CF83 F02F          	movff	3971,LEER_LCD@aux	;volatile
  1337                           
  1338                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1339  007DDE  948C               	bcf	3980,2,c	;volatile
  1340                           
  1341                           ;LCD.c: 132:         _delay(1200);
  1342  007DE0  0EF0               	movlw	240
  1343  007DE2                     u717:
  1344  007DE2  D000               	nop2	
  1345  007DE4  2EE8               	decfsz	wreg,f,c
  1346  007DE6  D7FD               	bra	u717
  1347                           
  1348                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1349  007DE8  848C               	bsf	3980,2,c	;volatile
  1350                           
  1351                           ;LCD.c: 135:         _delay(1200);
  1352  007DEA  0EF0               	movlw	240
  1353  007DEC                     u727:
  1354  007DEC  D000               	nop2	
  1355  007DEE  2EE8               	decfsz	wreg,f,c
  1356  007DF0  D7FD               	bra	u727
  1357  007DF2                     l1296:
  1358                           
  1359                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1360  007DF2  948C               	bcf	3980,2,c	;volatile
  1361                           
  1362                           ;LCD.c: 138:  aux = aux & 0x80;
  1363  007DF4  502F               	movf	LEER_LCD@aux,w,c
  1364  007DF6  0B80               	andlw	128
  1365  007DF8  6E2F               	movwf	LEER_LCD@aux,c
  1366                           
  1367                           ;LCD.c: 139:  while(aux == 0x80)
  1368  007DFA  D012               	goto	l1312
  1369  007DFC                     l109:
  1370                           
  1371                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1372  007DFC  848C               	bsf	3980,2,c	;volatile
  1373                           
  1374                           ;LCD.c: 142:             _delay(1200);
  1375  007DFE  0EF0               	movlw	240
  1376  007E00                     u737:
  1377  007E00  D000               	nop2	
  1378  007E02  2EE8               	decfsz	wreg,f,c
  1379  007E04  D7FD               	bra	u737
  1380                           
  1381                           ;LCD.c: 143:             aux = PORTD;
  1382  007E06  CF83 F02F          	movff	3971,LEER_LCD@aux	;volatile
  1383                           
  1384                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1385  007E0A  948C               	bcf	3980,2,c	;volatile
  1386                           
  1387                           ;LCD.c: 145:             _delay(1200);
  1388  007E0C  0EF0               	movlw	240
  1389  007E0E                     u747:
  1390  007E0E  D000               	nop2	
  1391  007E10  2EE8               	decfsz	wreg,f,c
  1392  007E12  D7FD               	bra	u747
  1393                           
  1394                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1395  007E14  848C               	bsf	3980,2,c	;volatile
  1396                           
  1397                           ;LCD.c: 147:             _delay(1200);
  1398  007E16  0EF0               	movlw	240
  1399  007E18                     u757:
  1400  007E18  D000               	nop2	
  1401  007E1A  2EE8               	decfsz	wreg,f,c
  1402  007E1C  D7FD               	bra	u757
  1403  007E1E  D7E9               	goto	l1296
  1404  007E20                     l1312:
  1405                           
  1406                           ;LCD.c: 139:  while(aux == 0x80)
  1407  007E20  0E80               	movlw	128
  1408  007E22  182F               	xorwf	LEER_LCD@aux,w,c
  1409  007E24  A4D8               	btfss	status,2,c
  1410  007E26  0012               	return	
  1411  007E28  D7E9               	goto	l109
  1412  007E2A                     __end_of_LEER_LCD:
  1413                           	opt callstack 0
  1414                           
  1415 ;; *************** function _ENVIA_NIBBLE *****************
  1416 ;; Defined at:
  1417 ;;		line 93 in file "LCD.c"
  1418 ;; Parameters:    Size  Location     Type
  1419 ;;  dato            1    wreg     unsigned char 
  1420 ;; Auto vars:     Size  Location     Type
  1421 ;;  dato            1    0[COMRAM] unsigned char 
  1422 ;; Return value:  Size  Location     Type
  1423 ;;                  1    wreg      void 
  1424 ;; Registers used:
  1425 ;;		wreg, status,2, status,0
  1426 ;; Tracked objects:
  1427 ;;		On entry : 0/0
  1428 ;;		On exit  : 0/0
  1429 ;;		Unchanged: 0/0
  1430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1431 ;;      Params:         0       0       0       0       0       0       0       0       0
  1432 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1433 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1434 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1435 ;;Total ram usage:        1 bytes
  1436 ;; Hardware stack levels used:    1
  1437 ;; This function calls:
  1438 ;;		Nothing
  1439 ;; This function is called by:
  1440 ;;		_ENVIA_CHAR
  1441 ;;		_LCD_CONFIG
  1442 ;;		_ENVIA_LCD_CMD
  1443 ;; This function uses a non-reentrant model
  1444 ;;
  1445                           
  1446                           	psect	text9
  1447  007BF8                     __ptext9:
  1448                           	opt callstack 0
  1449  007BF8                     _ENVIA_NIBBLE:
  1450                           	opt callstack 28
  1451                           
  1452                           ;incstack = 0
  1453                           ;ENVIA_NIBBLE@dato stored from wreg
  1454  007BF8  6E2F               	movwf	ENVIA_NIBBLE@dato,c
  1455                           
  1456                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1457  007BFA  0E0F               	movlw	15
  1458  007BFC  168C               	andwf	3980,f,c	;volatile
  1459                           
  1460                           ;LCD.c: 96:  dato &= 0xF0;
  1461  007BFE  0EF0               	movlw	240
  1462  007C00  162F               	andwf	ENVIA_NIBBLE@dato,f,c
  1463                           
  1464                           ;LCD.c: 97:  LATD|= dato;
  1465  007C02  502F               	movf	ENVIA_NIBBLE@dato,w,c	;volatile
  1466  007C04  128C               	iorwf	3980,f,c	;volatile
  1467                           
  1468                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1469  007C06  848C               	bsf	3980,2,c	;volatile
  1470                           
  1471                           ;LCD.c: 100:         _delay(1200);
  1472  007C08  0EF0               	movlw	240
  1473  007C0A                     u767:
  1474  007C0A  D000               	nop2	
  1475  007C0C  2EE8               	decfsz	wreg,f,c
  1476  007C0E  D7FD               	bra	u767
  1477                           
  1478                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1479  007C10  948C               	bcf	3980,2,c	;volatile
  1480  007C12  0012               	return		;funcret
  1481  007C14                     __end_of_ENVIA_NIBBLE:
  1482                           	opt callstack 0
  1483  0000                     
  1484                           	psect	rparam
  1485  0000                     tosu	equ	0xFFF
  1486                           tosh	equ	0xFFE
  1487                           tosl	equ	0xFFD
  1488                           stkptr	equ	0xFFC
  1489                           pclatu	equ	0xFFB
  1490                           pclath	equ	0xFFA
  1491                           pcl	equ	0xFF9
  1492                           tblptru	equ	0xFF8
  1493                           tblptrh	equ	0xFF7
  1494                           tblptrl	equ	0xFF6
  1495                           tablat	equ	0xFF5
  1496                           prodh	equ	0xFF4
  1497                           prodl	equ	0xFF3
  1498                           indf0	equ	0xFEF
  1499                           postinc0	equ	0xFEE
  1500                           postdec0	equ	0xFED
  1501                           preinc0	equ	0xFEC
  1502                           plusw0	equ	0xFEB
  1503                           fsr0h	equ	0xFEA
  1504                           fsr0l	equ	0xFE9
  1505                           wreg	equ	0xFE8
  1506                           indf1	equ	0xFE7
  1507                           postinc1	equ	0xFE6
  1508                           postdec1	equ	0xFE5
  1509                           preinc1	equ	0xFE4
  1510                           plusw1	equ	0xFE3
  1511                           fsr1h	equ	0xFE2
  1512                           fsr1l	equ	0xFE1
  1513                           bsr	equ	0xFE0
  1514                           indf2	equ	0xFDF
  1515                           postinc2	equ	0xFDE
  1516                           postdec2	equ	0xFDD
  1517                           preinc2	equ	0xFDC
  1518                           plusw2	equ	0xFDB
  1519                           fsr2h	equ	0xFDA
  1520                           fsr2l	equ	0xFD9
  1521                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        63
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     17      79
    BANK0           160      0      17
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 17
		 -> cadena4(BANK0[17]), cadena3(COMRAM[17]), cadena2(COMRAM[17]), 


Critical Paths under _main in COMRAM

    _main->_ESCRIBE_MENSAJE
    _POS_CURSOR->_ENVIA_LCD_CMD
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    2117
                                              7 COMRAM    10    10      0
                         _BORRAR_LCD
                       _CURSOR_ONOFF
                    _ESCRIBE_MENSAJE
                         _LCD_CONFIG
                         _POS_CURSOR
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     499
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_CONFIG                                           1     1      0     206
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      4     1      3     730
                                              3 COMRAM     4     1      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     183
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _CURSOR_ONOFF                                         1     1      0     227
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _BORRAR_LCD                                           0     0      0     183
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _ENVIA_LCD_CMD                                        2     2      0     183
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (3) _LEER_LCD                                             1     1      0      70
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BORRAR_LCD
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _CURSOR_ONOFF
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _LCD_CONFIG
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
     _ENVIA_NIBBLE
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      11       5       10.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     11      4F       1       83.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      60      20        0.0%
DATA                 0      0      60       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Jun 13 09:43:22 2019

      __CFG_FOSC$XTPLL_XT 000000             ENVIA_CHAR@aux 0031                       l202 7F0A  
                     l211 7F32                       l220 7FB4                       l109 7DFC  
                     l205 7F12                       l223 7FBC                       l217 7F7E  
                     l226 7FC4                       l229 7FCC                       l191 7ECA  
                     l194 7ED2                       l188 7EAE                       l199 7EEE  
                     u600 7FF2                       u440 7EC6                       u530 7F4A  
                     u550 7F96                       u480 7F06                       u618 7FF4  
                     u707 7DD4                       u627 7E34                       u717 7DE2  
                     u637 7E50                       u727 7DEC                       u647 7FDA  
                     u737 7E00                       u657 7D78                       u747 7E0E  
                     u667 7D86                       u757 7E18                       u677 7D96  
                     u767 7C0A                       u687 7CEC                       u697 7CB8  
            __CFG_BOR$OFF 000000               LEER_LCD@aux 002F                       wreg 000FE8  
          ??_ENVIA_NIBBLE 002F              __CFG_LVP$OFF 000000            ENVIA_CHAR@dato 0030  
            __CFG_WDT$OFF 000000                      l1312 7E20                      l1370 7C42  
                    l1540 7F6E                      l1524 7F22                      l1508 7EDE  
                    l1550 7FB0                      l1534 7F66                      l1296 7DF2  
                    l1384 7C5E                      l1378 7C22                      l1388 7C72  
                    l1492 7E9E                      l1486 7E96                      _LATD 000F8C  
            __CFG_PWRT$ON 000000                      _main 7E2A                      indf2 000FDF  
                    fsr1l 000FE1                      fsr2l 000FD9                      start 0000  
           ?_CURSOR_ONOFF 002F             __CFG_MCLRE$ON 000000              ___param_bank 000000  
         ??_ENVIA_LCD_CMD 0030          __end_of_LEER_LCD 7E2A       __size_of_BORRAR_LCD 0008  
           __CFG_PLLDIV$1 000000            __CFG_CCP2MX$ON 000000                     ?_main 002F  
                   _SPBRG 000FAF                     _PORTD 000F83       __size_of_LCD_CONFIG 0060  
                   _TRISA 000F92                     _TRISB 000F93                     _TRISD 000F95  
                   _TRISE 000F96                     _TXREG 000FAD       __size_of_ENVIA_CHAR 0034  
             ?_POS_CURSOR 0032                     main@c 0038                     tablat 000FF5  
                   status 000FD8            ??_CURSOR_ONOFF 0032           __initialization 7D12  
            __end_of_main 8000           _ESCRIBE_MENSAJE 7C54                    ??_main 0036  
           __activetblptr 000002                    _ADCON0 000FC2                    _ADCON1 000FC1  
                  _ADCON2 000FC0                    _ADRESH 000FC4                    _ADRESL 000FC3  
                  _SPBRGH 000FB0      __end_of_ENVIA_NIBBLE 7C14                    _digdec 0048  
                  _digcen 004A                    _digdmi 004E                    _digmil 004C  
                  _diguni 0046       __size_of_POS_CURSOR 0024                    clear_0 7D58  
            __pdataCOMRAM 0001                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8              ??_BORRAR_LCD 0032                 ?_LEER_LCD 002F  
              __accesstop 0060   __end_of__initialization 7D5E           __CFG_PBADEN$OFF 000000  
            ??_LCD_CONFIG 0032             ___rparam_used 000001              ??_ENVIA_CHAR 0030  
 __end_of_ESCRIBE_MENSAJE 7C7C            __pcstackCOMRAM 002F              __pidataBANK0 7BE7  
      __end_of_BORRAR_LCD 7BE6          ENVIA_LCD_CMD@aux 0031      __end_of_CURSOR_ONOFF 7C30  
      __end_of_LCD_CONFIG 7DC8        __end_of_ENVIA_CHAR 7D12                ??_LEER_LCD 002F  
        ENVIA_NIBBLE@dato 002F              ??_POS_CURSOR 0033     __size_of_ENVIA_NIBBLE 001C  
                 __Hparam 0000                   __Lparam 0000          ?_ESCRIBE_MENSAJE 0032  
                 _cadena1 0001                   _cadena2 001E                   _cadena3 000D  
                 _cadena4 0060     __end_of_ENVIA_LCD_CMD 7CDE                   __pcinit 7D12  
      __end_of_POS_CURSOR 7C54                   __ramtop 0800                   __ptext0 7E2A  
                 __ptext1 7C30                   __ptext2 7D68                   __ptext3 7C54  
                 __ptext4 7CDE                   __ptext5 7C14                   __ptext6 7BDE  
                 __ptext7 7CAA                   __ptext8 7DC8                   __ptext9 7BF8  
            _ENVIA_NIBBLE 7BF8      end_of_initialization 7D5E             __Lmediumconst 0000  
               _RCSTAbits 000FAB                   postdec1 000FE5                   postinc0 000FEE  
   __size_of_CURSOR_ONOFF 001C                 _PORTBbits 000F81                 _TRISBbits 000F93  
               _TRISCbits 000F94                 _TXSTAbits 000FAC         __size_of_LEER_LCD 0062  
            _CURSOR_ONOFF 7C14        CURSOR_ONOFF@estado 0032               _BAUDCONbits 000FB8  
           __pidataCOMRAM 7C7C       start_initialization 7D12         ENVIA_LCD_CMD@dato 0030  
             __pdataBANK0 0060               __pbssCOMRAM 0040                  _LEER_LCD 7DC8  
                _LATBbits 000F8A                  _LATDbits 000F8C                 _temporal2 0042  
               _temporal3 0040          ESCRIBE_MENSAJE@i 0035            POS_CURSOR@fila 0033  
               main@c_608 003C                 main@c_609 003E                 main@c_599 003A  
__size_of_ESCRIBE_MENSAJE 0028                _ADCON0bits 000FC2                 copy_data0 7D26  
               copy_data1 7D46    __size_of_ENVIA_LCD_CMD 0034                  __Hrparam 0000  
                __Lrparam 0000                _BORRAR_LCD 7BDE             __size_of_main 01D6  
              _LCD_CONFIG 7D68                _ENVIA_CHAR 7CDE                  _temporal 0044  
           _ENVIA_LCD_CMD 7CAA     __CFG_CPUDIV$OSC1_PLL2 000000         ??_ESCRIBE_MENSAJE 0035  
   ESCRIBE_MENSAJE@cadena 0032            ?_ENVIA_LCD_CMD 002F               ?_BORRAR_LCD 002F  
           ?_ENVIA_NIBBLE 002F                _POS_CURSOR 7C30               ?_LCD_CONFIG 002F  
      ESCRIBE_MENSAJE@tam 0034               ?_ENVIA_CHAR 002F         POS_CURSOR@columna 0032  
