# -*- coding: utf-8 -*-"""Created on Wed Sep 18 19:36:40 2019@author: GONZALO"""#%%from tkinter import *from tkinter import ttkfrom tkinter.messagebox import showinfofrom tkinter.messagebox import askyesnoimport numpy as npimport sqlite3from matplotlib.figure import Figureimport matplotlib.patchesfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAggimport syssys.setrecursionlimit(999999999)from PIL import Image, ImageTkfrom playsound import playsoundclass LABIGDATA:    def __init__(self,master):        #---------MASTER Y SUS AMIGOS----------        self.master=master#        self.master.geometry("500x500")        self.master.iconbitmap("joker.ico")        self.master.resizable(0,0)        self.master.title("LA BIG DATA")        #---------VARIABLES----------        self.valuesciclos=[]        self.valuescursos=[]        self.lista_real=[]        self.lista_simulacion=[]        self.lista_creditos=[]        self.togle=0        self.tiu=0        #---------OBJETO VARIABLES----------        self.ciclo=StringVar()        self.curso=StringVar()        self.credito=StringVar()        self.lista_evaluacion=np.array([StringVar() for i in range(15)])        self.lista_porcentaje=np.array([StringVar() for i in range(15)])        self.lista_nota=np.array([StringVar() for i in range(15)])        self.lista_unos=np.array([IntVar() for i in range(15)])        #---------FRAMES----------        self.frmL=Frame(self.master)        self.frmC=Frame(self.master)        self.frmR=Frame(self.master)        self.frmL.pack(side=LEFT)        self.frmC.pack(side=LEFT)        self.frmR.pack(side=RIGHT)        #---------WIDGETS----------        #---------frmL------------------------------------        self.btnMODO=Button(self.frmL,text="VER/SIMULAR",command=self.modeador,bg="green",fg="white",width=15)        self.cmbciclos=ttk.Combobox(self.frmL,textvariable=self.ciclo)        self.cmbcursos=ttk.Combobox(self.frmL,textvariable=self.curso)        self.btnREFRESCAR=Button(self.frmL,text="REFRESCAR",width=18,command=self.refrescador)        self.btnGUARDARNOTAS=Button(self.frmL,text="GUARDAR NOTAS",width=18,command=self.elgrangruadador)        self.btnSIMULAR=Button(self.frmL,text="SIMULAR",width=18,command=self.simulador)        self.btnEDITAR=Button(self.frmL,text="EDITAR",width=18,state=DISABLED,command=self.editor)        self.btnAGREGAR=Button(self.frmL,text="AGREGAR",width=18,state=DISABLED,command=self.agregador)        self.btnELIMINAR=Button(self.frmL,text="ELIMINAR",width=18,state=DISABLED,command=self.eliminador)        self.lblcurso=Label(self.frmL,text="CURSO:")        self.lblciclo=Label(self.frmL,text="CICLO:")        self.btnMODO.grid(row=0,column=0,padx=2,pady=5)        self.lblciclo.grid(row=1,column=0, sticky=W)        self.cmbciclos.grid(row=2,column=0,padx=2,pady=5)        self.lblcurso.grid(row=3,column=0, sticky=W)        self.cmbcursos.grid(row=4,column=0,padx=2,pady=5)        self.btnREFRESCAR.grid(row=5,column=0,padx=2,pady=5)        self.btnGUARDARNOTAS.grid(row=6,column=0,padx=2,pady=5)        self.btnSIMULAR.grid(row=7,column=0,padx=2,pady=5)        self.btnEDITAR.grid(row=8,column=0,padx=2,pady=5)        self.btnAGREGAR.grid(row=9,column=0,padx=2,pady=5)        self.btnELIMINAR.grid(row=10,column=0,padx=2,pady=5)        self.img1 = Image.open("kemper.png")        self.pic1 = ImageTk.PhotoImage(self.img1)        self.lblimagen=Label(self.frmL)        self.lblimagen.grid(row=11,column=0)        #---------frmC-------------------------        #---------Entrys----------        self.entciclo=Entry(self.frmC,width=35,textvariable=self.ciclo,state=DISABLED)        self.entcurso=Entry(self.frmC,width=23,textvariable=self.curso,state=DISABLED)        self.entcredito=Entry(self.frmC,width=10,textvariable=self.credito,state=DISABLED)        self.entciclo.grid(row=0,column=0,columnspan=3,padx=2,pady=2,sticky=W)        self.entcurso.grid(row=1,column=0,columnspan=2,padx=2,pady=2)        self.entcredito.grid(row=1,column=2,padx=2,pady=2)        self.lblnom=Label(self.frmC,text="TIPO",width=9, relief=RIDGE)        self.lblpor=Label(self.frmC,text="POR(%)",width=9, relief=RIDGE)        self.lblnot=Label(self.frmC,text="NOTA",width=10, relief=RIDGE)        self.lblnom.grid(row=2,column=0,padx=2,pady=2)        self.lblpor.grid(row=2,column=1,padx=2,pady=2)        self.lblnot.grid(row=2,column=2,padx=2,pady=2)        self.matriz_entrys=np.reshape(np.array([ttk.Entry(self.frmC) for i in range(15*3)]),(15,3))        self.lista_checks=np.reshape(np.array([Checkbutton(self.frmC) for i in range(15)]),(15))        for i in range(15):            self.matriz_entrys[i][0].config(textvariable=self.lista_evaluacion[i],width=10)            self.matriz_entrys[i][1].config(textvariable=self.lista_porcentaje[i],width=10)            self.matriz_entrys[i][2].config(textvariable=self.lista_nota[i],width=10)            self.lista_checks[i].config(variable=self.lista_unos[i])            self.lista_checks[i].grid(row=i+3,column=3)            for j in range(3):                self.matriz_entrys[i][j].grid(row=i+3,column=j,padx=2,pady=2)        #---------LABELS----------        self.lblreal=Label(self.frmC,text="REAL",relief=RIDGE,width=20)        self.lblsimu=Label(self.frmC,text="SIMULACION", relief=RIDGE,width=20)        self.lblaprobar=Label(self.frmC,text="APROBAR", relief=RIDGE,width=20)        self.lblGEABECA=Label(self.frmC,text="GEA/BECA", relief=RIDGE,width=20)        self.lblvalorreal=Label(self.frmC, relief=RIDGE,width=10)        self.lblvalorsimu=Label(self.frmC, relief=RIDGE,width=10)        self.lblvaloraprobar=Label(self.frmC, relief=RIDGE,width=10)        self.lblvalorGEABECA=Label(self.frmC, relief=RIDGE,width=10)        self.lblreal.grid(row=18,column=0,columnspan=2)        self.lblsimu.grid(row=19,column=0,columnspan=2)        self.lblaprobar.grid(row=20,column=0,columnspan=2)        self.lblGEABECA.grid(row=21,column=0,columnspan=2)        self.lblvalorreal.grid(row=18,column=2)        self.lblvalorsimu.grid(row=19,column=2)        self.lblvaloraprobar.grid(row=20,column=2)        self.lblvalorGEABECA.grid(row=21,column=2)        #----------frmR---------------------------------        #----------grafica---------        self.fig1=Figure(figsize=(3,3))      #facecolor='black'        self.ax1=self.fig1.add_subplot(111)        self.ax1.cla()        self.ax1.set_title("PROGRESO 0%")        self.ax1.pie([0])        self.circle=matplotlib.patches.Circle( (0,0), 0.7, color='white') #"black"        self.ax1.add_artist(self.circle)        self.graph1= FigureCanvasTkAgg(self.fig1, master=self.frmR)        self.graph1.draw()        self.graph1.get_tk_widget().grid(row=0,column=0)        #----------arbolito-------------        self.elarbol=ttk.Treeview(self.frmR, columns=["REAL", "SIMULACION"],height=5)        self.elarbol.grid(row=2,column=0,padx=8,pady=2)        self.elarbol.heading("#0", text="CURSO")        self.elarbol.heading("#1", text="REAL")        self.elarbol.heading("#2", text="SIMULACION")        self.elarbol.column("#0", minwidth=160, width=160,anchor=W)        self.elarbol.column("#1", minwidth=70, width=70, anchor=W)        self.elarbol.column("#2", minwidth=80, width=80, anchor=W)        self.elarbol2=ttk.Treeview(self.frmR, columns=["ACTUAL", "ACUMULADO"],height=6)        self.elarbol2.grid(row=1,column=0,padx=8,pady=2)        self.elarbol2.heading("#0", text="CICLO")        self.elarbol2.heading("#1", text="PROM. ACTUAL")        self.elarbol2.heading("#2", text="PROM. ACUM.")        self.elarbol2.column("#0", minwidth=80, width=80,anchor=W)        self.elarbol2.column("#1", minwidth=95, width=95, anchor=W)        self.elarbol2.column("#2", minwidth=90, width=90, anchor=W)        #---------BINDS---------        self.cmbciclos.bind("<<ComboboxSelected>>",self.llenarcursos)        self.cmbcursos.bind("<<ComboboxSelected>>",self.llenarentrys)        self.elarbol.bind("<<TreeviewSelect>>", self.delarbolalentry)        self.elarbol2.bind("<<TreeviewSelect>>", self.delarbolaloscursos)        #---------INICIALIZANDO-----        self.llenarciclos()        #---------FUNCIONES---------    def ploteador(self):        conn=sqlite3.connect("BASEDEDATOSNOTAS.db")        palarueda=0        with conn:            cur=conn.cursor()            cur.execute("SELECT porcentaje FROM tabla WHERE curso=? AND palomita=?",(self.curso.get(),"1"))            jeje=cur.fetchall()            for i in jeje:                palarueda=palarueda+float(i[0])        self.fig1=Figure(figsize=(3,3))      #facecolor='black'        self.ax1=self.fig1.add_subplot(111)        self.ax1.cla()        self.ax1.set_title("PROGRESO {:4.1f}%".format(palarueda),color="black")        self.ax1.pie([palarueda,100-palarueda])        self.circle=matplotlib.patches.Circle( (0,0), 0.7, color='white') #"black"        self.ax1.add_artist(self.circle)        self.graph1= FigureCanvasTkAgg(self.fig1, master=self.frmR)        self.graph1.draw()        self.graph1.get_tk_widget().grid(row=0,column=0)        if self.tiu==1:            self.fig1=Figure(figsize=(3,3),facecolor='black')      #facecolor='black'            self.ax1=self.fig1.add_subplot(111)            self.ax1.cla()            self.ax1.set_title("PROGRESO {:4.1f}%".format(palarueda),color="white")            self.ax1.pie([palarueda,100-palarueda])            self.circle=matplotlib.patches.Circle( (0,0), 0.7, color='black') #"black"            self.ax1.add_artist(self.circle)            self.graph1= FigureCanvasTkAgg(self.fig1, master=self.frmR)            self.graph1.draw()            self.graph1.get_tk_widget().grid(row=0,column=0)        conn.close()    def refrescador(self):        pinga=[self.lista_unos[i].get() for i in range(15)]        for idx,i in enumerate(pinga):            if self.togle==1:                self.matriz_entrys[idx][0].config(state=NORMAL)                self.matriz_entrys[idx][1].config(state=NORMAL)                self.matriz_entrys[idx][2].config(state=NORMAL)            elif i==1 and self.matriz_entrys[idx][2].get() =="":                self.lista_unos[idx].set(0)                self.matriz_entrys[idx][0].config(state=DISABLED)                self.matriz_entrys[idx][1].config(state=DISABLED)                self.matriz_entrys[idx][2].config(state=NORMAL)            elif i==1:                self.matriz_entrys[idx][0].config(state=DISABLED)                self.matriz_entrys[idx][1].config(state=DISABLED)                self.matriz_entrys[idx][2].config(state=DISABLED)            elif self.matriz_entrys[idx][0].get() =="" and self.matriz_entrys[idx][1].get() =="" and self.matriz_entrys[idx][2].get() =="":                self.matriz_entrys[idx][0].config(state=DISABLED)                self.matriz_entrys[idx][1].config(state=DISABLED)                self.matriz_entrys[idx][2].config(state=DISABLED)            else:                self.matriz_entrys[idx][0].config(state=DISABLED)                self.matriz_entrys[idx][1].config(state=DISABLED)                self.matriz_entrys[idx][2].config(state=NORMAL)        self.simulador()        self.llenarciclos()    def GEAdor(self):        conn=sqlite3.connect("BASEDEDATOSNOTAS.db")        with conn:            cur=conn.cursor()            cur.execute("SELECT * FROM ciclocreprom WHERE ciclo=?",(str.upper(self.ciclo.get()),))            jeje=cur.fetchone()            if float(jeje[5])>=16.57 and int(jeje[3])>=40 :                showinfo(title="",message="ES HORA DE CAGAR PA DENTRO \nPORQUE ERES GEA")                if self.tiu==0:                    playsound('canto.wav')                self.tiu=1                self.lblimagen.config(image=self.pic1,bg="black")                self.master.config(bg="black")                self.frmC.config(bg="black")                self.frmL.config(bg="black")                self.frmR.config(bg="black")                self.lblciclo.config(bg="black",fg="white")                self.lblcurso.config(bg="black",fg="white")                self.btnREFRESCAR.config(bg="black",fg="white")                self.btnGUARDARNOTAS.config(bg="black",fg="white")                self.btnSIMULAR.config(bg="black",fg="white")                self.btnEDITAR.config(bg="black",fg="white")                self.btnAGREGAR.config(bg="black",fg="white")                self.btnELIMINAR.config(bg="black",fg="white")                self.lblnom.config(bg="black",fg="white")                self.lblnot.config(bg="black",fg="white")                self.lblpor.config(bg="black",fg="white")                self.lblreal.config(bg="black",fg="white")                self.lblsimu.config(bg="black",fg="white")                self.lblaprobar.config(bg="black",fg="white")                self.lblGEABECA.config(bg="black",fg="white")                self.lblvalorreal.config(bg="black",fg="white")                self.lblvalorsimu.config(bg="black",fg="white")                self.lblvaloraprobar.config(bg="black",fg="white")                self.lblvalorGEABECA.config(bg="black",fg="white")                saltinbanqui=[self.lista_checks[i].config(bg="black")  for i in range(15)]            else:                self.lblimagen.config(image="",bg="SystemButtonFace")                self.tiu=0                self.master.config(bg="SystemButtonFace")                self.frmC.config(bg="SystemButtonFace")                self.frmL.config(bg="SystemButtonFace")                self.frmR.config(bg="SystemButtonFace")                self.lblciclo.config(bg="SystemButtonFace",fg="black")                self.lblcurso.config(bg="SystemButtonFace",fg="black")                self.btnREFRESCAR.config(bg="SystemButtonFace",fg="black")                self.btnGUARDARNOTAS.config(bg="SystemButtonFace",fg="black")                self.btnSIMULAR.config(bg="SystemButtonFace",fg="black")                self.btnEDITAR.config(bg="SystemButtonFace",fg="black")                self.btnAGREGAR.config(bg="SystemButtonFace",fg="black")                self.btnELIMINAR.config(bg="SystemButtonFace",fg="black")                self.lblnom.config(bg="SystemButtonFace",fg="black")                self.lblnot.config(bg="SystemButtonFace",fg="black")                self.lblpor.config(bg="SystemButtonFace",fg="black")                self.lblreal.config(bg="SystemButtonFace",fg="black")                self.lblsimu.config(bg="SystemButtonFace",fg="black")                self.lblaprobar.config(bg="SystemButtonFace",fg="black")                self.lblGEABECA.config(bg="SystemButtonFace",fg="black")                self.lblvalorreal.config(bg="SystemButtonFace",fg="black")                self.lblvalorsimu.config(bg="SystemButtonFace",fg="black")                self.lblvaloraprobar.config(bg="SystemButtonFace",fg="black")                self.lblvalorGEABECA.config(bg="SystemButtonFace",fg="black")                saltinbanqui=[self.lista_checks[i].config(bg="SystemButtonFace")  for i in range(15)]        conn.close()        self.llenararbol()        self.llenararbol2()    def delarbolaloscursos(self,algo):        row = self.elarbol2.focus()        a = self.elarbol2.item(row)        self.ciclo.set(a['text'])        self.llenarcursos(algo)    def editor(self):        result = askyesno(title="ANTES DE CONTINUAR",message="ESTE MODO ES PARA EDITAR UN CURSO, Y POR DEFECTO SE RESETEARAN SUS NOTAS, SE RECOMIENDA NO USARLO PORQUE MI CREADOR LE DIO LATA CREARME ¿DESEA CONTINUAR?")        if result :            if self.ciclo.get() !="" and self.curso.get() !="" and self.credito.get() !="":                    sillegacien=0                    for i in range(15):                        if self.lista_porcentaje[i].get() !="":                            sillegacien=sillegacien+float(self.lista_porcentaje[i].get())                    if sillegacien==100:                        self.creditorciclo(self.ciclo.get())                        self.eliminador()                        self.agregador()                    else:                        showinfo(title="ALTO AHI CHOLO",message='"PERO DOCTOR... LOS PORCENTAJES TIENEN QUE LLEGAR A 100%" \n-ELBROMAS')            else:                showinfo(title="ALTO AHI COMPADRE",message='"PERO DOCTOR... TIENES QUE PONER UN CICLO, UN CURSO Y SU CREDITO" \n-PAGLIACCI')    def eliminador(self):        result = askyesno(title="ANTES DE CONTINUAR",message="ESTE MODO ES PARA ELIMINAR UN CURSO Y EL CICLO, SIEMPRE Y CUANDO EL CICLO YA NO TENGA CURSOS ¿DESEA CONTINUAR?")        if result :            conn=sqlite3.connect("BASEDEDATOSNOTAS.db")            with conn:                cur=conn.cursor()                cur.execute("SELECT curso FROM tabla WHERE curso = ?",("",))                jeje=cur.fetchall()                if jeje!=[]:                    for i in range(len(jeje)):                        cur.execute("DELETE FROM tabla WHERE curso = ?",("",))                cur.execute("SELECT curso FROM curcre WHERE curso = ?",("",))                jeje=cur.fetchall()                if jeje!=[]:                    for i in range(len(jeje)):                        cur.execute("DELETE FROM curcre WHERE curso = ?",("",))                cur.execute("SELECT creditociclo FROM ciclocreprom WHERE creditociclo = ?",("",))                jeje=cur.fetchall()                if jeje!=[]:                    for i in range(len(jeje)):                        cur.execute("DELETE FROM ciclocreprom WHERE creditociclo = ?",("",))                if self.ciclo.get() !="" and self.curso.get() !="":                    cur.execute("SELECT curso FROM tabla WHERE curso = ?",(str.upper(self.curso.get()),))                    jeje=cur.fetchall()                    if jeje!=[]:                        for i in range(len(jeje)):                            cur.execute("DELETE FROM tabla WHERE curso = ?",(str.upper(self.curso.get()),))                    cur.execute("SELECT curso FROM curcre WHERE curso = ?",(str.upper(self.curso.get()),))                    jeje=cur.fetchall()                    if jeje!=[]:                        for i in range(len(jeje)):                            cur.execute("DELETE FROM curcre WHERE curso = ?",(str.upper(self.curso.get()),))                    cur.execute("SELECT ciclo FROM ciclocreprom WHERE ciclo = ?",(str.upper(self.ciclo.get()),))                    jeje=cur.fetchall()                    if jeje!=[]:                        for i in range(len(jeje)):                            cur.execute("DELETE FROM ciclocreprom WHERE ciclo = ?",(str.upper(self.ciclo.get()),))            conn.close()    def agregador(self):        result = askyesno(title="ANTES DE CONTINUAR",message="ESTE MODO ES PARA AGREGAR UN CURSO PUEDE QUE HAYA UN BUG ASI Q TE RECOMIENDO TENER CUIDADO CON ESTA VAINA LOCA ¿DESEA CONTINUAR?")        if result :            conn=sqlite3.connect("BASEDEDATOSNOTAS.db")            with conn:                cur=conn.cursor()                if self.ciclo.get() !="" and self.curso.get() !="" and self.credito.get() !="":                    sillegacien=0                    for i in range(15):                        if self.lista_porcentaje[i].get() !="":                            sillegacien=sillegacien+float(self.lista_porcentaje[i].get())                    if sillegacien==100:                        self.eliminador()                        self.creditorciclo(self.ciclo.get())                        for i in range(15):                            if self.lista_evaluacion[i].get() != "" and self.lista_porcentaje[i].get() !="" :                                a=self.ciclo.get().upper()                                b=self.curso.get().upper()                                c=self.lista_evaluacion[i].get().upper()                                cur.execute("INSERT INTO tabla (ciclo, curso, evaluacion, porcentaje,palomita,nota) VALUES (?, ?, ?,?,?,?)",(a,b,c,self.lista_porcentaje[i].get(),"0",""))                        cur.execute("INSERT INTO curcre (curso,credito) VALUES (?, ?)",(b,self.credito.get()))                        cur.execute("INSERT INTO ciclocreprom (ciclo,creditociclo,creditoacum,promciclo,promacum) VALUES (?,?,?,?,?)",(a,"","","",""))                        cur.execute("SELECT id FROM ciclocreprom WHERE ciclo = ?",(a,))                        jeje=cur.fetchone()                        ladeatras=int(jeje[0])-1                        cur.execute("SELECT creditoacum FROM ciclocreprom WHERE id = ?",(ladeatras,))                        jeje=cur.fetchone()                        acumpasumar=int(jeje[0])                        cur.execute("SELECT tabla.ciclo,curcre.credito,curcre.curso FROM curcre JOIN tabla ON tabla.curso = curcre.curso WHERE ciclo =?",(str.upper(self.ciclo.get()),))                        jeje=cur.fetchall()                        sumonciclo=0                        for row in jeje:                            sumonciclo=sumonciclo+int(row[1])                        cur.execute("UPDATE ciclocreprom SET creditociclo = ? WHERE ciclo=?",(str(sumonciclo),str.upper(self.ciclo.get())))                        cur.execute("UPDATE ciclocreprom SET creditoacum = ? WHERE ciclo=?",(str(sumonciclo+acumpasumar),str.upper(self.ciclo.get())))                    else:                        showinfo(title="ALTO AHI CHOLO",message='"PERO DOCTOR... LOS PORCENTAJES TIENEN QUE LLEGAR A 100%"\n-ELBROMAS')                else:                    showinfo(title="ALTO AHI COMPADRE",message='"PERO DOCTOR... TIENES QUE PONER UN CICLO, UN CURSO Y SU CREDITO"\n-PAGLIACCI')            conn.close()    def creditorciclo(self,ubicador):        conn=sqlite3.connect("BASEDEDATOSNOTAS.db")        with conn:            cur=conn.cursor()            cur.execute("SELECT curcre.credito,curcre.curso,tabla.ciclo FROM curcre JOIN tabla ON tabla.curso = curcre.curso WHERE tabla.ciclo= ? ",(ubicador,))            jeje=cur.fetchall()            before=""            credencial=[]            for row in jeje:                if before==row[1]:                    pass                else:                    before=row[1];credencial.append(row[0])            else:                self.lista_creditos=credencial        conn.close()    def elgrangruadador(self):        self.guardador()        self.guardador()    def guardador(self):        conn=sqlite3.connect("BASEDEDATOSNOTAS.db")        with conn:            cur=conn.cursor()            for i in range(15):                if self.lista_nota[i].get() !="" and self.lista_unos[i].get()==1 :                    if float(self.lista_nota[i].get()) > 20:                        showinfo(title="ADVERTENCIA CAUSA",message="LA NOTA TIENE QUE SER MENOR QUE 20 PE CHOLO")                    else:                        cur.execute("UPDATE tabla SET nota = ? WHERE ciclo= ? AND curso= ? AND evaluacion=? AND porcentaje=?",                        (self.lista_nota[i].get(),self.ciclo.get(),self.curso.get(),                        self.lista_evaluacion[i].get(),self.lista_porcentaje[i].get()))                        cur.execute("UPDATE tabla SET palomita = ? WHERE ciclo= ? AND curso= ? AND evaluacion=? AND porcentaje=?",("1",self.ciclo.get(),self.curso.get(),self.lista_evaluacion[i].get(),self.lista_porcentaje[i].get()))                else:                    cur.execute("UPDATE tabla SET nota = ? WHERE ciclo= ? AND curso= ? AND evaluacion=? AND porcentaje=?",("",self.ciclo.get(),self.curso.get(),self.lista_evaluacion[i].get(),self.lista_porcentaje[i].get()))                    cur.execute("UPDATE tabla SET palomita = ? WHERE ciclo= ? AND curso= ? AND evaluacion=? AND porcentaje=?",("0",self.ciclo.get(),self.curso.get(),self.lista_evaluacion[i].get(),self.lista_porcentaje[i].get()))            else:                eldeno=0                elnume=0                for idx,i in enumerate(self.lista_creditos):                    elnume=elnume+(float(self.lista_creditos[idx])*float("{:2.0f}".format(float(self.lista_real[idx]))))                    eldeno=eldeno+float(self.lista_creditos[idx])                deciclo=elnume/eldeno                cur.execute("SELECT id,creditociclo,creditoacum FROM ciclocreprom WHERE ciclo=?",(str.upper(self.ciclo.get()),))                jeje=cur.fetchone()                idxante=int(jeje[0])-1                cca=float(jeje[1])                caa=float(jeje[2])                cur.execute("SELECT creditoacum,promacum FROM ciclocreprom WHERE id=?",(idxante,))                jeje=cur.fetchone()                cap=float(jeje[0])                pap=float(jeje[1])                elnuevoacum=((cap*pap)+(deciclo*cca))/(caa)                cur.execute("UPDATE ciclocreprom SET promciclo = ? WHERE ciclo= ? ",("{:4.2f}".format(deciclo),str.upper(self.ciclo.get())))                cur.execute("UPDATE ciclocreprom SET  promacum = ? WHERE ciclo= ? ",("{:4.2f}".format(elnuevoacum),str.upper(self.ciclo.get())))        conn.close()        self.refrescador()        self.llenararbol()        self.simulador()    def delarbolalentry(self,algo):        row = self.elarbol.focus()        a = self.elarbol.item(row)        self.curso.set(a['text'])        self.credito.set(self.lista_creditos[self.valuescursos.index(self.curso.get())])        conn=sqlite3.connect("BASEDEDATOSNOTAS.db")        with conn:            cur=conn.cursor()            cur.execute("SELECT evaluacion,porcentaje,nota,palomita FROM tabla WHERE ciclo = ? AND curso = ?",(self.ciclo.get(),a['text']))            jeje=cur.fetchall()            chuleta=[self.lista_evaluacion[i].set("")for i in range(15)]            chuleta=[self.lista_porcentaje[i].set("") for i in range(15)]            chuleta=[self.lista_nota[i].set("") for i in range(15)]            chuleta=[self.lista_unos[i].set(0) for i in range(15)]            chuleta=[self.lista_checks[i].config(state=DISABLED) for i in range(15)]            chuleta=[self.matriz_entrys[i][0].config(state=DISABLED) for i in range(15)]            chuleta=[self.matriz_entrys[i][1].config(state=DISABLED) for i in range(15)]            chuleta=[self.matriz_entrys[i][2].config(state=DISABLED) for i in range(15)]            for idx,i in enumerate(jeje):                self.lista_evaluacion[idx].set(i[0])                self.lista_porcentaje[idx].set(i[1])                self.lista_nota[idx].set(i[2])                self.lista_unos[idx].set(int(i[3]))                self.matriz_entrys[idx][0].config(state=DISABLED)                self.matriz_entrys[idx][1].config(state=DISABLED)                self.matriz_entrys[idx][2].config(state=NORMAL)                self.lista_checks[idx].config(state=NORMAL)        conn.close()        self.refrescador()        self.simulador()        self.ploteador()    def llenarramas(self,biblia):        self.lista_real=[]        self.lista_simulacion=[]        for i in biblia:            self.lista_real.append(self.llenarrama(i)[0])            self.lista_simulacion.append(self.llenarrama(i)[1])    def llenarrama(self,cursete):        real=0        simulon=0        adder=0        percents=0        conn=sqlite3.connect("BASEDEDATOSNOTAS.db")        with conn:            cur=conn.cursor()            cur.execute("SELECT porcentaje,nota FROM tabla WHERE ciclo = ? AND curso = ?",(self.ciclo.get(),cursete))            jeje=cur.fetchall()            for idx,i in enumerate(jeje):                if i[1]!="":                    adder=adder+(float(i[0])*float(i[1]))                    percents=percents+(float(i[0]))            else:                real=adder/100                if percents!=0:                    simulon=adder/percents        conn.close()        return "{:4.2f}".format(real),"{:4.2f}".format(simulon)    def simulador(self):        semisumas=0        semiporcentajes=0        real=0        aprobar=0        simulacion=0        geabeca=0        for i in range(15):            if self.lista_nota[i].get() !="":                semisumas=semisumas+(float(self.lista_porcentaje[i].get())*float(self.lista_nota[i].get()))                semiporcentajes=semiporcentajes+float(self.lista_porcentaje[i].get())        else:            real=semisumas/100            if semiporcentajes !=0:                simulacion=semisumas/semiporcentajes                if (100-semiporcentajes) == 0:                    aprobar="---"                    geabeca="---"                    self.lblvaloraprobar.config(text=aprobar)                    self.lblvalorGEABECA.config(text=geabeca)                else:                    aprobar=100*((13-real)/(100-semiporcentajes))                    geabeca=100*((16.6-real)/(100-semiporcentajes))                    self.lblvaloraprobar.config(text="{:0^4.2f}".format(aprobar))                    self.lblvalorGEABECA.config(text="{:0^4.2f}".format(geabeca))        self.lblvalorreal.config(text="{:0^4.2f}".format(real))        self.lblvalorsimu.config(text="{:0^4.2f}".format(simulacion))    def modeador(self):        if self.togle==0:            self.togle=1            self.btnMODO.config(bg="yellow",fg="black",text="BASE DE DATOS")            self.btnREFRESCAR.config(state=DISABLED)            self.btnGUARDARNOTAS.config(state=DISABLED)            self.btnSIMULAR.config(state=DISABLED)            self.btnEDITAR.config(state=NORMAL)            self.btnAGREGAR.config(state=NORMAL)            self.btnELIMINAR.config(state=NORMAL)            self.credito.set("")            self.curso.set("")            self.ciclo.set("")            self.entciclo.config(state=NORMAL)            self.entcurso.config(state=NORMAL)            self.entcredito.config(state=NORMAL)            self.lblvalorreal.config(text="")            self.lblvalorsimu.config(text="")            self.lblvaloraprobar.config(text="")            self.lblvalorGEABECA.config(text="")            self.elarbol.delete(*self.elarbol.get_children())            for i in range(15):                self.lista_evaluacion[i].set("")                self.lista_porcentaje[i].set("")                self.lista_nota[i].set("")                self.lista_unos[i].set(0)                for j in range(3):                    self.matriz_entrys[i][j].config(state=NORMAL)        else:            for i in range(15):                self.lista_evaluacion[i].set("")                self.lista_porcentaje[i].set("")                self.lista_nota[i].set("")                self.lista_unos[i].set(0)                for j in range(3):                    self.matriz_entrys[i][j].config(state=NORMAL)            self.togle=0            self.btnMODO.config(bg="green",fg="white",text="VER/SIMULAR")            self.btnREFRESCAR.config(state=NORMAL)            self.btnGUARDARNOTAS.config(state=NORMAL)            self.btnSIMULAR.config(state=NORMAL)            self.btnEDITAR.config(state=DISABLED)            self.btnAGREGAR.config(state=DISABLED)            self.btnELIMINAR.config(state=DISABLED)            self.entciclo.config(state=DISABLED)            self.entcurso.config(state=DISABLED)            self.entcredito.config(state=DISABLED)            self.refrescador()    def llenarciclos(self):        conn=sqlite3.connect("BASEDEDATOSNOTAS.db")        with conn:            cur=conn.cursor()            cur.execute("SELECT ciclo FROM tabla")            self.valuesciclos=[]            anterior=""            for i in cur:                if anterior== list(i)[0]:                    pass                else:                    anterior=list(i)[0]                    self.valuesciclos.append(list(i)[0])            else:                self.cmbciclos.config(values=self.valuesciclos)        conn.close()        self.llenararbol2()    def llenarcursos(self,algo):        self.curso.set("")        self.credito.set("")        conn=sqlite3.connect("BASEDEDATOSNOTAS.db")        with conn:            cur=conn.cursor()            cur.execute("SELECT curso FROM tabla WHERE ciclo = ?",(self.ciclo.get(),))            self.valuescursos=[]            anterior=""            for i in cur:                if anterior== list(i)[0]:                    pass                else:                    anterior=list(i)[0]                    self.valuescursos.append(list(i)[0])            else:                self.cmbcursos.config(values=self.valuescursos)        conn.close()        self.llenararbol()        self.creditorciclo(self.ciclo.get())        self.GEAdor()        self.ploteador()    def llenarentrys(self,algo):        self.credito.set(self.lista_creditos[self.valuescursos.index(self.curso.get())])        conn=sqlite3.connect("BASEDEDATOSNOTAS.db")        with conn:            cur=conn.cursor()            cur.execute("SELECT evaluacion,porcentaje,nota,palomita FROM tabla \                        WHERE ciclo = ? AND curso = ?",(self.ciclo.get(),self.curso.get()))            jeje=cur.fetchall()            chuleta=[self.lista_evaluacion[i].set("")for i in range(15)]            chuleta=[self.lista_porcentaje[i].set("") for i in range(15)]            chuleta=[self.lista_nota[i].set("") for i in range(15)]            chuleta=[self.lista_unos[i].set(0) for i in range(15)]            chuleta=[self.lista_checks[i].config(state=DISABLED) for i in range(15)]            chuleta=[self.matriz_entrys[i][0].config(state=DISABLED) for i in range(15)]            chuleta=[self.matriz_entrys[i][1].config(state=DISABLED) for i in range(15)]            chuleta=[self.matriz_entrys[i][2].config(state=DISABLED) for i in range(15)]            for idx,i in enumerate(jeje):                self.lista_evaluacion[idx].set(i[0])                self.lista_porcentaje[idx].set(i[1])                self.lista_nota[idx].set(i[2])                self.lista_unos[idx].set(int(i[3]))                self.matriz_entrys[idx][0].config(state=DISABLED)                self.matriz_entrys[idx][1].config(state=DISABLED)                self.matriz_entrys[idx][2].config(state=NORMAL)                self.lista_checks[idx].config(state=NORMAL)        conn.close()        self.refrescador()        self.simulador()        self.ploteador()    def llenararbol(self):        self.llenarramas(self.valuescursos)        self.elarbol.delete(*self.elarbol.get_children())        for idx,reg in enumerate(self.valuescursos):            if idx%2==0:                self.elarbol.insert('', 'end', text=reg,                values=["{:2.0f}".format(float(self.lista_real[idx])),"{:2.0f}".format(float(self.lista_simulacion[idx]))],tags=("a",))            else:                self.elarbol.insert('', 'end', text=reg,                values=["{:2.0f}".format(float(self.lista_real[idx])),"{:2.0f}".format(float(self.lista_simulacion[idx]))],tags=("b",))        else:            self.elarbol.tag_configure('a', background='#9AB0AF',foreground="black")            self.elarbol.tag_configure('b', background='white',foreground="black")            if self.tiu==1:                self.elarbol.tag_configure('a', background='black',foreground="white")                self.elarbol.tag_configure('b', background='black',foreground="white")    def llenararbol2(self):        self.elarbol2.delete(*self.elarbol2.get_children())        conn=sqlite3.connect("BASEDEDATOSNOTAS.db")        with conn:            cur=conn.cursor()            jeje=cur.execute("SELECT * FROM ciclocreprom").fetchall()            for idx,i in enumerate(jeje):                if idx%2==0:                    self.elarbol2.insert('', 'end', text=i[1],                    values=[i[4],i[5]],tags=("a",))                else:                    self.elarbol2.insert('', 'end', text=i[1],                    values=[i[4],i[5]],tags=("b",))            else:                self.elarbol2.tag_configure('a', background='#9AB0AF',foreground="black")                self.elarbol2.tag_configure('b', background='white',foreground="black")                if self.tiu==1:                    self.elarbol2.tag_configure('a', background='black',foreground="white")                    self.elarbol2.tag_configure('b', background='black',foreground="white")        conn.close()root=Tk()APP=LABIGDATA(root)root.mainloop()