

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Jun 03 21:44:51 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    28                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    29  0000                     
    30                           ; Version 2.05
    31                           ; Generated 20/12/2018 GMT
    32                           ; 
    33                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC18F4550 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     _T1CONbits	set	4045
    65  0000                     _PIR1bits	set	3998
    66  0000                     _INTCONbits	set	4082
    67  0000                     _RCONbits	set	4048
    68  0000                     _INTCON3bits	set	4080
    69  0000                     _INTCON2bits	set	4081
    70  0000                     _IPR1bits	set	3999
    71  0000                     _PIE1bits	set	3997
    72  0000                     _CCPR1L	set	4030
    73  0000                     _CCPR1H	set	4031
    74  0000                     _CCP1CON	set	4029
    75  0000                     _T1CON	set	4045
    76  0000                     _TMR1L	set	4046
    77  0000                     _TMR1H	set	4047
    78  0000                     _TRISBbits	set	3987
    79  0000                     _LATBbits	set	3978
    80  0000                     _PORTD	set	3971
    81  0000                     _LATD	set	3980
    82  0000                     _TRISD	set	3989
    83  0000                     _LATDbits	set	3980
    84                           
    85                           	psect	smallconst
    86  000800                     __psmallconst:
    87                           	opt callstack 0
    88  000800  00                 	db	0
    89  000801                     STR_1:
    90  000801  43                 	db	67	;'C'
    91  000802  52                 	db	82	;'R'
    92  000803  4F                 	db	79	;'O'
    93  000804  4E                 	db	78	;'N'
    94  000805  4F                 	db	79	;'O'
    95  000806  4D                 	db	77	;'M'
    96  000807  45                 	db	69	;'E'
    97  000808  54                 	db	84	;'T'
    98  000809  52                 	db	82	;'R'
    99  00080A  4F                 	db	79	;'O'
   100  00080B  3A                 	db	58	;':'
   101  00080C  00                 	db	0
   102  00080D                     STR_2:
   103  00080D  30                 	db	48	;'0'
   104  00080E  30                 	db	48	;'0'
   105  00080F  3A                 	db	58	;':'
   106  000810  30                 	db	48	;'0'
   107  000811  30                 	db	48	;'0'
   108  000812  3A                 	db	58	;':'
   109  000813  30                 	db	48	;'0'
   110  000814  30                 	db	48	;'0'
   111  000815  00                 	db	0
   112                           
   113                           ; #config settings
   114  000816  00                 	db	0	; dummy byte at the end
   115  0000                     
   116                           	psect	cinit
   117  000D24                     __pcinit:
   118                           	opt callstack 0
   119  000D24                     start_initialization:
   120                           	opt callstack 0
   121  000D24                     __initialization:
   122                           	opt callstack 0
   123                           
   124                           ; Clear objects allocated to COMRAM (6 bytes)
   125  000D24  6A15               	clrf	(__pbssCOMRAM+5)& (0+255),c
   126  000D26  6A14               	clrf	(__pbssCOMRAM+4)& (0+255),c
   127  000D28  6A13               	clrf	(__pbssCOMRAM+3)& (0+255),c
   128  000D2A  6A12               	clrf	(__pbssCOMRAM+2)& (0+255),c
   129  000D2C  6A11               	clrf	(__pbssCOMRAM+1)& (0+255),c
   130  000D2E  6A10               	clrf	__pbssCOMRAM& (0+255),c
   131  000D30                     end_of_initialization:
   132                           	opt callstack 0
   133  000D30                     __end_of__initialization:
   134                           	opt callstack 0
   135  000D30  9016               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   136  000D32  9216               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   137  000D34  0E00               	movlw	low (__Lsmallconst shr (0+16))
   138  000D36  6EF8               	movwf	tblptru,c
   139  000D38  0E08               	movlw	high __Lsmallconst
   140  000D3A  6EF7               	movwf	tblptrh,c
   141  000D3C  0100               	movlb	0
   142  000D3E  EF0C  F004         	goto	_main	;jump to C main() function
   143                           
   144                           	psect	bssCOMRAM
   145  000010                     __pbssCOMRAM:
   146                           	opt callstack 0
   147  000010                     _acaba:
   148                           	opt callstack 0
   149  000010                     	ds	1
   150  000011                     _alfa:
   151                           	opt callstack 0
   152  000011                     	ds	1
   153  000012                     _pase:
   154                           	opt callstack 0
   155  000012                     	ds	1
   156  000013                     _cent:
   157                           	opt callstack 0
   158  000013                     	ds	1
   159  000014                     _seg:
   160                           	opt callstack 0
   161  000014                     	ds	1
   162  000015                     _min:
   163                           	opt callstack 0
   164  000015                     	ds	1
   165                           
   166                           	psect	cstackCOMRAM
   167  000001                     __pcstackCOMRAM:
   168                           	opt callstack 0
   169  000001                     ??_elboton:
   170                           
   171                           ; 1 bytes @ 0x0
   172  000001                     	ds	4
   173  000005                     ??_mover:
   174  000005                     ?___awdiv:
   175                           	opt callstack 0
   176  000005                     ?___awmod:
   177                           	opt callstack 0
   178  000005                     ENVIA_NIBBLE@dato:
   179                           	opt callstack 0
   180  000005                     LEER_LCD@aux:
   181                           	opt callstack 0
   182  000005                     ___awdiv@dividend:
   183                           	opt callstack 0
   184  000005                     ___awmod@dividend:
   185                           	opt callstack 0
   186                           
   187                           ; 2 bytes @ 0x4
   188  000005                     	ds	1
   189  000006                     ENVIA_CHAR@dato:
   190                           	opt callstack 0
   191  000006                     ENVIA_LCD_CMD@dato:
   192                           	opt callstack 0
   193                           
   194                           ; 1 bytes @ 0x5
   195  000006                     	ds	1
   196  000007                     ENVIA_CHAR@aux:
   197                           	opt callstack 0
   198  000007                     ENVIA_LCD_CMD@aux:
   199                           	opt callstack 0
   200  000007                     mover@j:
   201                           	opt callstack 0
   202  000007                     ___awdiv@divisor:
   203                           	opt callstack 0
   204  000007                     ___awmod@divisor:
   205                           	opt callstack 0
   206                           
   207                           ; 2 bytes @ 0x6
   208  000007                     	ds	1
   209  000008                     ??_LCD_CONFIG:
   210  000008                     POS_CURSOR@columna:
   211                           	opt callstack 0
   212  000008                     CURSOR_ONOFF@estado:
   213                           	opt callstack 0
   214  000008                     ESCRIBE_MENSAJE@cadena:
   215                           	opt callstack 0
   216                           
   217                           ; 2 bytes @ 0x7
   218  000008                     	ds	1
   219  000009                     POS_CURSOR@fila:
   220                           	opt callstack 0
   221  000009                     ___awdiv@counter:
   222                           	opt callstack 0
   223  000009                     ___awmod@counter:
   224                           	opt callstack 0
   225  000009                     mover@j_600:
   226                           	opt callstack 0
   227                           
   228                           ; 2 bytes @ 0x8
   229  000009                     	ds	1
   230  00000A                     ESCRIBE_MENSAJE@tam:
   231                           	opt callstack 0
   232  00000A                     ___awdiv@sign:
   233                           	opt callstack 0
   234  00000A                     ___awmod@sign:
   235                           	opt callstack 0
   236                           
   237                           ; 1 bytes @ 0x9
   238  00000A                     	ds	1
   239  00000B                     ??_ESCRIBE_MENSAJE:
   240  00000B                     ___awdiv@quotient:
   241                           	opt callstack 0
   242                           
   243                           ; 2 bytes @ 0xA
   244  00000B                     	ds	2
   245  00000D                     ESCRIBE_MENSAJE@i:
   246                           	opt callstack 0
   247                           
   248                           ; 1 bytes @ 0xC
   249  00000D                     	ds	1
   250  00000E                     ??_main:
   251                           
   252                           ; 1 bytes @ 0xD
   253  00000E                     	ds	2
   254                           
   255 ;;
   256 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   257 ;;
   258 ;; *************** function _main *****************
   259 ;; Defined at:
   260 ;;		line 40 in file "intento con servo.c"
   261 ;; Parameters:    Size  Location     Type
   262 ;;		None
   263 ;; Auto vars:     Size  Location     Type
   264 ;;		None
   265 ;; Return value:  Size  Location     Type
   266 ;;                  1    wreg      void 
   267 ;; Registers used:
   268 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   269 ;; Tracked objects:
   270 ;;		On entry : 0/0
   271 ;;		On exit  : 0/0
   272 ;;		Unchanged: 0/0
   273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   274 ;;      Params:         0       0       0       0       0       0       0       0       0
   275 ;;      Locals:         0       0       0       0       0       0       0       0       0
   276 ;;      Temps:          2       0       0       0       0       0       0       0       0
   277 ;;      Totals:         2       0       0       0       0       0       0       0       0
   278 ;;Total ram usage:        2 bytes
   279 ;; Hardware stack levels required when called:    5
   280 ;; This function calls:
   281 ;;		_BORRAR_LCD
   282 ;;		_CURSOR_HOME
   283 ;;		_CURSOR_ONOFF
   284 ;;		_ENVIA_CHAR
   285 ;;		_ESCRIBE_MENSAJE
   286 ;;		_LCD_CONFIG
   287 ;;		_POS_CURSOR
   288 ;;		___awdiv
   289 ;;		___awmod
   290 ;;		_mover
   291 ;; This function is called by:
   292 ;;		Startup code after reset
   293 ;; This function uses a non-reentrant model
   294 ;;
   295                           
   296                           	psect	text0
   297  000818                     __ptext0:
   298                           	opt callstack 0
   299  000818                     _main:
   300                           	opt callstack 26
   301                           
   302                           ;intento con servo.c: 42:     TRISD =0x00;
   303                           
   304                           ;incstack = 0
   305  000818  0E00               	movlw	0
   306  00081A  6E95               	movwf	3989,c	;volatile
   307                           
   308                           ;intento con servo.c: 43:     TRISBbits.RB0=0;
   309  00081C  9093               	bcf	3987,0,c	;volatile
   310                           
   311                           ;intento con servo.c: 46:     _delay((unsigned long)((50)*(48000000UL/4000.0)));
   312  00081E  0E04               	movlw	4
   313  000820  6E0F               	movwf	(??_main+1)& (0+255),c
   314  000822  0E0C               	movlw	12
   315  000824  6E0E               	movwf	??_main& (0+255),c
   316  000826  0E34               	movlw	52
   317  000828                     u607:
   318  000828  2EE8               	decfsz	wreg,f,c
   319  00082A  D7FE               	bra	u607
   320  00082C  2E0E               	decfsz	??_main& (0+255),f,c
   321  00082E  D7FC               	bra	u607
   322  000830  2E0F               	decfsz	(??_main+1)& (0+255),f,c
   323  000832  D7FA               	bra	u607
   324                           
   325                           ;intento con servo.c: 47:     LCD_CONFIG();
   326  000834  ECE2  F005         	call	_LCD_CONFIG	;wreg free
   327                           
   328                           ;intento con servo.c: 48:     BORRAR_LCD();
   329  000838  ECC1  F006         	call	_BORRAR_LCD	;wreg free
   330                           
   331                           ;intento con servo.c: 49:     CURSOR_HOME();
   332  00083C  ECBD  F006         	call	_CURSOR_HOME	;wreg free
   333                           
   334                           ;intento con servo.c: 50:     CURSOR_ONOFF(1);
   335  000840  0E01               	movlw	1
   336  000842  ECA1  F006         	call	_CURSOR_ONOFF
   337                           
   338                           ;intento con servo.c: 51:     ESCRIBE_MENSAJE("CRONOMETRO:",11);
   339  000846  0E01               	movlw	low STR_1
   340  000848  6E08               	movwf	ESCRIBE_MENSAJE@cadena,c
   341  00084A  0E08               	movlw	high STR_1
   342  00084C  6E09               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   343  00084E  0E0B               	movlw	11
   344  000850  6E0A               	movwf	ESCRIBE_MENSAJE@tam,c
   345  000852  EC67  F006         	call	_ESCRIBE_MENSAJE	;wreg free
   346                           
   347                           ;intento con servo.c: 52:     POS_CURSOR(2,0);
   348  000856  0E00               	movlw	0
   349  000858  6E08               	movwf	POS_CURSOR@columna,c
   350  00085A  0E02               	movlw	2
   351  00085C  EC80  F006         	call	_POS_CURSOR
   352                           
   353                           ;intento con servo.c: 53:     ESCRIBE_MENSAJE("00:00:00",8);
   354  000860  0E0D               	movlw	low STR_2
   355  000862  6E08               	movwf	ESCRIBE_MENSAJE@cadena,c
   356  000864  0E08               	movlw	high STR_2
   357  000866  6E09               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   358  000868  0E08               	movlw	8
   359  00086A  6E0A               	movwf	ESCRIBE_MENSAJE@tam,c
   360  00086C  EC67  F006         	call	_ESCRIBE_MENSAJE	;wreg free
   361                           
   362                           ;intento con servo.c: 56:     TMR1H=0xFF;
   363  000870  68CF               	setf	4047,c	;volatile
   364                           
   365                           ;intento con servo.c: 57:     TMR1L=0xFF;
   366  000872  68CE               	setf	4046,c	;volatile
   367                           
   368                           ;intento con servo.c: 58:     T1CON=0xFA;
   369  000874  0EFA               	movlw	250
   370  000876  6ECD               	movwf	4045,c	;volatile
   371                           
   372                           ;intento con servo.c: 61:     CCP1CON=0x0B;
   373  000878  0E0B               	movlw	11
   374  00087A  6EBD               	movwf	4029,c	;volatile
   375                           
   376                           ;intento con servo.c: 62:     CCPR1H=0x00;
   377  00087C  0E00               	movlw	0
   378  00087E  6EBF               	movwf	4031,c	;volatile
   379                           
   380                           ;intento con servo.c: 63:     CCPR1L=0x29;
   381  000880  0E29               	movlw	41
   382  000882  6EBE               	movwf	4030,c	;volatile
   383                           
   384                           ;intento con servo.c: 64:     PIE1bits.CCP1IE=1;
   385  000884  849D               	bsf	3997,2,c	;volatile
   386                           
   387                           ;intento con servo.c: 65:     IPR1bits.CCP1IP=1;
   388  000886  849F               	bsf	3999,2,c	;volatile
   389                           
   390                           ;intento con servo.c: 68:     INTCON2bits.INTEDG1=1;
   391  000888  8AF1               	bsf	4081,5,c	;volatile
   392                           
   393                           ;intento con servo.c: 69:     INTCON3bits.INT1IE=1;
   394  00088A  86F0               	bsf	4080,3,c	;volatile
   395                           
   396                           ;intento con servo.c: 70:     INTCON3bits.INT1IP=0;
   397  00088C  9CF0               	bcf	4080,6,c	;volatile
   398                           
   399                           ;intento con servo.c: 73:     RCONbits.IPEN = 1;
   400  00088E  8ED0               	bsf	4048,7,c	;volatile
   401                           
   402                           ;intento con servo.c: 74:     INTCONbits.GIEH = 1;
   403  000890  8EF2               	bsf	4082,7,c	;volatile
   404                           
   405                           ;intento con servo.c: 75:     INTCONbits.GIEL = 1;
   406  000892  8CF2               	bsf	4082,6,c	;volatile
   407                           
   408                           ;intento con servo.c: 76:     INTCONbits.PEIE=1;
   409  000894  8CF2               	bsf	4082,6,c	;volatile
   410  000896                     l1393:
   411                           
   412                           ;intento con servo.c: 82:         acaba=0;
   413  000896  0E00               	movlw	0
   414  000898  6E10               	movwf	_acaba,c
   415                           
   416                           ;intento con servo.c: 83:         POS_CURSOR(2,0);
   417  00089A  0E00               	movlw	0
   418  00089C  6E08               	movwf	POS_CURSOR@columna,c
   419  00089E  0E02               	movlw	2
   420  0008A0  EC80  F006         	call	_POS_CURSOR
   421                           
   422                           ;intento con servo.c: 84:         ENVIA_CHAR(min/10+'0');
   423  0008A4  C015  F005         	movff	_min,___awdiv@dividend
   424  0008A8  6A06               	clrf	___awdiv@dividend+1,c
   425  0008AA  0E00               	movlw	0
   426  0008AC  6E08               	movwf	___awdiv@divisor+1,c
   427  0008AE  0E0A               	movlw	10
   428  0008B0  6E07               	movwf	___awdiv@divisor,c
   429  0008B2  EC37  F005         	call	___awdiv	;wreg free
   430  0008B6  5005               	movf	?___awdiv,w,c
   431  0008B8  0F30               	addlw	48
   432  0008BA  EC33  F006         	call	_ENVIA_CHAR
   433                           
   434                           ;intento con servo.c: 85:         ENVIA_CHAR(min%10+'0');
   435  0008BE  C015  F005         	movff	_min,___awmod@dividend
   436  0008C2  6A06               	clrf	___awmod@dividend+1,c
   437  0008C4  0E00               	movlw	0
   438  0008C6  6E08               	movwf	___awmod@divisor+1,c
   439  0008C8  0E0A               	movlw	10
   440  0008CA  6E07               	movwf	___awmod@divisor,c
   441  0008CC  EC79  F005         	call	___awmod	;wreg free
   442  0008D0  5005               	movf	?___awmod,w,c
   443  0008D2  0F30               	addlw	48
   444  0008D4  EC33  F006         	call	_ENVIA_CHAR
   445                           
   446                           ;intento con servo.c: 86:         ENVIA_CHAR(':');
   447  0008D8  0E3A               	movlw	58
   448  0008DA  EC33  F006         	call	_ENVIA_CHAR
   449                           
   450                           ;intento con servo.c: 87:         ENVIA_CHAR(seg/10+'0');
   451  0008DE  C014  F005         	movff	_seg,___awdiv@dividend
   452  0008E2  6A06               	clrf	___awdiv@dividend+1,c
   453  0008E4  0E00               	movlw	0
   454  0008E6  6E08               	movwf	___awdiv@divisor+1,c
   455  0008E8  0E0A               	movlw	10
   456  0008EA  6E07               	movwf	___awdiv@divisor,c
   457  0008EC  EC37  F005         	call	___awdiv	;wreg free
   458  0008F0  5005               	movf	?___awdiv,w,c
   459  0008F2  0F30               	addlw	48
   460  0008F4  EC33  F006         	call	_ENVIA_CHAR
   461                           
   462                           ;intento con servo.c: 88:         ENVIA_CHAR(seg%10+'0');
   463  0008F8  C014  F005         	movff	_seg,___awmod@dividend
   464  0008FC  6A06               	clrf	___awmod@dividend+1,c
   465  0008FE  0E00               	movlw	0
   466  000900  6E08               	movwf	___awmod@divisor+1,c
   467  000902  0E0A               	movlw	10
   468  000904  6E07               	movwf	___awmod@divisor,c
   469  000906  EC79  F005         	call	___awmod	;wreg free
   470  00090A  5005               	movf	?___awmod,w,c
   471  00090C  0F30               	addlw	48
   472  00090E  EC33  F006         	call	_ENVIA_CHAR
   473                           
   474                           ;intento con servo.c: 89:         ENVIA_CHAR(':');
   475  000912  0E3A               	movlw	58
   476  000914  EC33  F006         	call	_ENVIA_CHAR
   477                           
   478                           ;intento con servo.c: 90:         ENVIA_CHAR(cent/10+'0');
   479  000918  C013  F005         	movff	_cent,___awdiv@dividend
   480  00091C  6A06               	clrf	___awdiv@dividend+1,c
   481  00091E  0E00               	movlw	0
   482  000920  6E08               	movwf	___awdiv@divisor+1,c
   483  000922  0E0A               	movlw	10
   484  000924  6E07               	movwf	___awdiv@divisor,c
   485  000926  EC37  F005         	call	___awdiv	;wreg free
   486  00092A  5005               	movf	?___awdiv,w,c
   487  00092C  0F30               	addlw	48
   488  00092E  EC33  F006         	call	_ENVIA_CHAR
   489                           
   490                           ;intento con servo.c: 91:         ENVIA_CHAR(cent%10+'0');
   491  000932  C013  F005         	movff	_cent,___awmod@dividend
   492  000936  6A06               	clrf	___awmod@dividend+1,c
   493  000938  0E00               	movlw	0
   494  00093A  6E08               	movwf	___awmod@divisor+1,c
   495  00093C  0E0A               	movlw	10
   496  00093E  6E07               	movwf	___awmod@divisor,c
   497  000940  EC79  F005         	call	___awmod	;wreg free
   498  000944  5005               	movf	?___awmod,w,c
   499  000946  0F30               	addlw	48
   500  000948  EC33  F006         	call	_ENVIA_CHAR
   501                           
   502                           ;intento con servo.c: 92:         acaba=1;
   503  00094C  0E01               	movlw	1
   504  00094E  6E10               	movwf	_acaba,c
   505                           
   506                           ;intento con servo.c: 93:         if(acaba==1 && alfa==1){
   507  000950  0411               	decf	_alfa,w,c
   508  000952  A4D8               	btfss	status,2,c
   509  000954  D028               	goto	l149
   510                           
   511                           ;intento con servo.c: 94:             alfa=0;
   512  000956  0E00               	movlw	0
   513  000958  6E11               	movwf	_alfa,c
   514                           
   515                           ;intento con servo.c: 95:         if(seg%5==0 && seg>0 && cent==0){
   516  00095A  C014  F005         	movff	_seg,___awmod@dividend
   517  00095E  6A06               	clrf	___awmod@dividend+1,c
   518  000960  0E00               	movlw	0
   519  000962  6E08               	movwf	___awmod@divisor+1,c
   520  000964  0E05               	movlw	5
   521  000966  6E07               	movwf	___awmod@divisor,c
   522  000968  EC79  F005         	call	___awmod	;wreg free
   523  00096C  5005               	movf	?___awmod,w,c
   524  00096E  1006               	iorwf	?___awmod+1,w,c
   525  000970  A4D8               	btfss	status,2,c
   526  000972  D00A               	goto	l1431
   527  000974  5014               	movf	_seg,w,c
   528  000976  B4D8               	btfsc	status,2,c
   529  000978  D007               	goto	l1431
   530  00097A  5013               	movf	_cent,w,c
   531  00097C  A4D8               	btfss	status,2,c
   532  00097E  D004               	goto	l1431
   533                           
   534                           ;intento con servo.c: 96:             pase=0;
   535  000980  0E00               	movlw	0
   536  000982  6E12               	movwf	_pase,c
   537                           
   538                           ;intento con servo.c: 97:             mover();
   539  000984  ECD6  F004         	call	_mover	;wreg free
   540  000988                     l1431:
   541                           
   542                           ;intento con servo.c: 99:         if(pase==1 && cent==0 && seg==0){
   543  000988  0412               	decf	_pase,w,c
   544  00098A  A4D8               	btfss	status,2,c
   545  00098C  D00C               	goto	l149
   546  00098E  5013               	movf	_cent,w,c
   547  000990  A4D8               	btfss	status,2,c
   548  000992  D009               	goto	l149
   549  000994  5014               	movf	_seg,w,c
   550  000996  A4D8               	btfss	status,2,c
   551  000998  D006               	goto	l149
   552                           
   553                           ;intento con servo.c: 100:             pase=0;
   554  00099A  0E00               	movlw	0
   555  00099C  6E12               	movwf	_pase,c
   556                           
   557                           ;intento con servo.c: 101:             mover();
   558  00099E  ECD6  F004         	call	_mover	;wreg free
   559                           
   560                           ;intento con servo.c: 102:             mover();
   561  0009A2  ECD6  F004         	call	_mover	;wreg free
   562  0009A6                     l149:
   563                           
   564                           ;intento con servo.c: 105:         acaba=0;
   565  0009A6  0E00               	movlw	0
   566  0009A8  6E10               	movwf	_acaba,c
   567  0009AA  D775               	goto	l1393
   568  0009AC                     __end_of_main:
   569                           	opt callstack 0
   570                           
   571 ;; *************** function _mover *****************
   572 ;; Defined at:
   573 ;;		line 22 in file "intento con servo.c"
   574 ;; Parameters:    Size  Location     Type
   575 ;;		None
   576 ;; Auto vars:     Size  Location     Type
   577 ;;  j               2    8[COMRAM] int 
   578 ;;  j               2    6[COMRAM] int 
   579 ;; Return value:  Size  Location     Type
   580 ;;                  1    wreg      void 
   581 ;; Registers used:
   582 ;;		wreg, status,2, status,0
   583 ;; Tracked objects:
   584 ;;		On entry : 0/0
   585 ;;		On exit  : 0/0
   586 ;;		Unchanged: 0/0
   587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   588 ;;      Params:         0       0       0       0       0       0       0       0       0
   589 ;;      Locals:         4       0       0       0       0       0       0       0       0
   590 ;;      Temps:          2       0       0       0       0       0       0       0       0
   591 ;;      Totals:         6       0       0       0       0       0       0       0       0
   592 ;;Total ram usage:        6 bytes
   593 ;; Hardware stack levels used:    1
   594 ;; Hardware stack levels required when called:    2
   595 ;; This function calls:
   596 ;;		Nothing
   597 ;; This function is called by:
   598 ;;		_main
   599 ;; This function uses a non-reentrant model
   600 ;;
   601                           
   602                           	psect	text1
   603  0009AC                     __ptext1:
   604                           	opt callstack 0
   605  0009AC                     _mover:
   606                           	opt callstack 28
   607                           
   608                           ;intento con servo.c: 23:     for(int j=0;j<10;j++){
   609                           
   610                           ;incstack = 0
   611  0009AC  0E00               	movlw	0
   612  0009AE  6E08               	movwf	mover@j+1,c
   613  0009B0  0E00               	movlw	0
   614  0009B2  6E07               	movwf	mover@j,c
   615  0009B4                     l139:
   616                           
   617                           ;intento con servo.c: 24:         LATBbits.LB0 = 1;
   618  0009B4  808A               	bsf	3978,0,c	;volatile
   619                           
   620                           ;intento con servo.c: 25:         _delay((unsigned long)((600)*(48000000UL/4000000.0)));
   621  0009B6  0E0A               	movlw	10
   622  0009B8  6E05               	movwf	??_mover& (0+255),c
   623  0009BA  0E58               	movlw	88
   624  0009BC                     u617:
   625  0009BC  2EE8               	decfsz	wreg,f,c
   626  0009BE  D7FE               	bra	u617
   627  0009C0  2E05               	decfsz	??_mover& (0+255),f,c
   628  0009C2  D7FC               	bra	u617
   629  0009C4  D000               	nop2	
   630                           
   631                           ;intento con servo.c: 26:         LATBbits.LB0 = 0;
   632  0009C6  908A               	bcf	3978,0,c	;volatile
   633                           
   634                           ;intento con servo.c: 27:         _delay((unsigned long)((19)*(48000000UL/4000.0)));
   635  0009C8  0E02               	movlw	2
   636  0009CA  6E06               	movwf	(??_mover+1)& (0+255),c
   637  0009CC  0E29               	movlw	41
   638  0009CE  6E05               	movwf	??_mover& (0+255),c
   639  0009D0  0E17               	movlw	23
   640  0009D2                     u627:
   641  0009D2  2EE8               	decfsz	wreg,f,c
   642  0009D4  D7FE               	bra	u627
   643  0009D6  2E05               	decfsz	??_mover& (0+255),f,c
   644  0009D8  D7FC               	bra	u627
   645  0009DA  2E06               	decfsz	(??_mover+1)& (0+255),f,c
   646  0009DC  D7FA               	bra	u627
   647  0009DE  F000               	nop	
   648                           
   649                           ;intento con servo.c: 28:         _delay((unsigned long)((400)*(48000000UL/4000000.0)));
   650  0009E0  0E07               	movlw	7
   651  0009E2  6E05               	movwf	??_mover& (0+255),c
   652  0009E4  0E3A               	movlw	58
   653  0009E6                     u637:
   654  0009E6  2EE8               	decfsz	wreg,f,c
   655  0009E8  D7FE               	bra	u637
   656  0009EA  2E05               	decfsz	??_mover& (0+255),f,c
   657  0009EC  D7FC               	bra	u637
   658  0009EE  D000               	nop2	
   659                           
   660                           ;intento con servo.c: 29:     }
   661  0009F0  4A07               	infsnz	mover@j,f,c
   662  0009F2  2A08               	incf	mover@j+1,f,c
   663  0009F4  BE08               	btfsc	mover@j+1,7,c
   664  0009F6  D7DE               	goto	l139
   665  0009F8  5008               	movf	mover@j+1,w,c
   666  0009FA  E104               	bnz	u70
   667  0009FC  0E0A               	movlw	10
   668  0009FE  5C07               	subwf	mover@j,w,c
   669  000A00  A0D8               	btfss	status,0,c
   670  000A02  D7D8               	goto	l139
   671  000A04                     u70:
   672                           
   673                           ;intento con servo.c: 30:     for(int j=0;j<10;j++){
   674  000A04  0E00               	movlw	0
   675  000A06  6E0A               	movwf	mover@j_600+1,c
   676  000A08  0E00               	movlw	0
   677  000A0A  6E09               	movwf	mover@j_600,c
   678  000A0C                     l141:
   679                           
   680                           ;intento con servo.c: 31:         LATBbits.LB0 = 1;
   681  000A0C  808A               	bsf	3978,0,c	;volatile
   682                           
   683                           ;intento con servo.c: 32:         _delay((unsigned long)((400)*(48000000UL/4000000.0)));
   684  000A0E  0E07               	movlw	7
   685  000A10  6E05               	movwf	??_mover& (0+255),c
   686  000A12  0E3A               	movlw	58
   687  000A14                     u647:
   688  000A14  2EE8               	decfsz	wreg,f,c
   689  000A16  D7FE               	bra	u647
   690  000A18  2E05               	decfsz	??_mover& (0+255),f,c
   691  000A1A  D7FC               	bra	u647
   692  000A1C  D000               	nop2	
   693                           
   694                           ;intento con servo.c: 33:         _delay((unsigned long)((2)*(48000000UL/4000.0)));
   695  000A1E  0E20               	movlw	32
   696  000A20  6E05               	movwf	??_mover& (0+255),c
   697  000A22  0E2A               	movlw	42
   698  000A24                     u657:
   699  000A24  2EE8               	decfsz	wreg,f,c
   700  000A26  D7FE               	bra	u657
   701  000A28  2E05               	decfsz	??_mover& (0+255),f,c
   702  000A2A  D7FC               	bra	u657
   703                           
   704                           ;intento con servo.c: 34:         LATBbits.LB0 = 0;
   705  000A2C  908A               	bcf	3978,0,c	;volatile
   706                           
   707                           ;intento con servo.c: 35:         _delay((unsigned long)((17)*(48000000UL/4000.0)));
   708  000A2E  0E02               	movlw	2
   709  000A30  6E06               	movwf	(??_mover+1)& (0+255),c
   710  000A32  0E09               	movlw	9
   711  000A34  6E05               	movwf	??_mover& (0+255),c
   712  000A36  0EEC               	movlw	236
   713  000A38                     u667:
   714  000A38  2EE8               	decfsz	wreg,f,c
   715  000A3A  D7FE               	bra	u667
   716  000A3C  2E05               	decfsz	??_mover& (0+255),f,c
   717  000A3E  D7FC               	bra	u667
   718  000A40  2E06               	decfsz	(??_mover+1)& (0+255),f,c
   719  000A42  D7FA               	bra	u667
   720  000A44  D000               	nop2	
   721                           
   722                           ;intento con servo.c: 36:         _delay((unsigned long)((600)*(48000000UL/4000000.0)));
   723  000A46  0E0A               	movlw	10
   724  000A48  6E05               	movwf	??_mover& (0+255),c
   725  000A4A  0E58               	movlw	88
   726  000A4C                     u677:
   727  000A4C  2EE8               	decfsz	wreg,f,c
   728  000A4E  D7FE               	bra	u677
   729  000A50  2E05               	decfsz	??_mover& (0+255),f,c
   730  000A52  D7FC               	bra	u677
   731  000A54  D000               	nop2	
   732                           
   733                           ;intento con servo.c: 37:     }
   734  000A56  4A09               	infsnz	mover@j_600,f,c
   735  000A58  2A0A               	incf	mover@j_600+1,f,c
   736  000A5A  BE0A               	btfsc	mover@j_600+1,7,c
   737  000A5C  D7D7               	goto	l141
   738  000A5E  500A               	movf	mover@j_600+1,w,c
   739  000A60  E105               	bnz	u80
   740  000A62  0E0A               	movlw	10
   741  000A64  5C09               	subwf	mover@j_600,w,c
   742  000A66  B0D8               	btfsc	status,0,c
   743  000A68  0012               	return	
   744  000A6A  D7D0               	goto	l141
   745  000A6C                     u80:
   746  000A6C  0012               	return		;funcret
   747  000A6E                     __end_of_mover:
   748                           	opt callstack 0
   749                           
   750 ;; *************** function ___awmod *****************
   751 ;; Defined at:
   752 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awmod.c"
   753 ;; Parameters:    Size  Location     Type
   754 ;;  dividend        2    4[COMRAM] int 
   755 ;;  divisor         2    6[COMRAM] int 
   756 ;; Auto vars:     Size  Location     Type
   757 ;;  sign            1    9[COMRAM] unsigned char 
   758 ;;  counter         1    8[COMRAM] unsigned char 
   759 ;; Return value:  Size  Location     Type
   760 ;;                  2    4[COMRAM] int 
   761 ;; Registers used:
   762 ;;		wreg, status,2, status,0
   763 ;; Tracked objects:
   764 ;;		On entry : 0/0
   765 ;;		On exit  : 0/0
   766 ;;		Unchanged: 0/0
   767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   768 ;;      Params:         4       0       0       0       0       0       0       0       0
   769 ;;      Locals:         2       0       0       0       0       0       0       0       0
   770 ;;      Temps:          0       0       0       0       0       0       0       0       0
   771 ;;      Totals:         6       0       0       0       0       0       0       0       0
   772 ;;Total ram usage:        6 bytes
   773 ;; Hardware stack levels used:    1
   774 ;; Hardware stack levels required when called:    2
   775 ;; This function calls:
   776 ;;		Nothing
   777 ;; This function is called by:
   778 ;;		_main
   779 ;; This function uses a non-reentrant model
   780 ;;
   781                           
   782                           	psect	text2
   783  000AF2                     __ptext2:
   784                           	opt callstack 0
   785  000AF2                     ___awmod:
   786                           	opt callstack 28
   787                           
   788                           ;incstack = 0
   789  000AF2  0E00               	movlw	0
   790  000AF4  6E0A               	movwf	___awmod@sign,c
   791  000AF6  AE06               	btfss	___awmod@dividend+1,7,c
   792  000AF8  D006               	goto	l1315
   793  000AFA  6C05               	negf	___awmod@dividend,c
   794  000AFC  1E06               	comf	___awmod@dividend+1,f,c
   795  000AFE  B0D8               	btfsc	status,0,c
   796  000B00  2A06               	incf	___awmod@dividend+1,f,c
   797  000B02  0E01               	movlw	1
   798  000B04  6E0A               	movwf	___awmod@sign,c
   799  000B06                     l1315:
   800  000B06  AE08               	btfss	___awmod@divisor+1,7,c
   801  000B08  D004               	goto	l1319
   802  000B0A  6C07               	negf	___awmod@divisor,c
   803  000B0C  1E08               	comf	___awmod@divisor+1,f,c
   804  000B0E  B0D8               	btfsc	status,0,c
   805  000B10  2A08               	incf	___awmod@divisor+1,f,c
   806  000B12                     l1319:
   807  000B12  5007               	movf	___awmod@divisor,w,c
   808  000B14  1008               	iorwf	___awmod@divisor+1,w,c
   809  000B16  B4D8               	btfsc	status,2,c
   810  000B18  D018               	goto	l1335
   811  000B1A  0E01               	movlw	1
   812  000B1C  6E09               	movwf	___awmod@counter,c
   813  000B1E  D004               	goto	l1325
   814  000B20                     l1323:
   815  000B20  90D8               	bcf	status,0,c
   816  000B22  3607               	rlcf	___awmod@divisor,f,c
   817  000B24  3608               	rlcf	___awmod@divisor+1,f,c
   818  000B26  2A09               	incf	___awmod@counter,f,c
   819  000B28                     l1325:
   820  000B28  AE08               	btfss	___awmod@divisor+1,7,c
   821  000B2A  D7FA               	goto	l1323
   822  000B2C                     u500:
   823  000B2C  5007               	movf	___awmod@divisor,w,c
   824  000B2E  5C05               	subwf	___awmod@dividend,w,c
   825  000B30  5008               	movf	___awmod@divisor+1,w,c
   826  000B32  5806               	subwfb	___awmod@dividend+1,w,c
   827  000B34  A0D8               	btfss	status,0,c
   828  000B36  D004               	goto	l1331
   829  000B38  5007               	movf	___awmod@divisor,w,c
   830  000B3A  5E05               	subwf	___awmod@dividend,f,c
   831  000B3C  5008               	movf	___awmod@divisor+1,w,c
   832  000B3E  5A06               	subwfb	___awmod@dividend+1,f,c
   833  000B40                     l1331:
   834  000B40  90D8               	bcf	status,0,c
   835  000B42  3208               	rrcf	___awmod@divisor+1,f,c
   836  000B44  3207               	rrcf	___awmod@divisor,f,c
   837  000B46  2E09               	decfsz	___awmod@counter,f,c
   838  000B48  D7F1               	goto	u500
   839  000B4A                     l1335:
   840  000B4A  500A               	movf	___awmod@sign,w,c
   841  000B4C  B4D8               	btfsc	status,2,c
   842  000B4E  D004               	goto	l1339
   843  000B50  6C05               	negf	___awmod@dividend,c
   844  000B52  1E06               	comf	___awmod@dividend+1,f,c
   845  000B54  B0D8               	btfsc	status,0,c
   846  000B56  2A06               	incf	___awmod@dividend+1,f,c
   847  000B58                     l1339:
   848  000B58  C005  F005         	movff	___awmod@dividend,?___awmod
   849  000B5C  C006  F006         	movff	___awmod@dividend+1,?___awmod+1
   850  000B60  0012               	return		;funcret
   851  000B62                     __end_of___awmod:
   852                           	opt callstack 0
   853                           
   854 ;; *************** function ___awdiv *****************
   855 ;; Defined at:
   856 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
   857 ;; Parameters:    Size  Location     Type
   858 ;;  dividend        2    4[COMRAM] int 
   859 ;;  divisor         2    6[COMRAM] int 
   860 ;; Auto vars:     Size  Location     Type
   861 ;;  quotient        2   10[COMRAM] int 
   862 ;;  sign            1    9[COMRAM] unsigned char 
   863 ;;  counter         1    8[COMRAM] unsigned char 
   864 ;; Return value:  Size  Location     Type
   865 ;;                  2    4[COMRAM] int 
   866 ;; Registers used:
   867 ;;		wreg, status,2, status,0
   868 ;; Tracked objects:
   869 ;;		On entry : 0/0
   870 ;;		On exit  : 0/0
   871 ;;		Unchanged: 0/0
   872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   873 ;;      Params:         4       0       0       0       0       0       0       0       0
   874 ;;      Locals:         4       0       0       0       0       0       0       0       0
   875 ;;      Temps:          0       0       0       0       0       0       0       0       0
   876 ;;      Totals:         8       0       0       0       0       0       0       0       0
   877 ;;Total ram usage:        8 bytes
   878 ;; Hardware stack levels used:    1
   879 ;; Hardware stack levels required when called:    2
   880 ;; This function calls:
   881 ;;		Nothing
   882 ;; This function is called by:
   883 ;;		_main
   884 ;; This function uses a non-reentrant model
   885 ;;
   886                           
   887                           	psect	text3
   888  000A6E                     __ptext3:
   889                           	opt callstack 0
   890  000A6E                     ___awdiv:
   891                           	opt callstack 28
   892                           
   893                           ;incstack = 0
   894  000A6E  0E00               	movlw	0
   895  000A70  6E0A               	movwf	___awdiv@sign,c
   896  000A72  AE08               	btfss	___awdiv@divisor+1,7,c
   897  000A74  D006               	goto	l1271
   898  000A76  6C07               	negf	___awdiv@divisor,c
   899  000A78  1E08               	comf	___awdiv@divisor+1,f,c
   900  000A7A  B0D8               	btfsc	status,0,c
   901  000A7C  2A08               	incf	___awdiv@divisor+1,f,c
   902  000A7E  0E01               	movlw	1
   903  000A80  6E0A               	movwf	___awdiv@sign,c
   904  000A82                     l1271:
   905  000A82  AE06               	btfss	___awdiv@dividend+1,7,c
   906  000A84  D006               	goto	l1277
   907  000A86  6C05               	negf	___awdiv@dividend,c
   908  000A88  1E06               	comf	___awdiv@dividend+1,f,c
   909  000A8A  B0D8               	btfsc	status,0,c
   910  000A8C  2A06               	incf	___awdiv@dividend+1,f,c
   911  000A8E  0E01               	movlw	1
   912  000A90  1A0A               	xorwf	___awdiv@sign,f,c
   913  000A92                     l1277:
   914  000A92  0E00               	movlw	0
   915  000A94  6E0C               	movwf	___awdiv@quotient+1,c
   916  000A96  0E00               	movlw	0
   917  000A98  6E0B               	movwf	___awdiv@quotient,c
   918  000A9A  5007               	movf	___awdiv@divisor,w,c
   919  000A9C  1008               	iorwf	___awdiv@divisor+1,w,c
   920  000A9E  B4D8               	btfsc	status,2,c
   921  000AA0  D01C               	goto	l1299
   922  000AA2  0E01               	movlw	1
   923  000AA4  6E09               	movwf	___awdiv@counter,c
   924  000AA6  D004               	goto	l1285
   925  000AA8                     l1283:
   926  000AA8  90D8               	bcf	status,0,c
   927  000AAA  3607               	rlcf	___awdiv@divisor,f,c
   928  000AAC  3608               	rlcf	___awdiv@divisor+1,f,c
   929  000AAE  2A09               	incf	___awdiv@counter,f,c
   930  000AB0                     l1285:
   931  000AB0  AE08               	btfss	___awdiv@divisor+1,7,c
   932  000AB2  D7FA               	goto	l1283
   933  000AB4                     u440:
   934  000AB4  90D8               	bcf	status,0,c
   935  000AB6  360B               	rlcf	___awdiv@quotient,f,c
   936  000AB8  360C               	rlcf	___awdiv@quotient+1,f,c
   937  000ABA  5007               	movf	___awdiv@divisor,w,c
   938  000ABC  5C05               	subwf	___awdiv@dividend,w,c
   939  000ABE  5008               	movf	___awdiv@divisor+1,w,c
   940  000AC0  5806               	subwfb	___awdiv@dividend+1,w,c
   941  000AC2  A0D8               	btfss	status,0,c
   942  000AC4  D005               	goto	l1295
   943  000AC6  5007               	movf	___awdiv@divisor,w,c
   944  000AC8  5E05               	subwf	___awdiv@dividend,f,c
   945  000ACA  5008               	movf	___awdiv@divisor+1,w,c
   946  000ACC  5A06               	subwfb	___awdiv@dividend+1,f,c
   947  000ACE  800B               	bsf	___awdiv@quotient,0,c
   948  000AD0                     l1295:
   949  000AD0  90D8               	bcf	status,0,c
   950  000AD2  3208               	rrcf	___awdiv@divisor+1,f,c
   951  000AD4  3207               	rrcf	___awdiv@divisor,f,c
   952  000AD6  2E09               	decfsz	___awdiv@counter,f,c
   953  000AD8  D7ED               	goto	u440
   954  000ADA                     l1299:
   955  000ADA  500A               	movf	___awdiv@sign,w,c
   956  000ADC  B4D8               	btfsc	status,2,c
   957  000ADE  D004               	goto	l1303
   958  000AE0  6C0B               	negf	___awdiv@quotient,c
   959  000AE2  1E0C               	comf	___awdiv@quotient+1,f,c
   960  000AE4  B0D8               	btfsc	status,0,c
   961  000AE6  2A0C               	incf	___awdiv@quotient+1,f,c
   962  000AE8                     l1303:
   963  000AE8  C00B  F005         	movff	___awdiv@quotient,?___awdiv
   964  000AEC  C00C  F006         	movff	___awdiv@quotient+1,?___awdiv+1
   965  000AF0  0012               	return		;funcret
   966  000AF2                     __end_of___awdiv:
   967                           	opt callstack 0
   968                           
   969 ;; *************** function _POS_CURSOR *****************
   970 ;; Defined at:
   971 ;;		line 6 in file "LCD.c"
   972 ;; Parameters:    Size  Location     Type
   973 ;;  fila            1    wreg     unsigned char 
   974 ;;  columna         1    7[COMRAM] unsigned char 
   975 ;; Auto vars:     Size  Location     Type
   976 ;;  fila            1    8[COMRAM] unsigned char 
   977 ;; Return value:  Size  Location     Type
   978 ;;                  1    wreg      void 
   979 ;; Registers used:
   980 ;;		wreg, status,2, status,0, cstack
   981 ;; Tracked objects:
   982 ;;		On entry : 0/0
   983 ;;		On exit  : 0/0
   984 ;;		Unchanged: 0/0
   985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   986 ;;      Params:         1       0       0       0       0       0       0       0       0
   987 ;;      Locals:         1       0       0       0       0       0       0       0       0
   988 ;;      Temps:          0       0       0       0       0       0       0       0       0
   989 ;;      Totals:         2       0       0       0       0       0       0       0       0
   990 ;;Total ram usage:        2 bytes
   991 ;; Hardware stack levels used:    1
   992 ;; Hardware stack levels required when called:    4
   993 ;; This function calls:
   994 ;;		_ENVIA_LCD_CMD
   995 ;; This function is called by:
   996 ;;		_main
   997 ;; This function uses a non-reentrant model
   998 ;;
   999                           
  1000                           	psect	text4
  1001  000D00                     __ptext4:
  1002                           	opt callstack 0
  1003  000D00                     _POS_CURSOR:
  1004                           	opt callstack 26
  1005                           
  1006                           ;incstack = 0
  1007                           ;POS_CURSOR@fila stored from wreg
  1008  000D00  6E09               	movwf	POS_CURSOR@fila,c
  1009                           
  1010                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
  1011  000D02  0409               	decf	POS_CURSOR@fila,w,c
  1012  000D04  A4D8               	btfss	status,2,c
  1013  000D06  D005               	goto	l1251
  1014                           
  1015                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
  1016  000D08  5008               	movf	POS_CURSOR@columna,w,c
  1017  000D0A  0F80               	addlw	128
  1018  000D0C  EC4D  F006         	call	_ENVIA_LCD_CMD
  1019                           
  1020                           ;LCD.c: 11:  }
  1021  000D10  0012               	return	
  1022  000D12                     l1251:
  1023  000D12  0E02               	movlw	2
  1024  000D14  1809               	xorwf	POS_CURSOR@fila,w,c
  1025  000D16  A4D8               	btfss	status,2,c
  1026  000D18  0012               	return	
  1027                           
  1028                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
  1029  000D1A  5008               	movf	POS_CURSOR@columna,w,c
  1030  000D1C  0FC0               	addlw	192
  1031  000D1E  EC4D  F006         	call	_ENVIA_LCD_CMD
  1032  000D22  0012               	return		;funcret
  1033  000D24                     __end_of_POS_CURSOR:
  1034                           	opt callstack 0
  1035                           
  1036 ;; *************** function _LCD_CONFIG *****************
  1037 ;; Defined at:
  1038 ;;		line 72 in file "LCD.c"
  1039 ;; Parameters:    Size  Location     Type
  1040 ;;		None
  1041 ;; Auto vars:     Size  Location     Type
  1042 ;;		None
  1043 ;; Return value:  Size  Location     Type
  1044 ;;                  1    wreg      void 
  1045 ;; Registers used:
  1046 ;;		wreg, status,2, status,0, cstack
  1047 ;; Tracked objects:
  1048 ;;		On entry : 0/0
  1049 ;;		On exit  : 0/0
  1050 ;;		Unchanged: 0/0
  1051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1052 ;;      Params:         0       0       0       0       0       0       0       0       0
  1053 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1054 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1055 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1056 ;;Total ram usage:        1 bytes
  1057 ;; Hardware stack levels used:    1
  1058 ;; Hardware stack levels required when called:    4
  1059 ;; This function calls:
  1060 ;;		_ENVIA_LCD_CMD
  1061 ;;		_ENVIA_NIBBLE
  1062 ;; This function is called by:
  1063 ;;		_main
  1064 ;; This function uses a non-reentrant model
  1065 ;;
  1066                           
  1067                           	psect	text5
  1068  000BC4                     __ptext5:
  1069                           	opt callstack 0
  1070  000BC4                     _LCD_CONFIG:
  1071                           	opt callstack 26
  1072                           
  1073                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
  1074                           
  1075                           ;incstack = 0
  1076  000BC4  908C               	bcf	3980,0,c	;volatile
  1077                           
  1078                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
  1079  000BC6  928C               	bcf	3980,1,c	;volatile
  1080                           
  1081                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
  1082  000BC8  0E30               	movlw	48
  1083  000BCA  ECAF  F006         	call	_ENVIA_NIBBLE
  1084                           
  1085                           ;LCD.c: 77:         _delay(24000);
  1086  000BCE  0E20               	movlw	32
  1087  000BD0  6E08               	movwf	??_LCD_CONFIG& (0+255),c
  1088  000BD2  0E2A               	movlw	42
  1089  000BD4                     u687:
  1090  000BD4  2EE8               	decfsz	wreg,f,c
  1091  000BD6  D7FE               	bra	u687
  1092  000BD8  2E08               	decfsz	??_LCD_CONFIG& (0+255),f,c
  1093  000BDA  D7FC               	bra	u687
  1094                           
  1095                           ;LCD.c: 78:         _delay(24000);
  1096  000BDC  0E20               	movlw	32
  1097  000BDE  6E08               	movwf	??_LCD_CONFIG& (0+255),c
  1098  000BE0  0E2A               	movlw	42
  1099  000BE2                     u697:
  1100  000BE2  2EE8               	decfsz	wreg,f,c
  1101  000BE4  D7FE               	bra	u697
  1102  000BE6  2E08               	decfsz	??_LCD_CONFIG& (0+255),f,c
  1103  000BE8  D7FC               	bra	u697
  1104                           
  1105                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
  1106  000BEA  0E30               	movlw	48
  1107  000BEC  ECAF  F006         	call	_ENVIA_NIBBLE
  1108                           
  1109                           ;LCD.c: 83:  _delay(1200);
  1110  000BF0  0EF0               	movlw	240
  1111  000BF2                     u707:
  1112  000BF2  D000               	nop2	
  1113  000BF4  2EE8               	decfsz	wreg,f,c
  1114  000BF6  D7FD               	bra	u707
  1115                           
  1116                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
  1117  000BF8  0E30               	movlw	48
  1118  000BFA  ECAF  F006         	call	_ENVIA_NIBBLE
  1119                           
  1120                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
  1121  000BFE  0E20               	movlw	32
  1122  000C00  ECAF  F006         	call	_ENVIA_NIBBLE
  1123                           
  1124                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
  1125  000C04  0E01               	movlw	1
  1126  000C06  EC4D  F006         	call	_ENVIA_LCD_CMD
  1127                           
  1128                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
  1129  000C0A  0E28               	movlw	40
  1130  000C0C  EC4D  F006         	call	_ENVIA_LCD_CMD
  1131                           
  1132                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
  1133  000C10  0E0F               	movlw	15
  1134  000C12  EC4D  F006         	call	_ENVIA_LCD_CMD
  1135                           
  1136                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
  1137  000C16  0E06               	movlw	6
  1138  000C18  EC4D  F006         	call	_ENVIA_LCD_CMD
  1139                           
  1140                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
  1141  000C1C  0E01               	movlw	1
  1142  000C1E  EC4D  F006         	call	_ENVIA_LCD_CMD
  1143  000C22  0012               	return		;funcret
  1144  000C24                     __end_of_LCD_CONFIG:
  1145                           	opt callstack 0
  1146                           
  1147 ;; *************** function _ESCRIBE_MENSAJE *****************
  1148 ;; Defined at:
  1149 ;;		line 41 in file "LCD.c"
  1150 ;; Parameters:    Size  Location     Type
  1151 ;;  cadena          2    7[COMRAM] PTR const unsigned char 
  1152 ;;		 -> STR_2(9), STR_1(12), 
  1153 ;;  tam             1    9[COMRAM] unsigned char 
  1154 ;; Auto vars:     Size  Location     Type
  1155 ;;  i               1   12[COMRAM] unsigned char 
  1156 ;; Return value:  Size  Location     Type
  1157 ;;                  1    wreg      void 
  1158 ;; Registers used:
  1159 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1160 ;; Tracked objects:
  1161 ;;		On entry : 0/0
  1162 ;;		On exit  : 0/0
  1163 ;;		Unchanged: 0/0
  1164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1165 ;;      Params:         3       0       0       0       0       0       0       0       0
  1166 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1167 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1168 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1169 ;;Total ram usage:        6 bytes
  1170 ;; Hardware stack levels used:    1
  1171 ;; Hardware stack levels required when called:    4
  1172 ;; This function calls:
  1173 ;;		_ENVIA_CHAR
  1174 ;; This function is called by:
  1175 ;;		_main
  1176 ;; This function uses a non-reentrant model
  1177 ;;
  1178                           
  1179                           	psect	text6
  1180  000CCE                     __ptext6:
  1181                           	opt callstack 0
  1182  000CCE                     _ESCRIBE_MENSAJE:
  1183                           	opt callstack 26
  1184                           
  1185                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
  1186                           
  1187                           ;incstack = 0
  1188  000CCE  0E00               	movlw	0
  1189  000CD0  6E0D               	movwf	ESCRIBE_MENSAJE@i,c
  1190                           
  1191                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
  1192  000CD2  0E00               	movlw	0
  1193  000CD4  6E0D               	movwf	ESCRIBE_MENSAJE@i,c
  1194  000CD6  D00F               	goto	l1261
  1195  000CD8                     l1257:
  1196                           
  1197                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
  1198  000CD8  500D               	movf	ESCRIBE_MENSAJE@i,w,c
  1199  000CDA  2408               	addwf	ESCRIBE_MENSAJE@cadena,w,c
  1200  000CDC  6E0B               	movwf	??_ESCRIBE_MENSAJE& (0+255),c
  1201  000CDE  0E00               	movlw	0
  1202  000CE0  2009               	addwfc	ESCRIBE_MENSAJE@cadena+1,w,c
  1203  000CE2  6E0C               	movwf	(??_ESCRIBE_MENSAJE+1)& (0+255),c
  1204  000CE4  C00B  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
  1205  000CE8  C00C  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
  1206  000CEC                     	if	0	;tblptru may be non-zero
  1207  000CEC                     	endif
  1208  000CEC                     	if	0	;tblptru may be non-zero
  1209  000CEC                     	endif
  1210  000CEC  0008               	tblrd		*
  1211  000CEE  50F5               	movf	tablat,w,c
  1212  000CF0  EC33  F006         	call	_ENVIA_CHAR
  1213                           
  1214                           ;LCD.c: 47:  }
  1215  000CF4  2A0D               	incf	ESCRIBE_MENSAJE@i,f,c
  1216  000CF6                     l1261:
  1217  000CF6  500A               	movf	ESCRIBE_MENSAJE@tam,w,c
  1218  000CF8  5C0D               	subwf	ESCRIBE_MENSAJE@i,w,c
  1219  000CFA  B0D8               	btfsc	status,0,c
  1220  000CFC  0012               	return	
  1221  000CFE  D7EC               	goto	l1257
  1222  000D00                     __end_of_ESCRIBE_MENSAJE:
  1223                           	opt callstack 0
  1224                           
  1225 ;; *************** function _ENVIA_CHAR *****************
  1226 ;; Defined at:
  1227 ;;		line 50 in file "LCD.c"
  1228 ;; Parameters:    Size  Location     Type
  1229 ;;  dato            1    wreg     unsigned char 
  1230 ;; Auto vars:     Size  Location     Type
  1231 ;;  dato            1    5[COMRAM] unsigned char 
  1232 ;;  aux             1    6[COMRAM] unsigned char 
  1233 ;; Return value:  Size  Location     Type
  1234 ;;                  1    wreg      void 
  1235 ;; Registers used:
  1236 ;;		wreg, status,2, status,0, cstack
  1237 ;; Tracked objects:
  1238 ;;		On entry : 0/0
  1239 ;;		On exit  : 0/0
  1240 ;;		Unchanged: 0/0
  1241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1242 ;;      Params:         0       0       0       0       0       0       0       0       0
  1243 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1244 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1245 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1246 ;;Total ram usage:        2 bytes
  1247 ;; Hardware stack levels used:    1
  1248 ;; Hardware stack levels required when called:    3
  1249 ;; This function calls:
  1250 ;;		_ENVIA_NIBBLE
  1251 ;;		_LEER_LCD
  1252 ;; This function is called by:
  1253 ;;		_ESCRIBE_MENSAJE
  1254 ;;		_main
  1255 ;;		_GENERACARACTER
  1256 ;; This function uses a non-reentrant model
  1257 ;;
  1258                           
  1259                           	psect	text7
  1260  000C66                     __ptext7:
  1261                           	opt callstack 0
  1262  000C66                     _ENVIA_CHAR:
  1263                           	opt callstack 26
  1264                           
  1265                           ;incstack = 0
  1266                           ;ENVIA_CHAR@dato stored from wreg
  1267  000C66  6E06               	movwf	ENVIA_CHAR@dato,c
  1268                           
  1269                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
  1270  000C68  808C               	bsf	3980,0,c	;volatile
  1271                           
  1272                           ;LCD.c: 54:  LEER_LCD();
  1273  000C6A  ECB1  F005         	call	_LEER_LCD	;wreg free
  1274                           
  1275                           ;LCD.c: 55:  TRISD = 0x00;
  1276  000C6E  0E00               	movlw	0
  1277  000C70  6E95               	movwf	3989,c	;volatile
  1278                           
  1279                           ;LCD.c: 56:         _delay(1200);
  1280  000C72  0EF0               	movlw	240
  1281  000C74                     u717:
  1282  000C74  D000               	nop2	
  1283  000C76  2EE8               	decfsz	wreg,f,c
  1284  000C78  D7FD               	bra	u717
  1285                           
  1286                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
  1287  000C7A  928C               	bcf	3980,1,c	;volatile
  1288                           
  1289                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
  1290  000C7C  948C               	bcf	3980,2,c	;volatile
  1291                           
  1292                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
  1293  000C7E  808C               	bsf	3980,0,c	;volatile
  1294                           
  1295                           ;LCD.c: 61:  aux = dato & 0xF0;
  1296  000C80  5006               	movf	ENVIA_CHAR@dato,w,c
  1297  000C82  0BF0               	andlw	240
  1298  000C84  6E07               	movwf	ENVIA_CHAR@aux,c
  1299                           
  1300                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
  1301  000C86  5007               	movf	ENVIA_CHAR@aux,w,c
  1302  000C88  ECAF  F006         	call	_ENVIA_NIBBLE
  1303                           
  1304                           ;LCD.c: 63:  aux = dato << 4;
  1305  000C8C  3806               	swapf	ENVIA_CHAR@dato,w,c
  1306  000C8E  0BF0               	andlw	240
  1307  000C90  6E07               	movwf	ENVIA_CHAR@aux,c
  1308                           
  1309                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
  1310  000C92  5007               	movf	ENVIA_CHAR@aux,w,c
  1311  000C94  ECAF  F006         	call	_ENVIA_NIBBLE
  1312  000C98  0012               	return		;funcret
  1313  000C9A                     __end_of_ENVIA_CHAR:
  1314                           	opt callstack 0
  1315                           
  1316 ;; *************** function _CURSOR_ONOFF *****************
  1317 ;; Defined at:
  1318 ;;		line 35 in file "LCD.c"
  1319 ;; Parameters:    Size  Location     Type
  1320 ;;  estado          1    wreg     unsigned char 
  1321 ;; Auto vars:     Size  Location     Type
  1322 ;;  estado          1    7[COMRAM] unsigned char 
  1323 ;; Return value:  Size  Location     Type
  1324 ;;                  1    wreg      void 
  1325 ;; Registers used:
  1326 ;;		wreg, status,2, status,0, cstack
  1327 ;; Tracked objects:
  1328 ;;		On entry : 0/0
  1329 ;;		On exit  : 0/0
  1330 ;;		Unchanged: 0/0
  1331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1332 ;;      Params:         0       0       0       0       0       0       0       0       0
  1333 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1334 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1335 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1336 ;;Total ram usage:        1 bytes
  1337 ;; Hardware stack levels used:    1
  1338 ;; Hardware stack levels required when called:    4
  1339 ;; This function calls:
  1340 ;;		_ENVIA_LCD_CMD
  1341 ;; This function is called by:
  1342 ;;		_main
  1343 ;; This function uses a non-reentrant model
  1344 ;;
  1345                           
  1346                           	psect	text8
  1347  000D42                     __ptext8:
  1348                           	opt callstack 0
  1349  000D42                     _CURSOR_ONOFF:
  1350                           	opt callstack 26
  1351                           
  1352                           ;incstack = 0
  1353                           ;CURSOR_ONOFF@estado stored from wreg
  1354  000D42  6E08               	movwf	CURSOR_ONOFF@estado,c
  1355                           
  1356                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
  1357  000D44  5008               	movf	CURSOR_ONOFF@estado,w,c
  1358  000D46  A4D8               	btfss	status,2,c
  1359  000D48  D003               	goto	l947
  1360  000D4A  0E0E               	movlw	14
  1361  000D4C  EC4D  F006         	call	_ENVIA_LCD_CMD
  1362  000D50                     l947:
  1363                           
  1364                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
  1365  000D50  0408               	decf	CURSOR_ONOFF@estado,w,c
  1366  000D52  A4D8               	btfss	status,2,c
  1367  000D54  0012               	return	
  1368  000D56  0E0C               	movlw	12
  1369  000D58  EC4D  F006         	call	_ENVIA_LCD_CMD
  1370  000D5C  0012               	return		;funcret
  1371  000D5E                     __end_of_CURSOR_ONOFF:
  1372                           	opt callstack 0
  1373                           
  1374 ;; *************** function _CURSOR_HOME *****************
  1375 ;; Defined at:
  1376 ;;		line 30 in file "LCD.c"
  1377 ;; Parameters:    Size  Location     Type
  1378 ;;		None
  1379 ;; Auto vars:     Size  Location     Type
  1380 ;;		None
  1381 ;; Return value:  Size  Location     Type
  1382 ;;                  1    wreg      void 
  1383 ;; Registers used:
  1384 ;;		wreg, status,2, status,0, cstack
  1385 ;; Tracked objects:
  1386 ;;		On entry : 0/0
  1387 ;;		On exit  : 0/0
  1388 ;;		Unchanged: 0/0
  1389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1390 ;;      Params:         0       0       0       0       0       0       0       0       0
  1391 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1392 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1393 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1394 ;;Total ram usage:        0 bytes
  1395 ;; Hardware stack levels used:    1
  1396 ;; Hardware stack levels required when called:    4
  1397 ;; This function calls:
  1398 ;;		_ENVIA_LCD_CMD
  1399 ;; This function is called by:
  1400 ;;		_main
  1401 ;; This function uses a non-reentrant model
  1402 ;;
  1403                           
  1404                           	psect	text9
  1405  000D7A                     __ptext9:
  1406                           	opt callstack 0
  1407  000D7A                     _CURSOR_HOME:
  1408                           	opt callstack 26
  1409                           
  1410                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
  1411                           
  1412                           ;incstack = 0
  1413  000D7A  0E02               	movlw	2
  1414  000D7C  EC4D  F006         	call	_ENVIA_LCD_CMD
  1415  000D80  0012               	return		;funcret
  1416  000D82                     __end_of_CURSOR_HOME:
  1417                           	opt callstack 0
  1418                           
  1419 ;; *************** function _BORRAR_LCD *****************
  1420 ;; Defined at:
  1421 ;;		line 67 in file "LCD.c"
  1422 ;; Parameters:    Size  Location     Type
  1423 ;;		None
  1424 ;; Auto vars:     Size  Location     Type
  1425 ;;		None
  1426 ;; Return value:  Size  Location     Type
  1427 ;;                  1    wreg      void 
  1428 ;; Registers used:
  1429 ;;		wreg, status,2, status,0, cstack
  1430 ;; Tracked objects:
  1431 ;;		On entry : 0/0
  1432 ;;		On exit  : 0/0
  1433 ;;		Unchanged: 0/0
  1434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1435 ;;      Params:         0       0       0       0       0       0       0       0       0
  1436 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1437 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1438 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1439 ;;Total ram usage:        0 bytes
  1440 ;; Hardware stack levels used:    1
  1441 ;; Hardware stack levels required when called:    4
  1442 ;; This function calls:
  1443 ;;		_ENVIA_LCD_CMD
  1444 ;; This function is called by:
  1445 ;;		_main
  1446 ;; This function uses a non-reentrant model
  1447 ;;
  1448                           
  1449                           	psect	text10
  1450  000D82                     __ptext10:
  1451                           	opt callstack 0
  1452  000D82                     _BORRAR_LCD:
  1453                           	opt callstack 26
  1454                           
  1455                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
  1456                           
  1457                           ;incstack = 0
  1458  000D82  0E01               	movlw	1
  1459  000D84  EC4D  F006         	call	_ENVIA_LCD_CMD
  1460  000D88  0012               	return		;funcret
  1461  000D8A                     __end_of_BORRAR_LCD:
  1462                           	opt callstack 0
  1463                           
  1464 ;; *************** function _ENVIA_LCD_CMD *****************
  1465 ;; Defined at:
  1466 ;;		line 104 in file "LCD.c"
  1467 ;; Parameters:    Size  Location     Type
  1468 ;;  dato            1    wreg     unsigned char 
  1469 ;; Auto vars:     Size  Location     Type
  1470 ;;  dato            1    5[COMRAM] unsigned char 
  1471 ;;  aux             1    6[COMRAM] unsigned char 
  1472 ;; Return value:  Size  Location     Type
  1473 ;;                  1    wreg      void 
  1474 ;; Registers used:
  1475 ;;		wreg, status,2, status,0, cstack
  1476 ;; Tracked objects:
  1477 ;;		On entry : 0/0
  1478 ;;		On exit  : 0/0
  1479 ;;		Unchanged: 0/0
  1480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1481 ;;      Params:         0       0       0       0       0       0       0       0       0
  1482 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1483 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1484 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1485 ;;Total ram usage:        2 bytes
  1486 ;; Hardware stack levels used:    1
  1487 ;; Hardware stack levels required when called:    3
  1488 ;; This function calls:
  1489 ;;		_ENVIA_NIBBLE
  1490 ;;		_LEER_LCD
  1491 ;; This function is called by:
  1492 ;;		_POS_CURSOR
  1493 ;;		_CURSOR_HOME
  1494 ;;		_CURSOR_ONOFF
  1495 ;;		_BORRAR_LCD
  1496 ;;		_LCD_CONFIG
  1497 ;;		_BLINK_CURSOR
  1498 ;;		_DISPLAY_ONOFF
  1499 ;;		_GENERACARACTER
  1500 ;; This function uses a non-reentrant model
  1501 ;;
  1502                           
  1503                           	psect	text11
  1504  000C9A                     __ptext11:
  1505                           	opt callstack 0
  1506  000C9A                     _ENVIA_LCD_CMD:
  1507                           	opt callstack 26
  1508                           
  1509                           ;incstack = 0
  1510                           ;ENVIA_LCD_CMD@dato stored from wreg
  1511  000C9A  6E06               	movwf	ENVIA_LCD_CMD@dato,c
  1512                           
  1513                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1514  000C9C  908C               	bcf	3980,0,c	;volatile
  1515                           
  1516                           ;LCD.c: 108:  LEER_LCD();
  1517  000C9E  ECB1  F005         	call	_LEER_LCD	;wreg free
  1518                           
  1519                           ;LCD.c: 109:  TRISD = 0b00000000;
  1520  000CA2  0E00               	movlw	0
  1521  000CA4  6E95               	movwf	3989,c	;volatile
  1522                           
  1523                           ;LCD.c: 111:         _delay(1200);
  1524  000CA6  0EF0               	movlw	240
  1525  000CA8                     u727:
  1526  000CA8  D000               	nop2	
  1527  000CAA  2EE8               	decfsz	wreg,f,c
  1528  000CAC  D7FD               	bra	u727
  1529                           
  1530                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1531  000CAE  928C               	bcf	3980,1,c	;volatile
  1532                           
  1533                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1534  000CB0  948C               	bcf	3980,2,c	;volatile
  1535                           
  1536                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1537  000CB2  908C               	bcf	3980,0,c	;volatile
  1538                           
  1539                           ;LCD.c: 115:  aux = dato & 0xF0;
  1540  000CB4  5006               	movf	ENVIA_LCD_CMD@dato,w,c
  1541  000CB6  0BF0               	andlw	240
  1542  000CB8  6E07               	movwf	ENVIA_LCD_CMD@aux,c
  1543                           
  1544                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1545  000CBA  5007               	movf	ENVIA_LCD_CMD@aux,w,c
  1546  000CBC  ECAF  F006         	call	_ENVIA_NIBBLE
  1547                           
  1548                           ;LCD.c: 117:  aux = dato<<4;
  1549  000CC0  3806               	swapf	ENVIA_LCD_CMD@dato,w,c
  1550  000CC2  0BF0               	andlw	240
  1551  000CC4  6E07               	movwf	ENVIA_LCD_CMD@aux,c
  1552                           
  1553                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1554  000CC6  5007               	movf	ENVIA_LCD_CMD@aux,w,c
  1555  000CC8  ECAF  F006         	call	_ENVIA_NIBBLE
  1556  000CCC  0012               	return		;funcret
  1557  000CCE                     __end_of_ENVIA_LCD_CMD:
  1558                           	opt callstack 0
  1559                           
  1560 ;; *************** function _LEER_LCD *****************
  1561 ;; Defined at:
  1562 ;;		line 121 in file "LCD.c"
  1563 ;; Parameters:    Size  Location     Type
  1564 ;;		None
  1565 ;; Auto vars:     Size  Location     Type
  1566 ;;  aux             1    4[COMRAM] unsigned char 
  1567 ;; Return value:  Size  Location     Type
  1568 ;;                  1    wreg      void 
  1569 ;; Registers used:
  1570 ;;		wreg, status,2, status,0
  1571 ;; Tracked objects:
  1572 ;;		On entry : 0/0
  1573 ;;		On exit  : 0/0
  1574 ;;		Unchanged: 0/0
  1575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1576 ;;      Params:         0       0       0       0       0       0       0       0       0
  1577 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1578 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1579 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1580 ;;Total ram usage:        1 bytes
  1581 ;; Hardware stack levels used:    1
  1582 ;; Hardware stack levels required when called:    2
  1583 ;; This function calls:
  1584 ;;		Nothing
  1585 ;; This function is called by:
  1586 ;;		_ENVIA_CHAR
  1587 ;;		_ENVIA_LCD_CMD
  1588 ;; This function uses a non-reentrant model
  1589 ;;
  1590                           
  1591                           	psect	text12
  1592  000B62                     __ptext12:
  1593                           	opt callstack 0
  1594  000B62                     _LEER_LCD:
  1595                           	opt callstack 26
  1596                           
  1597                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1598                           
  1599                           ;incstack = 0
  1600  000B62  0EF8               	movlw	248
  1601  000B64  6E95               	movwf	3989,c	;volatile
  1602                           
  1603                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1604  000B66  908C               	bcf	3980,0,c	;volatile
  1605                           
  1606                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1607  000B68  828C               	bsf	3980,1,c	;volatile
  1608                           
  1609                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1610  000B6A  848C               	bsf	3980,2,c	;volatile
  1611                           
  1612                           ;LCD.c: 128:         _delay(1200);
  1613  000B6C  0EF0               	movlw	240
  1614  000B6E                     u737:
  1615  000B6E  D000               	nop2	
  1616  000B70  2EE8               	decfsz	wreg,f,c
  1617  000B72  D7FD               	bra	u737
  1618                           
  1619                           ;LCD.c: 130:  aux = PORTD;
  1620  000B74  CF83 F005          	movff	3971,LEER_LCD@aux	;volatile
  1621                           
  1622                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1623  000B78  948C               	bcf	3980,2,c	;volatile
  1624                           
  1625                           ;LCD.c: 132:         _delay(1200);
  1626  000B7A  0EF0               	movlw	240
  1627  000B7C                     u747:
  1628  000B7C  D000               	nop2	
  1629  000B7E  2EE8               	decfsz	wreg,f,c
  1630  000B80  D7FD               	bra	u747
  1631                           
  1632                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1633  000B82  848C               	bsf	3980,2,c	;volatile
  1634                           
  1635                           ;LCD.c: 135:         _delay(1200);
  1636  000B84  0EF0               	movlw	240
  1637  000B86                     u757:
  1638  000B86  D000               	nop2	
  1639  000B88  2EE8               	decfsz	wreg,f,c
  1640  000B8A  D7FD               	bra	u757
  1641  000B8C                     l863:
  1642                           
  1643                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1644  000B8C  948C               	bcf	3980,2,c	;volatile
  1645                           
  1646                           ;LCD.c: 138:  aux = aux & 0x80;
  1647  000B8E  5005               	movf	LEER_LCD@aux,w,c
  1648  000B90  0B80               	andlw	128
  1649  000B92  6E05               	movwf	LEER_LCD@aux,c
  1650                           
  1651                           ;LCD.c: 139:  while(aux == 0x80)
  1652  000B94  D012               	goto	l879
  1653  000B96                     l67:
  1654                           
  1655                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1656  000B96  848C               	bsf	3980,2,c	;volatile
  1657                           
  1658                           ;LCD.c: 142:             _delay(1200);
  1659  000B98  0EF0               	movlw	240
  1660  000B9A                     u767:
  1661  000B9A  D000               	nop2	
  1662  000B9C  2EE8               	decfsz	wreg,f,c
  1663  000B9E  D7FD               	bra	u767
  1664                           
  1665                           ;LCD.c: 143:             aux = PORTD;
  1666  000BA0  CF83 F005          	movff	3971,LEER_LCD@aux	;volatile
  1667                           
  1668                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1669  000BA4  948C               	bcf	3980,2,c	;volatile
  1670                           
  1671                           ;LCD.c: 145:             _delay(1200);
  1672  000BA6  0EF0               	movlw	240
  1673  000BA8                     u777:
  1674  000BA8  D000               	nop2	
  1675  000BAA  2EE8               	decfsz	wreg,f,c
  1676  000BAC  D7FD               	bra	u777
  1677                           
  1678                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1679  000BAE  848C               	bsf	3980,2,c	;volatile
  1680                           
  1681                           ;LCD.c: 147:             _delay(1200);
  1682  000BB0  0EF0               	movlw	240
  1683  000BB2                     u787:
  1684  000BB2  D000               	nop2	
  1685  000BB4  2EE8               	decfsz	wreg,f,c
  1686  000BB6  D7FD               	bra	u787
  1687  000BB8  D7E9               	goto	l863
  1688  000BBA                     l879:
  1689                           
  1690                           ;LCD.c: 139:  while(aux == 0x80)
  1691  000BBA  0E80               	movlw	128
  1692  000BBC  1805               	xorwf	LEER_LCD@aux,w,c
  1693  000BBE  A4D8               	btfss	status,2,c
  1694  000BC0  0012               	return	
  1695  000BC2  D7E9               	goto	l67
  1696  000BC4                     __end_of_LEER_LCD:
  1697                           	opt callstack 0
  1698                           
  1699 ;; *************** function _ENVIA_NIBBLE *****************
  1700 ;; Defined at:
  1701 ;;		line 93 in file "LCD.c"
  1702 ;; Parameters:    Size  Location     Type
  1703 ;;  dato            1    wreg     unsigned char 
  1704 ;; Auto vars:     Size  Location     Type
  1705 ;;  dato            1    4[COMRAM] unsigned char 
  1706 ;; Return value:  Size  Location     Type
  1707 ;;                  1    wreg      void 
  1708 ;; Registers used:
  1709 ;;		wreg, status,2, status,0
  1710 ;; Tracked objects:
  1711 ;;		On entry : 0/0
  1712 ;;		On exit  : 0/0
  1713 ;;		Unchanged: 0/0
  1714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1715 ;;      Params:         0       0       0       0       0       0       0       0       0
  1716 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1717 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1718 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1719 ;;Total ram usage:        1 bytes
  1720 ;; Hardware stack levels used:    1
  1721 ;; Hardware stack levels required when called:    2
  1722 ;; This function calls:
  1723 ;;		Nothing
  1724 ;; This function is called by:
  1725 ;;		_ENVIA_CHAR
  1726 ;;		_LCD_CONFIG
  1727 ;;		_ENVIA_LCD_CMD
  1728 ;; This function uses a non-reentrant model
  1729 ;;
  1730                           
  1731                           	psect	text13
  1732  000D5E                     __ptext13:
  1733                           	opt callstack 0
  1734  000D5E                     _ENVIA_NIBBLE:
  1735                           	opt callstack 26
  1736                           
  1737                           ;incstack = 0
  1738                           ;ENVIA_NIBBLE@dato stored from wreg
  1739  000D5E  6E05               	movwf	ENVIA_NIBBLE@dato,c
  1740                           
  1741                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1742  000D60  0E0F               	movlw	15
  1743  000D62  168C               	andwf	3980,f,c	;volatile
  1744                           
  1745                           ;LCD.c: 96:  dato &= 0xF0;
  1746  000D64  0EF0               	movlw	240
  1747  000D66  1605               	andwf	ENVIA_NIBBLE@dato,f,c
  1748                           
  1749                           ;LCD.c: 97:  LATD|= dato;
  1750  000D68  5005               	movf	ENVIA_NIBBLE@dato,w,c	;volatile
  1751  000D6A  128C               	iorwf	3980,f,c	;volatile
  1752                           
  1753                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1754  000D6C  848C               	bsf	3980,2,c	;volatile
  1755                           
  1756                           ;LCD.c: 100:         _delay(1200);
  1757  000D6E  0EF0               	movlw	240
  1758  000D70                     u797:
  1759  000D70  D000               	nop2	
  1760  000D72  2EE8               	decfsz	wreg,f,c
  1761  000D74  D7FD               	bra	u797
  1762                           
  1763                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1764  000D76  948C               	bcf	3980,2,c	;volatile
  1765  000D78  0012               	return		;funcret
  1766  000D7A                     __end_of_ENVIA_NIBBLE:
  1767                           	opt callstack 0
  1768                           
  1769 ;; *************** function _elboton *****************
  1770 ;; Defined at:
  1771 ;;		line 118 in file "intento con servo.c"
  1772 ;; Parameters:    Size  Location     Type
  1773 ;;		None
  1774 ;; Auto vars:     Size  Location     Type
  1775 ;;		None
  1776 ;; Return value:  Size  Location     Type
  1777 ;;                  1    wreg      void 
  1778 ;; Registers used:
  1779 ;;		wreg, status,2, status,0
  1780 ;; Tracked objects:
  1781 ;;		On entry : 0/0
  1782 ;;		On exit  : 0/0
  1783 ;;		Unchanged: 0/0
  1784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1785 ;;      Params:         0       0       0       0       0       0       0       0       0
  1786 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1787 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1788 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1789 ;;Total ram usage:        4 bytes
  1790 ;; Hardware stack levels used:    1
  1791 ;; Hardware stack levels required when called:    1
  1792 ;; This function calls:
  1793 ;;		Nothing
  1794 ;; This function is called by:
  1795 ;;		Interrupt level 1
  1796 ;; This function uses a non-reentrant model
  1797 ;;
  1798                           
  1799                           	psect	intcodelo
  1800  000018                     __pintcodelo:
  1801                           	opt callstack 0
  1802  000018                     _elboton:
  1803                           	opt callstack 26
  1804                           
  1805                           ;incstack = 0
  1806  000018  8016               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  1807  00001A  CFD8 F002          	movff	status,??_elboton+1
  1808  00001E  CFE8 F003          	movff	wreg,??_elboton+2
  1809  000022  CFE0 F004          	movff	bsr,??_elboton+3
  1810                           
  1811                           ;intento con servo.c: 119:     INTCON3bits.INT1IF=0;
  1812  000026  90F0               	bcf	4080,0,c	;volatile
  1813                           
  1814                           ;intento con servo.c: 120:     T1CONbits.TMR1ON=!T1CONbits.TMR1ON;
  1815  000028  B0CD               	btfsc	4045,0,c	;volatile
  1816  00002A  D003               	goto	i1u36_20
  1817  00002C  6A01               	clrf	??_elboton& (0+255),c
  1818  00002E  2A01               	incf	??_elboton& (0+255),f,c
  1819  000030  D001               	goto	i1u37_28
  1820  000032                     i1u36_20:
  1821  000032  6A01               	clrf	??_elboton& (0+255),c
  1822  000034                     i1u37_28:
  1823  000034  50CD               	movf	4045,w,c	;volatile
  1824  000036  1801               	xorwf	??_elboton,w,c
  1825  000038  0BFE               	andlw	-2
  1826  00003A  1801               	xorwf	??_elboton,w,c
  1827  00003C  6ECD               	movwf	4045,c	;volatile
  1828  00003E  C004  FFE0         	movff	??_elboton+3,bsr
  1829  000042  C003  FFE8         	movff	??_elboton+2,wreg
  1830  000046  C002  FFD8         	movff	??_elboton+1,status
  1831  00004A  9016               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  1832  00004C  0010               	retfie	
  1833  00004E                     __end_of_elboton:
  1834                           	opt callstack 0
  1835                           
  1836 ;; *************** function _elcomparador *****************
  1837 ;; Defined at:
  1838 ;;		line 109 in file "intento con servo.c"
  1839 ;; Parameters:    Size  Location     Type
  1840 ;;		None
  1841 ;; Auto vars:     Size  Location     Type
  1842 ;;		None
  1843 ;; Return value:  Size  Location     Type
  1844 ;;                  1    wreg      void 
  1845 ;; Registers used:
  1846 ;;		wreg, status,2, status,0
  1847 ;; Tracked objects:
  1848 ;;		On entry : 0/0
  1849 ;;		On exit  : 0/0
  1850 ;;		Unchanged: 0/0
  1851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1852 ;;      Params:         0       0       0       0       0       0       0       0       0
  1853 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1854 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1855 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1856 ;;Total ram usage:        0 bytes
  1857 ;; Hardware stack levels used:    1
  1858 ;; This function calls:
  1859 ;;		Nothing
  1860 ;; This function is called by:
  1861 ;;		Interrupt level 2
  1862 ;; This function uses a non-reentrant model
  1863 ;;
  1864                           
  1865                           	psect	intcode
  1866  000008                     __pintcode:
  1867                           	opt callstack 0
  1868  000008                     _elcomparador:
  1869                           	opt callstack 26
  1870                           
  1871                           ;incstack = 0
  1872  000008  8216               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1873  00000A  ED12  F006         	call	int_func,f	;refresh shadow registers
  1874                           
  1875                           	psect	intcode_body
  1876  000C24                     __pintcode_body:
  1877                           	opt callstack 26
  1878  000C24                     int_func:
  1879                           	opt callstack 26
  1880  000C24  0006               	pop		; remove dummy address from shadow register refresh
  1881                           
  1882                           ;intento con servo.c: 110:     PIR1bits.CCP1IF=0;
  1883  000C26  949E               	bcf	3998,2,c	;volatile
  1884                           
  1885                           ;intento con servo.c: 111:     cent++;
  1886  000C28  2A13               	incf	_cent,f,c
  1887                           
  1888                           ;intento con servo.c: 112:     if(cent==100){cent=0;seg++;}
  1889  000C2A  0E64               	movlw	100
  1890  000C2C  1813               	xorwf	_cent,w,c
  1891  000C2E  A4D8               	btfss	status,2,c
  1892  000C30  D003               	goto	i2l1231
  1893  000C32  0E00               	movlw	0
  1894  000C34  6E13               	movwf	_cent,c
  1895  000C36  2A14               	incf	_seg,f,c
  1896  000C38                     i2l1231:
  1897                           
  1898                           ;intento con servo.c: 113:     if(seg==60){seg=0;min++;pase=1;}
  1899  000C38  0E3C               	movlw	60
  1900  000C3A  1814               	xorwf	_seg,w,c
  1901  000C3C  A4D8               	btfss	status,2,c
  1902  000C3E  D005               	goto	i2l1239
  1903  000C40  0E00               	movlw	0
  1904  000C42  6E14               	movwf	_seg,c
  1905  000C44  2A15               	incf	_min,f,c
  1906  000C46  0E01               	movlw	1
  1907  000C48  6E12               	movwf	_pase,c
  1908  000C4A                     i2l1239:
  1909                           
  1910                           ;intento con servo.c: 114:     if(min==60){min=0; seg=0;cent=0;}
  1911  000C4A  0E3C               	movlw	60
  1912  000C4C  1815               	xorwf	_min,w,c
  1913  000C4E  A4D8               	btfss	status,2,c
  1914  000C50  D006               	goto	i2l161
  1915  000C52  0E00               	movlw	0
  1916  000C54  6E15               	movwf	_min,c
  1917  000C56  0E00               	movlw	0
  1918  000C58  6E14               	movwf	_seg,c
  1919  000C5A  0E00               	movlw	0
  1920  000C5C  6E13               	movwf	_cent,c
  1921  000C5E                     i2l161:
  1922                           
  1923                           ;intento con servo.c: 115:     alfa=1;
  1924  000C5E  0E01               	movlw	1
  1925  000C60  6E11               	movwf	_alfa,c
  1926  000C62  9216               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1927  000C64  0011               	retfie		f
  1928  000C66                     __end_of_elcomparador:
  1929                           	opt callstack 0
  1930                           
  1931                           	psect	rparam
  1932  0000                     
  1933                           	psect	temp
  1934  000016                     btemp:
  1935                           	opt callstack 0
  1936  000016                     	ds	1
  1937  0000                     int$flags	set	btemp
  1938  0000                     wtemp8	set	btemp+1
  1939  0000                     ttemp5	set	btemp+1
  1940  0000                     ttemp6	set	btemp+4
  1941  0000                     ttemp7	set	btemp+8
  1942                           tosu	equ	0xFFF
  1943                           tosh	equ	0xFFE
  1944                           tosl	equ	0xFFD
  1945                           stkptr	equ	0xFFC
  1946                           pclatu	equ	0xFFB
  1947                           pclath	equ	0xFFA
  1948                           pcl	equ	0xFF9
  1949                           tblptru	equ	0xFF8
  1950                           tblptrh	equ	0xFF7
  1951                           tblptrl	equ	0xFF6
  1952                           tablat	equ	0xFF5
  1953                           prodh	equ	0xFF4
  1954                           prodl	equ	0xFF3
  1955                           indf0	equ	0xFEF
  1956                           postinc0	equ	0xFEE
  1957                           postdec0	equ	0xFED
  1958                           preinc0	equ	0xFEC
  1959                           plusw0	equ	0xFEB
  1960                           fsr0h	equ	0xFEA
  1961                           fsr0l	equ	0xFE9
  1962                           wreg	equ	0xFE8
  1963                           indf1	equ	0xFE7
  1964                           postinc1	equ	0xFE6
  1965                           postdec1	equ	0xFE5
  1966                           preinc1	equ	0xFE4
  1967                           plusw1	equ	0xFE3
  1968                           fsr1h	equ	0xFE2
  1969                           fsr1l	equ	0xFE1
  1970                           bsr	equ	0xFE0
  1971                           indf2	equ	0xFDF
  1972                           postinc2	equ	0xFDE
  1973                           postdec2	equ	0xFDD
  1974                           preinc2	equ	0xFDC
  1975                           plusw2	equ	0xFDB
  1976                           fsr2h	equ	0xFDA
  1977                           fsr2l	equ	0xFD9
  1978                           status	equ	0xFD8


Data Sizes:
    Strings     21
    Constant    0
    Data        0
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     15      21
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_2(CODE[9]), STR_1(CODE[12]), 


Critical Paths under _main in COMRAM

    _main->_ESCRIBE_MENSAJE
    _POS_CURSOR->_ENVIA_LCD_CMD
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD

Critical Paths under _elboton in COMRAM

    None.

Critical Paths under _elcomparador in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _elboton in BANK0

    None.

Critical Paths under _elcomparador in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _elboton in BANK1

    None.

Critical Paths under _elcomparador in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _elboton in BANK2

    None.

Critical Paths under _elcomparador in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _elboton in BANK3

    None.

Critical Paths under _elcomparador in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _elboton in BANK4

    None.

Critical Paths under _elcomparador in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _elboton in BANK5

    None.

Critical Paths under _elcomparador in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _elboton in BANK6

    None.

Critical Paths under _elcomparador in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _elboton in BANK7

    None.

Critical Paths under _elcomparador in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    3240
                                             13 COMRAM     2     2      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _LCD_CONFIG
                         _POS_CURSOR
                            ___awdiv
                            ___awmod
                              _mover
 ---------------------------------------------------------------------------------
 (1) _mover                                                6     6      0      60
                                              4 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     904
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     756
                                              4 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     360
                                              7 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_CONFIG                                           1     1      0     135
                                              7 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     515
                                              7 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              5 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _CURSOR_ONOFF                                         1     1      0     150
                                              7 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _ENVIA_LCD_CMD                                        2     2      0     120
                                              5 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (3) _LEER_LCD                                             1     1      0      45
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _elboton                                              4     4      0       0
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _elcomparador                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BORRAR_LCD
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _CURSOR_HOME
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _CURSOR_ONOFF
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _LCD_CONFIG
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
     _ENVIA_NIBBLE
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   ___awdiv
   ___awmod
   _mover

 _elboton (ROOT)

 _elcomparador (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E      F      15       1       22.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      15      20        0.0%
DATA                 0      0      15       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Jun 03 21:44:51 2019

                      l67 0B96                        u70 0A04                        u80 0A6C  
            ___awdiv@sign 000A                        bsr 000FE0        __CFG_FOSC$XTPLL_XT 000000  
           ENVIA_CHAR@aux 0007                       l141 0A0C                       l139 09B4  
                     l149 09A6                       l863 0B8C                       l947 0D50  
                     l879 0BBA                       u500 0B2C                       u440 0AB4  
                     u607 0828                       u617 09BC                       u707 0BF2  
                     u627 09D2                       u717 0C74                       u637 09E6  
                     u727 0CA8                       u647 0A14                       u737 0B6E  
                     u657 0A24                       u747 0B7C                       u667 0A38  
                     u757 0B86                       u677 0A4C                       u767 0B9A  
                     u687 0BD4                       u777 0BA8                       u697 0BE2  
                     u787 0BB2                       u797 0D70              __CFG_BOR$OFF 000000  
                     _min 0015                       _seg 0014              ___awmod@sign 000A  
             LEER_LCD@aux 0005                       wreg 000FE8              ?_CURSOR_HOME 0001  
          ??_ENVIA_NIBBLE 0005              __CFG_LVP$OFF 000000            ??_elcomparador 0001  
          ENVIA_CHAR@dato 0006              __CFG_WDT$OFF 000000                      l1303 0AE8  
                    l1251 0D12                      l1331 0B40                      l1323 0B20  
                    l1315 0B06                      l1261 0CF6                      l1325 0B28  
                    l1271 0A82                      l1335 0B4A                      l1319 0B12  
                    l1431 0988                      l1257 0CD8                      l1283 0AA8  
                    l1339 0B58                      l1285 0AB0                      l1277 0A92  
                    l1295 0AD0                      l1393 0896                      l1299 0ADA  
                    STR_1 0801                      STR_2 080D                      _LATD 000F8C  
            __CFG_PWRT$ON 000000                      _alfa 0011                      _cent 0013  
                    _main 0818                      _pase 0012                      btemp 0016  
                    start 004E             ?_CURSOR_ONOFF 0001             __CFG_MCLRE$ON 000000  
            ___param_bank 000000           ??_ENVIA_LCD_CMD 0006          __end_of_LEER_LCD 0BC4  
     __size_of_BORRAR_LCD 0008             __CFG_PLLDIV$1 000000            __CFG_CCP2MX$ON 000000  
                   ?_main 0001           __end_of___awdiv 0AF2           __end_of___awmod 0B62  
         ___awdiv@divisor 0007                     _T1CON 000FCD                     i2l161 0C5E  
         ___awdiv@counter 0009                     _TMR1H 000FCF                     _TMR1L 000FCE  
                   _PORTD 000F83       __size_of_LCD_CONFIG 0060                     _TRISD 000F95  
     __size_of_ENVIA_CHAR 0034           __end_of_elboton 004E                     _acaba 0010  
             ?_POS_CURSOR 0008                     _mover 09AC                     tablat 000FF5  
                   ttemp5 0017                     ttemp6 001A                     ttemp7 001E  
                   status 000FD8                     wtemp8 0017            ??_CURSOR_ONOFF 0008  
         __initialization 0D24              __end_of_main 09AC           _ESCRIBE_MENSAJE 0CCE  
                  ??_main 000E             __activetblptr 000001                    _CCPR1H 000FBF  
                  _CCPR1L 000FBE          ___awdiv@dividend 0005                    ?_mover 0001  
                  i2l1231 0C38                    i2l1239 0C4A                 ??___awdiv 0009  
               ??___awmod 0009      __end_of_ENVIA_NIBBLE 0D7A      __end_of_elcomparador 0C66  
     __size_of_POS_CURSOR 0024          ___awdiv@quotient 000B           ___awmod@divisor 0007  
         ___awmod@counter 0009                 ??_elboton 0001              __mediumconst 0000  
                  mover@j 0007                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8              ??_BORRAR_LCD 0008      __size_of_CURSOR_HOME 0008  
               ?_LEER_LCD 0001                __accesstop 0060   __end_of__initialization 0D30  
         __CFG_PBADEN$OFF 000000              ??_LCD_CONFIG 0008             ___rparam_used 000001  
            ??_ENVIA_CHAR 0006   __end_of_ESCRIBE_MENSAJE 0D00            __pcstackCOMRAM 0001  
           __end_of_mover 0A6E        __end_of_BORRAR_LCD 0D8A          ENVIA_LCD_CMD@aux 0007  
    __end_of_CURSOR_ONOFF 0D5E        __end_of_LCD_CONFIG 0C24        __end_of_ENVIA_CHAR 0C9A  
                 ??_mover 0005                ??_LEER_LCD 0005          ENVIA_NIBBLE@dato 0005  
                 _CCP1CON 000FBD                   i1u36_20 0032                   i1u37_28 0034  
            ??_POS_CURSOR 0009     __size_of_ENVIA_NIBBLE 001C     __size_of_elcomparador 0C5E  
                 __Hparam 0000                   __Lparam 0000          ?_ESCRIBE_MENSAJE 0008  
                 ___awdiv 0A6E                   ___awmod 0AF2              __psmallconst 0800  
   __end_of_ENVIA_LCD_CMD 0CCE                   __pcinit 0D24        __end_of_POS_CURSOR 0D24  
                 __ramtop 0800                   __ptext0 0818                   __ptext1 09AC  
                 __ptext2 0AF2                   __ptext3 0A6E                   __ptext4 0D00  
                 __ptext5 0BC4                   __ptext6 0CCE                   __ptext7 0C66  
                 __ptext8 0D42                   __ptext9 0D7A                   _elboton 0018  
               _T1CONbits 000FCD          ___awmod@dividend 0005            __pintcode_body 0C24  
            _ENVIA_NIBBLE 0D5E      end_of_initialization 0D30              _elcomparador 0008  
                 int_func 0C24     __size_of_CURSOR_ONOFF 001C                 _TRISBbits 000F93  
       __size_of_LEER_LCD 0062              _CURSOR_ONOFF 0D42        CURSOR_ONOFF@estado 0008  
           ??_CURSOR_HOME 0008       start_initialization 0D24         ENVIA_LCD_CMD@dato 0006  
             __pbssCOMRAM 0010       __end_of_CURSOR_HOME 0D82                 __pintcode 0008  
                ?___awdiv 0005                  ?___awmod 0005               __pintcodelo 0018  
                ?_elboton 0001               __smallconst 0800                mover@j_600 0009  
          __size_of_mover 00C2                  _LEER_LCD 0B62                  _LATBbits 000F8A  
                _LATDbits 000F8C                  _IPR1bits 000F9F                  _PIE1bits 000F9D  
                _PIR1bits 000F9E                  _RCONbits 000FD0          ESCRIBE_MENSAJE@i 000D  
          POS_CURSOR@fila 0009  __size_of_ESCRIBE_MENSAJE 0032               _CURSOR_HOME 0D7A  
             _INTCON2bits 000FF1               _INTCON3bits 000FF0    __size_of_ENVIA_LCD_CMD 0034  
                __Hrparam 0000                  __Lrparam 0000              __Lsmallconst 0800  
        __size_of___awdiv 0084          __size_of___awmod 0070          __size_of_elboton 0036  
                __ptext10 0D82                  __ptext11 0C9A                  __ptext12 0B62  
                __ptext13 0D5E                _BORRAR_LCD 0D82             __size_of_main 0194  
              _LCD_CONFIG 0BC4                _ENVIA_CHAR 0C66                  int$flags 0016  
           _ENVIA_LCD_CMD 0C9A     __CFG_CPUDIV$OSC1_PLL2 000000                _INTCONbits 000FF2  
       ??_ESCRIBE_MENSAJE 000B                  intlevel1 0000                  intlevel2 0000  
   ESCRIBE_MENSAJE@cadena 0008            ?_ENVIA_LCD_CMD 0001               ?_BORRAR_LCD 0001  
           ?_ENVIA_NIBBLE 0001                _POS_CURSOR 0D00             ?_elcomparador 0001  
             ?_LCD_CONFIG 0001        ESCRIBE_MENSAJE@tam 000A               ?_ENVIA_CHAR 0001  
       POS_CURSOR@columna 0008  
