

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Jun 06 09:54:25 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    30                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    31  0000                     
    32                           ; Version 2.05
    33                           ; Generated 20/12/2018 GMT
    34                           ; 
    35                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC18F4550 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     _T1CONbits	set	4045
    67  0000                     _PIR1bits	set	3998
    68  0000                     _INTCONbits	set	4082
    69  0000                     _RCONbits	set	4048
    70  0000                     _INTCON3bits	set	4080
    71  0000                     _INTCON2bits	set	4081
    72  0000                     _IPR1bits	set	3999
    73  0000                     _PIE1bits	set	3997
    74  0000                     _CCPR1L	set	4030
    75  0000                     _CCPR1H	set	4031
    76  0000                     _CCP1CON	set	4029
    77  0000                     _T1CON	set	4045
    78  0000                     _TMR1L	set	4046
    79  0000                     _TMR1H	set	4047
    80  0000                     _TRISBbits	set	3987
    81  0000                     _LATBbits	set	3978
    82  0000                     _PORTD	set	3971
    83  0000                     _LATD	set	3980
    84  0000                     _TRISD	set	3989
    85  0000                     _LATDbits	set	3980
    86                           
    87                           	psect	smallconst
    88  000800                     __psmallconst:
    89                           	opt callstack 0
    90  000800  00                 	db	0
    91  000801                     STR_1:
    92  000801  30                 	db	48	;'0'
    93  000802  30                 	db	48	;'0'
    94  000803  31                 	db	49	;'1'
    95  000804  20                 	db	32
    96  000805  43                 	db	67	;'C'
    97  000806  61                 	db	97	;'a'
    98  000807  6D                 	db	109	;'m'
    99  000808  70                 	db	112	;'p'
   100  000809  61                 	db	97	;'a'
   101  00080A  6E                 	db	110	;'n'
   102  00080B  61                 	db	97	;'a'
   103  00080C  64                 	db	100	;'d'
   104  00080D  61                 	db	97	;'a'
   105  00080E  20                 	db	32
   106  00080F  00                 	db	0
   107  000810                     STR_4:
   108  000810  30                 	db	48	;'0'
   109  000811  30                 	db	48	;'0'
   110  000812  30                 	db	48	;'0'
   111  000813  20                 	db	32
   112  000814  43                 	db	67	;'C'
   113  000815  61                 	db	97	;'a'
   114  000816  6D                 	db	109	;'m'
   115  000817  70                 	db	112	;'p'
   116  000818  61                 	db	97	;'a'
   117  000819  6E                 	db	110	;'n'
   118  00081A  61                 	db	97	;'a'
   119  00081B  64                 	db	100	;'d'
   120  00081C  61                 	db	97	;'a'
   121  00081D  73                 	db	115	;'s'
   122  00081E  00                 	db	0
   123  00081F                     STR_3:
   124  00081F  54                 	db	84	;'T'
   125  000820  49                 	db	73	;'I'
   126  000821  4D                 	db	77	;'M'
   127  000822  45                 	db	69	;'E'
   128  000823  52                 	db	82	;'R'
   129  000824  3A                 	db	58	;':'
   130  000825  00                 	db	0
   131  0000                     
   132                           ; #config settings
   133  000826  00                 	db	0	; dummy byte at the end
   134  0000                     
   135                           	psect	cinit
   136  000F14                     __pcinit:
   137                           	opt callstack 0
   138  000F14                     start_initialization:
   139                           	opt callstack 0
   140  000F14                     __initialization:
   141                           	opt callstack 0
   142                           
   143                           ; Clear objects allocated to COMRAM (8 bytes)
   144  000F14  EE00  F013         	lfsr	0,__pbssCOMRAM
   145  000F18  0E08               	movlw	8
   146  000F1A                     clear_0:
   147  000F1A  6AEE               	clrf	postinc0,c
   148  000F1C  06E8               	decf	wreg,f,c
   149  000F1E  E1FD               	bnz	clear_0
   150  000F20                     end_of_initialization:
   151                           	opt callstack 0
   152  000F20                     __end_of__initialization:
   153                           	opt callstack 0
   154  000F20  901B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   155  000F22  921B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   156  000F24  0E00               	movlw	low (__Lsmallconst shr (0+16))
   157  000F26  6EF8               	movwf	tblptru,c
   158  000F28  0E08               	movlw	high __Lsmallconst
   159  000F2A  6EF7               	movwf	tblptrh,c
   160  000F2C  0100               	movlb	0
   161  000F2E  EF14  F004         	goto	_main	;jump to C main() function
   162                           
   163                           	psect	bssCOMRAM
   164  000013                     __pbssCOMRAM:
   165                           	opt callstack 0
   166  000013                     _campana:
   167                           	opt callstack 0
   168  000013                     	ds	2
   169  000015                     _cent:
   170                           	opt callstack 0
   171  000015                     	ds	2
   172  000017                     _pulsa:
   173                           	opt callstack 0
   174  000017                     	ds	1
   175  000018                     _pasa:
   176                           	opt callstack 0
   177  000018                     	ds	1
   178  000019                     _seg:
   179                           	opt callstack 0
   180  000019                     	ds	1
   181  00001A                     _min:
   182                           	opt callstack 0
   183  00001A                     	ds	1
   184                           
   185                           	psect	cstackCOMRAM
   186  000001                     __pcstackCOMRAM:
   187                           	opt callstack 0
   188  000001                     ??_elboton:
   189                           
   190                           ; 1 bytes @ 0x0
   191  000001                     	ds	4
   192  000005                     ??_mover:
   193  000005                     ?___awdiv:
   194                           	opt callstack 0
   195  000005                     ?___awmod:
   196                           	opt callstack 0
   197  000005                     ?___lwmod:
   198                           	opt callstack 0
   199  000005                     ENVIA_NIBBLE@dato:
   200                           	opt callstack 0
   201  000005                     LEER_LCD@aux:
   202                           	opt callstack 0
   203  000005                     ___awdiv@dividend:
   204                           	opt callstack 0
   205  000005                     ___awmod@dividend:
   206                           	opt callstack 0
   207  000005                     ___lwmod@dividend:
   208                           	opt callstack 0
   209                           
   210                           ; 2 bytes @ 0x4
   211  000005                     	ds	1
   212  000006                     ENVIA_CHAR@dato:
   213                           	opt callstack 0
   214  000006                     ENVIA_LCD_CMD@dato:
   215                           	opt callstack 0
   216                           
   217                           ; 1 bytes @ 0x5
   218  000006                     	ds	1
   219  000007                     ENVIA_CHAR@aux:
   220                           	opt callstack 0
   221  000007                     ENVIA_LCD_CMD@aux:
   222                           	opt callstack 0
   223  000007                     ___awdiv@divisor:
   224                           	opt callstack 0
   225  000007                     ___awmod@divisor:
   226                           	opt callstack 0
   227  000007                     ___lwmod@divisor:
   228                           	opt callstack 0
   229                           
   230                           ; 2 bytes @ 0x6
   231  000007                     	ds	1
   232  000008                     ??_LCD_CONFIG:
   233  000008                     POS_CURSOR@columna:
   234                           	opt callstack 0
   235  000008                     CURSOR_ONOFF@estado:
   236                           	opt callstack 0
   237  000008                     ESCRIBE_MENSAJE@cadena:
   238                           	opt callstack 0
   239  000008                     mover@j:
   240                           	opt callstack 0
   241                           
   242                           ; 2 bytes @ 0x7
   243  000008                     	ds	1
   244  000009                     POS_CURSOR@fila:
   245                           	opt callstack 0
   246  000009                     ___awdiv@counter:
   247                           	opt callstack 0
   248  000009                     ___awmod@counter:
   249                           	opt callstack 0
   250  000009                     ___lwmod@counter:
   251                           	opt callstack 0
   252                           
   253                           ; 1 bytes @ 0x8
   254  000009                     	ds	1
   255  00000A                     ?___lwdiv:
   256                           	opt callstack 0
   257  00000A                     ESCRIBE_MENSAJE@tam:
   258                           	opt callstack 0
   259  00000A                     ___awdiv@sign:
   260                           	opt callstack 0
   261  00000A                     ___awmod@sign:
   262                           	opt callstack 0
   263  00000A                     mover@j_600:
   264                           	opt callstack 0
   265  00000A                     ___lwdiv@dividend:
   266                           	opt callstack 0
   267                           
   268                           ; 2 bytes @ 0x9
   269  00000A                     	ds	1
   270  00000B                     ??_ESCRIBE_MENSAJE:
   271  00000B                     ___awdiv@quotient:
   272                           	opt callstack 0
   273                           
   274                           ; 2 bytes @ 0xA
   275  00000B                     	ds	1
   276  00000C                     mover@w:
   277                           	opt callstack 0
   278  00000C                     ___lwdiv@divisor:
   279                           	opt callstack 0
   280                           
   281                           ; 2 bytes @ 0xB
   282  00000C                     	ds	1
   283  00000D                     ESCRIBE_MENSAJE@i:
   284                           	opt callstack 0
   285                           
   286                           ; 1 bytes @ 0xC
   287  00000D                     	ds	1
   288  00000E                     ___lwdiv@quotient:
   289                           	opt callstack 0
   290                           
   291                           ; 2 bytes @ 0xD
   292  00000E                     	ds	2
   293  000010                     ___lwdiv@counter:
   294                           	opt callstack 0
   295                           
   296                           ; 1 bytes @ 0xF
   297  000010                     	ds	1
   298  000011                     ??_main:
   299                           
   300                           ; 1 bytes @ 0x10
   301  000011                     	ds	2
   302                           
   303 ;;
   304 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   305 ;;
   306 ;; *************** function _main *****************
   307 ;; Defined at:
   308 ;;		line 58 in file "intento con servo.c"
   309 ;; Parameters:    Size  Location     Type
   310 ;;		None
   311 ;; Auto vars:     Size  Location     Type
   312 ;;		None
   313 ;; Return value:  Size  Location     Type
   314 ;;                  1    wreg      void 
   315 ;; Registers used:
   316 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   317 ;; Tracked objects:
   318 ;;		On entry : 0/0
   319 ;;		On exit  : 0/0
   320 ;;		Unchanged: 0/0
   321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   322 ;;      Params:         0       0       0       0       0       0       0       0       0
   323 ;;      Locals:         0       0       0       0       0       0       0       0       0
   324 ;;      Temps:          2       0       0       0       0       0       0       0       0
   325 ;;      Totals:         2       0       0       0       0       0       0       0       0
   326 ;;Total ram usage:        2 bytes
   327 ;; Hardware stack levels required when called:    6
   328 ;; This function calls:
   329 ;;		_BORRAR_LCD
   330 ;;		_CURSOR_ONOFF
   331 ;;		_ENVIA_CHAR
   332 ;;		_ESCRIBE_MENSAJE
   333 ;;		_LCD_CONFIG
   334 ;;		_POS_CURSOR
   335 ;;		___awdiv
   336 ;;		___awmod
   337 ;;		___lwdiv
   338 ;;		___lwmod
   339 ;;		_contador_de_campanas
   340 ;;		_mover
   341 ;; This function is called by:
   342 ;;		Startup code after reset
   343 ;; This function uses a non-reentrant model
   344 ;;
   345                           
   346                           	psect	text0
   347  000828                     __ptext0:
   348                           	opt callstack 0
   349  000828                     _main:
   350                           	opt callstack 25
   351                           
   352                           ;intento con servo.c: 60:     TRISD =0x00;
   353                           
   354                           ;incstack = 0
   355  000828  0E00               	movlw	0
   356  00082A  6E95               	movwf	3989,c	;volatile
   357                           
   358                           ;intento con servo.c: 61:     TRISBbits.RB0=0;
   359  00082C  9093               	bcf	3987,0,c	;volatile
   360                           
   361                           ;intento con servo.c: 64:     _delay((unsigned long)((50)*(48000000UL/4000.0)));
   362  00082E  0E04               	movlw	4
   363  000830  6E12               	movwf	(??_main+1)& (0+255),c
   364  000832  0E0C               	movlw	12
   365  000834  6E11               	movwf	??_main& (0+255),c
   366  000836  0E34               	movlw	52
   367  000838                     u907:
   368  000838  2EE8               	decfsz	wreg,f,c
   369  00083A  D7FE               	bra	u907
   370  00083C  2E11               	decfsz	??_main& (0+255),f,c
   371  00083E  D7FC               	bra	u907
   372  000840  2E12               	decfsz	(??_main+1)& (0+255),f,c
   373  000842  D7FA               	bra	u907
   374                           
   375                           ;intento con servo.c: 65:     LCD_CONFIG();
   376  000844  EC86  F006         	call	_LCD_CONFIG	;wreg free
   377                           
   378                           ;intento con servo.c: 66:     BORRAR_LCD();
   379  000848  ECB5  F007         	call	_BORRAR_LCD	;wreg free
   380                           
   381                           ;intento con servo.c: 67:     POS_CURSOR(1,0);
   382  00084C  0E00               	movlw	0
   383  00084E  6E08               	movwf	POS_CURSOR@columna,c
   384  000850  0E01               	movlw	1
   385  000852  EC78  F007         	call	_POS_CURSOR
   386                           
   387                           ;intento con servo.c: 68:     CURSOR_ONOFF(1);
   388  000856  0E01               	movlw	1
   389  000858  EC99  F007         	call	_CURSOR_ONOFF
   390                           
   391                           ;intento con servo.c: 69:     ESCRIBE_MENSAJE("TIMER:",6);
   392  00085C  0E1F               	movlw	low STR_3
   393  00085E  6E08               	movwf	ESCRIBE_MENSAJE@cadena,c
   394  000860  0E08               	movlw	high STR_3
   395  000862  6E09               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   396  000864  0E06               	movlw	6
   397  000866  6E0A               	movwf	ESCRIBE_MENSAJE@tam,c
   398  000868  EC5F  F007         	call	_ESCRIBE_MENSAJE	;wreg free
   399                           
   400                           ;intento con servo.c: 70:     POS_CURSOR(2,1);
   401  00086C  0E01               	movlw	1
   402  00086E  6E08               	movwf	POS_CURSOR@columna,c
   403  000870  0E02               	movlw	2
   404  000872  EC78  F007         	call	_POS_CURSOR
   405                           
   406                           ;intento con servo.c: 71:     ESCRIBE_MENSAJE("000 Campanadas",14);
   407  000876  0E10               	movlw	low STR_4
   408  000878  6E08               	movwf	ESCRIBE_MENSAJE@cadena,c
   409  00087A  0E08               	movlw	high STR_4
   410  00087C  6E09               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   411  00087E  0E0E               	movlw	14
   412  000880  6E0A               	movwf	ESCRIBE_MENSAJE@tam,c
   413  000882  EC5F  F007         	call	_ESCRIBE_MENSAJE	;wreg free
   414                           
   415                           ;intento con servo.c: 74:     TMR1H=0xFF;
   416  000886  68CF               	setf	4047,c	;volatile
   417                           
   418                           ;intento con servo.c: 75:     TMR1L=0xFF;
   419  000888  68CE               	setf	4046,c	;volatile
   420                           
   421                           ;intento con servo.c: 76:     T1CON=0xEA;
   422  00088A  0EEA               	movlw	234
   423  00088C  6ECD               	movwf	4045,c	;volatile
   424                           
   425                           ;intento con servo.c: 79:     CCP1CON=0x0B;
   426  00088E  0E0B               	movlw	11
   427  000890  6EBD               	movwf	4029,c	;volatile
   428                           
   429                           ;intento con servo.c: 80:     CCPR1H=0x00;
   430  000892  0E00               	movlw	0
   431  000894  6EBF               	movwf	4031,c	;volatile
   432                           
   433                           ;intento con servo.c: 81:     CCPR1L=41;
   434  000896  0E29               	movlw	41
   435  000898  6EBE               	movwf	4030,c	;volatile
   436                           
   437                           ;intento con servo.c: 82:     PIE1bits.CCP1IE=1;
   438  00089A  849D               	bsf	3997,2,c	;volatile
   439                           
   440                           ;intento con servo.c: 83:     IPR1bits.CCP1IP=1;
   441  00089C  849F               	bsf	3999,2,c	;volatile
   442                           
   443                           ;intento con servo.c: 86:     INTCON2bits.INTEDG1=1;
   444  00089E  8AF1               	bsf	4081,5,c	;volatile
   445                           
   446                           ;intento con servo.c: 87:     INTCON3bits.INT1IE=1;
   447  0008A0  86F0               	bsf	4080,3,c	;volatile
   448                           
   449                           ;intento con servo.c: 88:     INTCON3bits.INT1IP=0;
   450  0008A2  9CF0               	bcf	4080,6,c	;volatile
   451                           
   452                           ;intento con servo.c: 91:     RCONbits.IPEN = 1;
   453  0008A4  8ED0               	bsf	4048,7,c	;volatile
   454                           
   455                           ;intento con servo.c: 92:     INTCONbits.GIEH = 1;
   456  0008A6  8EF2               	bsf	4082,7,c	;volatile
   457                           
   458                           ;intento con servo.c: 93:     INTCONbits.GIEL = 1;
   459  0008A8  8CF2               	bsf	4082,6,c	;volatile
   460                           
   461                           ;intento con servo.c: 94:     INTCONbits.PEIE=1;
   462  0008AA  8CF2               	bsf	4082,6,c	;volatile
   463  0008AC                     l1525:
   464                           
   465                           ;intento con servo.c: 99:         POS_CURSOR(1,7);
   466  0008AC  0E07               	movlw	7
   467  0008AE  6E08               	movwf	POS_CURSOR@columna,c
   468  0008B0  0E01               	movlw	1
   469  0008B2  EC78  F007         	call	_POS_CURSOR
   470                           
   471                           ;intento con servo.c: 100:         ENVIA_CHAR(min/10+'0');
   472  0008B6  C01A  F005         	movff	_min,___awdiv@dividend
   473  0008BA  6A06               	clrf	___awdiv@dividend+1,c
   474  0008BC  0E00               	movlw	0
   475  0008BE  6E08               	movwf	___awdiv@divisor+1,c
   476  0008C0  0E0A               	movlw	10
   477  0008C2  6E07               	movwf	___awdiv@divisor,c
   478  0008C4  ECDB  F005         	call	___awdiv	;wreg free
   479  0008C8  5005               	movf	?___awdiv,w,c
   480  0008CA  0F30               	addlw	48
   481  0008CC  EC2B  F007         	call	_ENVIA_CHAR
   482                           
   483                           ;intento con servo.c: 101:         ENVIA_CHAR(min%10+'0');
   484  0008D0  C01A  F005         	movff	_min,___awmod@dividend
   485  0008D4  6A06               	clrf	___awmod@dividend+1,c
   486  0008D6  0E00               	movlw	0
   487  0008D8  6E08               	movwf	___awmod@divisor+1,c
   488  0008DA  0E0A               	movlw	10
   489  0008DC  6E07               	movwf	___awmod@divisor,c
   490  0008DE  EC1D  F006         	call	___awmod	;wreg free
   491  0008E2  5005               	movf	?___awmod,w,c
   492  0008E4  0F30               	addlw	48
   493  0008E6  EC2B  F007         	call	_ENVIA_CHAR
   494                           
   495                           ;intento con servo.c: 102:         ENVIA_CHAR(':');
   496  0008EA  0E3A               	movlw	58
   497  0008EC  EC2B  F007         	call	_ENVIA_CHAR
   498                           
   499                           ;intento con servo.c: 103:         ENVIA_CHAR(seg/10+'0');
   500  0008F0  C019  F005         	movff	_seg,___awdiv@dividend
   501  0008F4  6A06               	clrf	___awdiv@dividend+1,c
   502  0008F6  0E00               	movlw	0
   503  0008F8  6E08               	movwf	___awdiv@divisor+1,c
   504  0008FA  0E0A               	movlw	10
   505  0008FC  6E07               	movwf	___awdiv@divisor,c
   506  0008FE  ECDB  F005         	call	___awdiv	;wreg free
   507  000902  5005               	movf	?___awdiv,w,c
   508  000904  0F30               	addlw	48
   509  000906  EC2B  F007         	call	_ENVIA_CHAR
   510                           
   511                           ;intento con servo.c: 104:         ENVIA_CHAR(seg%10+'0');
   512  00090A  C019  F005         	movff	_seg,___awmod@dividend
   513  00090E  6A06               	clrf	___awmod@dividend+1,c
   514  000910  0E00               	movlw	0
   515  000912  6E08               	movwf	___awmod@divisor+1,c
   516  000914  0E0A               	movlw	10
   517  000916  6E07               	movwf	___awmod@divisor,c
   518  000918  EC1D  F006         	call	___awmod	;wreg free
   519  00091C  5005               	movf	?___awmod,w,c
   520  00091E  0F30               	addlw	48
   521  000920  EC2B  F007         	call	_ENVIA_CHAR
   522                           
   523                           ;intento con servo.c: 105:         ENVIA_CHAR(':');
   524  000924  0E3A               	movlw	58
   525  000926  EC2B  F007         	call	_ENVIA_CHAR
   526                           
   527                           ;intento con servo.c: 106:         ENVIA_CHAR(cent/100+'0');
   528  00092A  C015  F00A         	movff	_cent,___lwdiv@dividend
   529  00092E  C016  F00B         	movff	_cent+1,___lwdiv@dividend+1
   530  000932  0E00               	movlw	0
   531  000934  6E0D               	movwf	___lwdiv@divisor+1,c
   532  000936  0E64               	movlw	100
   533  000938  6E0C               	movwf	___lwdiv@divisor,c
   534  00093A  ECE1  F006         	call	___lwdiv	;wreg free
   535  00093E  500A               	movf	?___lwdiv,w,c
   536  000940  0F30               	addlw	48
   537  000942  EC2B  F007         	call	_ENVIA_CHAR
   538                           
   539                           ;intento con servo.c: 107:         ENVIA_CHAR((cent%100)/10+'0');
   540  000946  0E00               	movlw	0
   541  000948  6E08               	movwf	___lwmod@divisor+1,c
   542  00094A  0E64               	movlw	100
   543  00094C  6E07               	movwf	___lwmod@divisor,c
   544  00094E  C015  F005         	movff	_cent,___lwmod@dividend
   545  000952  C016  F006         	movff	_cent+1,___lwmod@dividend+1
   546  000956  EC0A  F007         	call	___lwmod	;wreg free
   547  00095A  C005  F00A         	movff	?___lwmod,___lwdiv@dividend
   548  00095E  C006  F00B         	movff	?___lwmod+1,___lwdiv@dividend+1
   549  000962  0E00               	movlw	0
   550  000964  6E0D               	movwf	___lwdiv@divisor+1,c
   551  000966  0E0A               	movlw	10
   552  000968  6E0C               	movwf	___lwdiv@divisor,c
   553  00096A  ECE1  F006         	call	___lwdiv	;wreg free
   554  00096E  500A               	movf	?___lwdiv,w,c
   555  000970  0F30               	addlw	48
   556  000972  EC2B  F007         	call	_ENVIA_CHAR
   557                           
   558                           ;intento con servo.c: 110:         if(seg%15==0 && seg>0 && (cent==5 || cent==10 )){
   559  000976  C019  F005         	movff	_seg,___awmod@dividend
   560  00097A  6A06               	clrf	___awmod@dividend+1,c
   561  00097C  0E00               	movlw	0
   562  00097E  6E08               	movwf	___awmod@divisor+1,c
   563  000980  0E0F               	movlw	15
   564  000982  6E07               	movwf	___awmod@divisor,c
   565  000984  EC1D  F006         	call	___awmod	;wreg free
   566  000988  5005               	movf	?___awmod,w,c
   567  00098A  1006               	iorwf	?___awmod+1,w,c
   568  00098C  A4D8               	btfss	status,2,c
   569  00098E  D011               	goto	l1555
   570  000990  5019               	movf	_seg,w,c
   571  000992  B4D8               	btfsc	status,2,c
   572  000994  D00E               	goto	l1555
   573  000996  0E05               	movlw	5
   574  000998  1815               	xorwf	_cent,w,c
   575  00099A  1016               	iorwf	_cent+1,w,c
   576  00099C  B4D8               	btfsc	status,2,c
   577  00099E  D005               	goto	u800
   578  0009A0  0E0A               	movlw	10
   579  0009A2  1815               	xorwf	_cent,w,c
   580  0009A4  1016               	iorwf	_cent+1,w,c
   581  0009A6  A4D8               	btfss	status,2,c
   582  0009A8  D004               	goto	l1555
   583  0009AA                     u800:
   584                           
   585                           ;intento con servo.c: 111:             contador_de_campanas ();
   586  0009AA  EC7A  F005         	call	_contador_de_campanas	;wreg free
   587                           
   588                           ;intento con servo.c: 112:             mover();
   589  0009AE  EC0F  F005         	call	_mover	;wreg free
   590  0009B2                     l1555:
   591                           
   592                           ;intento con servo.c: 114:         if(min>0 && seg==0 && (cent==5 || cent==10 )){
   593  0009B2  501A               	movf	_min,w,c
   594  0009B4  B4D8               	btfsc	status,2,c
   595  0009B6  D015               	goto	l1569
   596  0009B8  5019               	movf	_seg,w,c
   597  0009BA  A4D8               	btfss	status,2,c
   598  0009BC  D012               	goto	l1569
   599  0009BE  0E05               	movlw	5
   600  0009C0  1815               	xorwf	_cent,w,c
   601  0009C2  1016               	iorwf	_cent+1,w,c
   602  0009C4  B4D8               	btfsc	status,2,c
   603  0009C6  D005               	goto	u840
   604  0009C8  0E0A               	movlw	10
   605  0009CA  1815               	xorwf	_cent,w,c
   606  0009CC  1016               	iorwf	_cent+1,w,c
   607  0009CE  A4D8               	btfss	status,2,c
   608  0009D0  D008               	goto	l1569
   609  0009D2                     u840:
   610                           
   611                           ;intento con servo.c: 115:             contador_de_campanas ();
   612  0009D2  EC7A  F005         	call	_contador_de_campanas	;wreg free
   613                           
   614                           ;intento con servo.c: 116:             mover();
   615  0009D6  EC0F  F005         	call	_mover	;wreg free
   616                           
   617                           ;intento con servo.c: 117:             contador_de_campanas ();
   618  0009DA  EC7A  F005         	call	_contador_de_campanas	;wreg free
   619                           
   620                           ;intento con servo.c: 118:             mover();
   621  0009DE  EC0F  F005         	call	_mover	;wreg free
   622  0009E2                     l1569:
   623                           
   624                           ;intento con servo.c: 120:         if((min==0 && seg==0 && (cent==5 || cent==10 )) && pa
      +                          sa==1){
   625  0009E2  501A               	movf	_min,w,c
   626  0009E4  A4D8               	btfss	status,2,c
   627  0009E6  D762               	goto	l1525
   628  0009E8  5019               	movf	_seg,w,c
   629  0009EA  A4D8               	btfss	status,2,c
   630  0009EC  D75F               	goto	l1525
   631  0009EE  0E05               	movlw	5
   632  0009F0  1815               	xorwf	_cent,w,c
   633  0009F2  1016               	iorwf	_cent+1,w,c
   634  0009F4  B4D8               	btfsc	status,2,c
   635  0009F6  D005               	goto	u880
   636  0009F8  0E0A               	movlw	10
   637  0009FA  1815               	xorwf	_cent,w,c
   638  0009FC  1016               	iorwf	_cent+1,w,c
   639  0009FE  A4D8               	btfss	status,2,c
   640  000A00  D755               	goto	l1525
   641  000A02                     u880:
   642  000A02  0418               	decf	_pasa,w,c
   643  000A04  A4D8               	btfss	status,2,c
   644  000A06  D752               	goto	l1525
   645                           
   646                           ;intento con servo.c: 121:             pasa=0;
   647  000A08  0E00               	movlw	0
   648  000A0A  6E18               	movwf	_pasa,c
   649                           
   650                           ;intento con servo.c: 122:             contador_de_campanas ();
   651  000A0C  EC7A  F005         	call	_contador_de_campanas	;wreg free
   652                           
   653                           ;intento con servo.c: 123:             mover();
   654  000A10  EC0F  F005         	call	_mover	;wreg free
   655                           
   656                           ;intento con servo.c: 124:             contador_de_campanas ();
   657  000A14  EC7A  F005         	call	_contador_de_campanas	;wreg free
   658                           
   659                           ;intento con servo.c: 125:             mover();
   660  000A18  EC0F  F005         	call	_mover	;wreg free
   661  000A1C  D747               	goto	l1525
   662  000A1E                     __end_of_main:
   663                           	opt callstack 0
   664                           
   665 ;; *************** function _mover *****************
   666 ;; Defined at:
   667 ;;		line 22 in file "intento con servo.c"
   668 ;; Parameters:    Size  Location     Type
   669 ;;		None
   670 ;; Auto vars:     Size  Location     Type
   671 ;;  j               2    9[COMRAM] int 
   672 ;;  j               2    7[COMRAM] int 
   673 ;;  w               1   11[COMRAM] unsigned char 
   674 ;; Return value:  Size  Location     Type
   675 ;;                  1    wreg      void 
   676 ;; Registers used:
   677 ;;		wreg, status,2, status,0
   678 ;; Tracked objects:
   679 ;;		On entry : 0/0
   680 ;;		On exit  : 0/0
   681 ;;		Unchanged: 0/0
   682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   683 ;;      Params:         0       0       0       0       0       0       0       0       0
   684 ;;      Locals:         5       0       0       0       0       0       0       0       0
   685 ;;      Temps:          3       0       0       0       0       0       0       0       0
   686 ;;      Totals:         8       0       0       0       0       0       0       0       0
   687 ;;Total ram usage:        8 bytes
   688 ;; Hardware stack levels used:    1
   689 ;; Hardware stack levels required when called:    2
   690 ;; This function calls:
   691 ;;		Nothing
   692 ;; This function is called by:
   693 ;;		_main
   694 ;; This function uses a non-reentrant model
   695 ;;
   696                           
   697                           	psect	text1
   698  000A1E                     __ptext1:
   699                           	opt callstack 0
   700  000A1E                     _mover:
   701                           	opt callstack 28
   702                           
   703                           ;intento con servo.c: 23:     char w=10;
   704                           
   705                           ;incstack = 0
   706  000A1E  0E0A               	movlw	10
   707  000A20  6E0C               	movwf	mover@w,c
   708                           
   709                           ;intento con servo.c: 24:     for(int j=0;j<w;j++){
   710  000A22  0E00               	movlw	0
   711  000A24  6E09               	movwf	mover@j+1,c
   712  000A26  0E00               	movlw	0
   713  000A28  6E08               	movwf	mover@j,c
   714  000A2A  D01F               	goto	l137
   715  000A2C                     l138:
   716                           
   717                           ;intento con servo.c: 25:         LATBbits.LB0 = 1;
   718  000A2C  808A               	bsf	3978,0,c	;volatile
   719                           
   720                           ;intento con servo.c: 26:         _delay((unsigned long)((700)*(48000000UL/4000000.0)));
   721  000A2E  0E0B               	movlw	11
   722  000A30  6E05               	movwf	??_mover& (0+255),c
   723  000A32  0EE8               	movlw	232
   724  000A34                     u917:
   725  000A34  2EE8               	decfsz	wreg,f,c
   726  000A36  D7FE               	bra	u917
   727  000A38  2E05               	decfsz	??_mover& (0+255),f,c
   728  000A3A  D7FC               	bra	u917
   729                           
   730                           ;intento con servo.c: 27:         LATBbits.LB0 = 0;
   731  000A3C  908A               	bcf	3978,0,c	;volatile
   732                           
   733                           ;intento con servo.c: 28:         _delay((unsigned long)((19)*(48000000UL/4000.0)));
   734  000A3E  0E02               	movlw	2
   735  000A40  6E06               	movwf	(??_mover+1)& (0+255),c
   736  000A42  0E29               	movlw	41
   737  000A44  6E05               	movwf	??_mover& (0+255),c
   738  000A46  0E17               	movlw	23
   739  000A48                     u927:
   740  000A48  2EE8               	decfsz	wreg,f,c
   741  000A4A  D7FE               	bra	u927
   742  000A4C  2E05               	decfsz	??_mover& (0+255),f,c
   743  000A4E  D7FC               	bra	u927
   744  000A50  2E06               	decfsz	(??_mover+1)& (0+255),f,c
   745  000A52  D7FA               	bra	u927
   746  000A54  F000               	nop	
   747                           
   748                           ;intento con servo.c: 29:         _delay((unsigned long)((400)*(48000000UL/4000000.0)));
   749  000A56  0E07               	movlw	7
   750  000A58  6E05               	movwf	??_mover& (0+255),c
   751  000A5A  0E3A               	movlw	58
   752  000A5C                     u937:
   753  000A5C  2EE8               	decfsz	wreg,f,c
   754  000A5E  D7FE               	bra	u937
   755  000A60  2E05               	decfsz	??_mover& (0+255),f,c
   756  000A62  D7FC               	bra	u937
   757  000A64  D000               	nop2	
   758                           
   759                           ;intento con servo.c: 30:     }
   760  000A66  4A08               	infsnz	mover@j,f,c
   761  000A68  2A09               	incf	mover@j+1,f,c
   762  000A6A                     l137:
   763  000A6A  500C               	movf	mover@w,w,c
   764  000A6C  6E05               	movwf	??_mover& (0+255),c
   765  000A6E  6A06               	clrf	(??_mover+1)& (0+255),c
   766  000A70  5005               	movf	??_mover,w,c
   767  000A72  5C08               	subwf	mover@j,w,c
   768  000A74  5009               	movf	mover@j+1,w,c
   769  000A76  0A80               	xorlw	128
   770  000A78  6E07               	movwf	(??_mover+2)& (0+255),c
   771  000A7A  5006               	movf	??_mover+1,w,c
   772  000A7C  0A80               	xorlw	128
   773  000A7E  5807               	subwfb	(??_mover+2)& (0+255),w,c
   774  000A80  A0D8               	btfss	status,0,c
   775  000A82  D7D4               	goto	l138
   776                           
   777                           ;intento con servo.c: 31:     for(int j=0;j<w;j++){
   778  000A84  0E00               	movlw	0
   779  000A86  6E0B               	movwf	mover@j_600+1,c
   780  000A88  0E00               	movlw	0
   781  000A8A  6E0A               	movwf	mover@j_600,c
   782  000A8C  D025               	goto	l140
   783  000A8E                     l141:
   784                           
   785                           ;intento con servo.c: 32:         LATBbits.LB0 = 1;
   786  000A8E  808A               	bsf	3978,0,c	;volatile
   787                           
   788                           ;intento con servo.c: 33:         _delay((unsigned long)((300)*(48000000UL/4000000.0)));
   789  000A90  0E05               	movlw	5
   790  000A92  6E05               	movwf	??_mover& (0+255),c
   791  000A94  0EAC               	movlw	172
   792  000A96                     u947:
   793  000A96  2EE8               	decfsz	wreg,f,c
   794  000A98  D7FE               	bra	u947
   795  000A9A  2E05               	decfsz	??_mover& (0+255),f,c
   796  000A9C  D7FC               	bra	u947
   797                           
   798                           ;intento con servo.c: 34:         _delay((unsigned long)((2)*(48000000UL/4000.0)));
   799  000A9E  0E20               	movlw	32
   800  000AA0  6E05               	movwf	??_mover& (0+255),c
   801  000AA2  0E2A               	movlw	42
   802  000AA4                     u957:
   803  000AA4  2EE8               	decfsz	wreg,f,c
   804  000AA6  D7FE               	bra	u957
   805  000AA8  2E05               	decfsz	??_mover& (0+255),f,c
   806  000AAA  D7FC               	bra	u957
   807                           
   808                           ;intento con servo.c: 35:         LATBbits.LB0 = 0;
   809  000AAC  908A               	bcf	3978,0,c	;volatile
   810                           
   811                           ;intento con servo.c: 36:         _delay((unsigned long)((17)*(48000000UL/4000.0)));
   812  000AAE  0E02               	movlw	2
   813  000AB0  6E06               	movwf	(??_mover+1)& (0+255),c
   814  000AB2  0E09               	movlw	9
   815  000AB4  6E05               	movwf	??_mover& (0+255),c
   816  000AB6  0EEC               	movlw	236
   817  000AB8                     u967:
   818  000AB8  2EE8               	decfsz	wreg,f,c
   819  000ABA  D7FE               	bra	u967
   820  000ABC  2E05               	decfsz	??_mover& (0+255),f,c
   821  000ABE  D7FC               	bra	u967
   822  000AC0  2E06               	decfsz	(??_mover+1)& (0+255),f,c
   823  000AC2  D7FA               	bra	u967
   824  000AC4  D000               	nop2	
   825                           
   826                           ;intento con servo.c: 37:         _delay((unsigned long)((700)*(48000000UL/4000000.0)));
   827  000AC6  0E0B               	movlw	11
   828  000AC8  6E05               	movwf	??_mover& (0+255),c
   829  000ACA  0EE8               	movlw	232
   830  000ACC                     u977:
   831  000ACC  2EE8               	decfsz	wreg,f,c
   832  000ACE  D7FE               	bra	u977
   833  000AD0  2E05               	decfsz	??_mover& (0+255),f,c
   834  000AD2  D7FC               	bra	u977
   835                           
   836                           ;intento con servo.c: 38:     }
   837  000AD4  4A0A               	infsnz	mover@j_600,f,c
   838  000AD6  2A0B               	incf	mover@j_600+1,f,c
   839  000AD8                     l140:
   840  000AD8  500C               	movf	mover@w,w,c
   841  000ADA  6E05               	movwf	??_mover& (0+255),c
   842  000ADC  6A06               	clrf	(??_mover+1)& (0+255),c
   843  000ADE  5005               	movf	??_mover,w,c
   844  000AE0  5C0A               	subwf	mover@j_600,w,c
   845  000AE2  500B               	movf	mover@j_600+1,w,c
   846  000AE4  0A80               	xorlw	128
   847  000AE6  6E07               	movwf	(??_mover+2)& (0+255),c
   848  000AE8  5006               	movf	??_mover+1,w,c
   849  000AEA  0A80               	xorlw	128
   850  000AEC  5807               	subwfb	(??_mover+2)& (0+255),w,c
   851  000AEE  B0D8               	btfsc	status,0,c
   852  000AF0  0012               	return	
   853  000AF2  D7CD               	goto	l141
   854  000AF4                     __end_of_mover:
   855                           	opt callstack 0
   856                           
   857 ;; *************** function _contador_de_campanas *****************
   858 ;; Defined at:
   859 ;;		line 41 in file "intento con servo.c"
   860 ;; Parameters:    Size  Location     Type
   861 ;;		None
   862 ;; Auto vars:     Size  Location     Type
   863 ;;		None
   864 ;; Return value:  Size  Location     Type
   865 ;;                  1    wreg      void 
   866 ;; Registers used:
   867 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   868 ;; Tracked objects:
   869 ;;		On entry : 0/0
   870 ;;		On exit  : 0/0
   871 ;;		Unchanged: 0/0
   872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   873 ;;      Params:         0       0       0       0       0       0       0       0       0
   874 ;;      Locals:         0       0       0       0       0       0       0       0       0
   875 ;;      Temps:          0       0       0       0       0       0       0       0       0
   876 ;;      Totals:         0       0       0       0       0       0       0       0       0
   877 ;;Total ram usage:        0 bytes
   878 ;; Hardware stack levels used:    1
   879 ;; Hardware stack levels required when called:    5
   880 ;; This function calls:
   881 ;;		_ENVIA_CHAR
   882 ;;		_ESCRIBE_MENSAJE
   883 ;;		_POS_CURSOR
   884 ;;		___lwdiv
   885 ;;		___lwmod
   886 ;; This function is called by:
   887 ;;		_main
   888 ;; This function uses a non-reentrant model
   889 ;;
   890                           
   891                           	psect	text2
   892  000AF4                     __ptext2:
   893                           	opt callstack 0
   894  000AF4                     _contador_de_campanas:
   895                           	opt callstack 25
   896                           
   897                           ;intento con servo.c: 42:     campana++;
   898                           
   899                           ;incstack = 0
   900  000AF4  4A13               	infsnz	_campana,f,c
   901  000AF6  2A14               	incf	_campana+1,f,c
   902                           
   903                           ;intento con servo.c: 43:     if(campana==1000){campana=0;}
   904  000AF8  0EE8               	movlw	232
   905  000AFA  1813               	xorwf	_campana,w,c
   906  000AFC  E108               	bnz	l1385
   907  000AFE  0E03               	movlw	3
   908  000B00  1814               	xorwf	_campana+1,w,c
   909  000B02  A4D8               	btfss	status,2,c
   910  000B04  D004               	goto	l1385
   911  000B06  0E00               	movlw	0
   912  000B08  6E14               	movwf	_campana+1,c
   913  000B0A  0E00               	movlw	0
   914  000B0C  6E13               	movwf	_campana,c
   915  000B0E                     l1385:
   916                           
   917                           ;intento con servo.c: 44:     if(campana==1){
   918  000B0E  0413               	decf	_campana,w,c
   919  000B10  1014               	iorwf	_campana+1,w,c
   920  000B12  A4D8               	btfss	status,2,c
   921  000B14  D00E               	goto	l1391
   922                           
   923                           ;intento con servo.c: 45:     POS_CURSOR(2,1);
   924  000B16  0E01               	movlw	1
   925  000B18  6E08               	movwf	POS_CURSOR@columna,c
   926  000B1A  0E02               	movlw	2
   927  000B1C  EC78  F007         	call	_POS_CURSOR
   928                           
   929                           ;intento con servo.c: 46:     ESCRIBE_MENSAJE("001 Campanada ",14);
   930  000B20  0E01               	movlw	low STR_1
   931  000B22  6E08               	movwf	ESCRIBE_MENSAJE@cadena,c
   932  000B24  0E08               	movlw	high STR_1
   933  000B26  6E09               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   934  000B28  0E0E               	movlw	14
   935  000B2A  6E0A               	movwf	ESCRIBE_MENSAJE@tam,c
   936  000B2C  EC5F  F007         	call	_ESCRIBE_MENSAJE	;wreg free
   937                           
   938                           ;intento con servo.c: 47:     }
   939  000B30  0012               	return	
   940  000B32                     l1391:
   941                           
   942                           ;intento con servo.c: 49:     POS_CURSOR(2,1);
   943  000B32  0E01               	movlw	1
   944  000B34  6E08               	movwf	POS_CURSOR@columna,c
   945  000B36  0E02               	movlw	2
   946  000B38  EC78  F007         	call	_POS_CURSOR
   947                           
   948                           ;intento con servo.c: 50:     ENVIA_CHAR(campana/100+'0');
   949  000B3C  C013  F00A         	movff	_campana,___lwdiv@dividend
   950  000B40  C014  F00B         	movff	_campana+1,___lwdiv@dividend+1
   951  000B44  0E00               	movlw	0
   952  000B46  6E0D               	movwf	___lwdiv@divisor+1,c
   953  000B48  0E64               	movlw	100
   954  000B4A  6E0C               	movwf	___lwdiv@divisor,c
   955  000B4C  ECE1  F006         	call	___lwdiv	;wreg free
   956  000B50  500A               	movf	?___lwdiv,w,c
   957  000B52  0F30               	addlw	48
   958  000B54  EC2B  F007         	call	_ENVIA_CHAR
   959                           
   960                           ;intento con servo.c: 51:     ENVIA_CHAR((campana%100)/10+'0');
   961  000B58  0E00               	movlw	0
   962  000B5A  6E08               	movwf	___lwmod@divisor+1,c
   963  000B5C  0E64               	movlw	100
   964  000B5E  6E07               	movwf	___lwmod@divisor,c
   965  000B60  C013  F005         	movff	_campana,___lwmod@dividend
   966  000B64  C014  F006         	movff	_campana+1,___lwmod@dividend+1
   967  000B68  EC0A  F007         	call	___lwmod	;wreg free
   968  000B6C  C005  F00A         	movff	?___lwmod,___lwdiv@dividend
   969  000B70  C006  F00B         	movff	?___lwmod+1,___lwdiv@dividend+1
   970  000B74  0E00               	movlw	0
   971  000B76  6E0D               	movwf	___lwdiv@divisor+1,c
   972  000B78  0E0A               	movlw	10
   973  000B7A  6E0C               	movwf	___lwdiv@divisor,c
   974  000B7C  ECE1  F006         	call	___lwdiv	;wreg free
   975  000B80  500A               	movf	?___lwdiv,w,c
   976  000B82  0F30               	addlw	48
   977  000B84  EC2B  F007         	call	_ENVIA_CHAR
   978                           
   979                           ;intento con servo.c: 52:     ENVIA_CHAR((campana%10)+'0');
   980  000B88  C013  F005         	movff	_campana,___lwmod@dividend
   981  000B8C  C014  F006         	movff	_campana+1,___lwmod@dividend+1
   982  000B90  0E00               	movlw	0
   983  000B92  6E08               	movwf	___lwmod@divisor+1,c
   984  000B94  0E0A               	movlw	10
   985  000B96  6E07               	movwf	___lwmod@divisor,c
   986  000B98  EC0A  F007         	call	___lwmod	;wreg free
   987  000B9C  5005               	movf	?___lwmod,w,c
   988  000B9E  0F30               	addlw	48
   989  000BA0  EC2B  F007         	call	_ENVIA_CHAR
   990                           
   991                           ;intento con servo.c: 53:     ESCRIBE_MENSAJE(" Campanadas",11);
   992  000BA4  0E13               	movlw	low (STR_4+3)
   993  000BA6  6E08               	movwf	ESCRIBE_MENSAJE@cadena,c
   994  000BA8  0E08               	movlw	high (STR_4+3)
   995  000BAA  6E09               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   996  000BAC  0E0B               	movlw	11
   997  000BAE  6E0A               	movwf	ESCRIBE_MENSAJE@tam,c
   998  000BB0  EC5F  F007         	call	_ESCRIBE_MENSAJE	;wreg free
   999  000BB4  0012               	return		;funcret
  1000  000BB6                     __end_of_contador_de_campanas:
  1001                           	opt callstack 0
  1002                           
  1003 ;; *************** function ___lwmod *****************
  1004 ;; Defined at:
  1005 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lwmod.c"
  1006 ;; Parameters:    Size  Location     Type
  1007 ;;  dividend        2    4[COMRAM] unsigned int 
  1008 ;;  divisor         2    6[COMRAM] unsigned int 
  1009 ;; Auto vars:     Size  Location     Type
  1010 ;;  counter         1    8[COMRAM] unsigned char 
  1011 ;; Return value:  Size  Location     Type
  1012 ;;                  2    4[COMRAM] unsigned int 
  1013 ;; Registers used:
  1014 ;;		wreg, status,2, status,0
  1015 ;; Tracked objects:
  1016 ;;		On entry : 0/0
  1017 ;;		On exit  : 0/0
  1018 ;;		Unchanged: 0/0
  1019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1020 ;;      Params:         4       0       0       0       0       0       0       0       0
  1021 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1022 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1023 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1024 ;;Total ram usage:        5 bytes
  1025 ;; Hardware stack levels used:    1
  1026 ;; Hardware stack levels required when called:    2
  1027 ;; This function calls:
  1028 ;;		Nothing
  1029 ;; This function is called by:
  1030 ;;		_contador_de_campanas
  1031 ;;		_main
  1032 ;; This function uses a non-reentrant model
  1033 ;;
  1034                           
  1035                           	psect	text3
  1036  000E14                     __ptext3:
  1037                           	opt callstack 0
  1038  000E14                     ___lwmod:
  1039                           	opt callstack 27
  1040                           
  1041                           ;incstack = 0
  1042  000E14  5007               	movf	___lwmod@divisor,w,c
  1043  000E16  1008               	iorwf	___lwmod@divisor+1,w,c
  1044  000E18  B4D8               	btfsc	status,2,c
  1045  000E1A  D018               	goto	l687
  1046  000E1C  0E01               	movlw	1
  1047  000E1E  6E09               	movwf	___lwmod@counter,c
  1048  000E20  D004               	goto	l1369
  1049  000E22                     l1367:
  1050  000E22  90D8               	bcf	status,0,c
  1051  000E24  3607               	rlcf	___lwmod@divisor,f,c
  1052  000E26  3608               	rlcf	___lwmod@divisor+1,f,c
  1053  000E28  2A09               	incf	___lwmod@counter,f,c
  1054  000E2A                     l1369:
  1055  000E2A  AE08               	btfss	___lwmod@divisor+1,7,c
  1056  000E2C  D7FA               	goto	l1367
  1057  000E2E                     u610:
  1058  000E2E  5007               	movf	___lwmod@divisor,w,c
  1059  000E30  5C05               	subwf	___lwmod@dividend,w,c
  1060  000E32  5008               	movf	___lwmod@divisor+1,w,c
  1061  000E34  5806               	subwfb	___lwmod@dividend+1,w,c
  1062  000E36  A0D8               	btfss	status,0,c
  1063  000E38  D004               	goto	l1375
  1064  000E3A  5007               	movf	___lwmod@divisor,w,c
  1065  000E3C  5E05               	subwf	___lwmod@dividend,f,c
  1066  000E3E  5008               	movf	___lwmod@divisor+1,w,c
  1067  000E40  5A06               	subwfb	___lwmod@dividend+1,f,c
  1068  000E42                     l1375:
  1069  000E42  90D8               	bcf	status,0,c
  1070  000E44  3208               	rrcf	___lwmod@divisor+1,f,c
  1071  000E46  3207               	rrcf	___lwmod@divisor,f,c
  1072  000E48  2E09               	decfsz	___lwmod@counter,f,c
  1073  000E4A  D7F1               	goto	u610
  1074  000E4C                     l687:
  1075  000E4C  C005  F005         	movff	___lwmod@dividend,?___lwmod
  1076  000E50  C006  F006         	movff	___lwmod@dividend+1,?___lwmod+1
  1077  000E54  0012               	return		;funcret
  1078  000E56                     __end_of___lwmod:
  1079                           	opt callstack 0
  1080                           
  1081 ;; *************** function ___lwdiv *****************
  1082 ;; Defined at:
  1083 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lwdiv.c"
  1084 ;; Parameters:    Size  Location     Type
  1085 ;;  dividend        2    9[COMRAM] unsigned int 
  1086 ;;  divisor         2   11[COMRAM] unsigned int 
  1087 ;; Auto vars:     Size  Location     Type
  1088 ;;  quotient        2   13[COMRAM] unsigned int 
  1089 ;;  counter         1   15[COMRAM] unsigned char 
  1090 ;; Return value:  Size  Location     Type
  1091 ;;                  2    9[COMRAM] unsigned int 
  1092 ;; Registers used:
  1093 ;;		wreg, status,2, status,0
  1094 ;; Tracked objects:
  1095 ;;		On entry : 0/0
  1096 ;;		On exit  : 0/0
  1097 ;;		Unchanged: 0/0
  1098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1099 ;;      Params:         4       0       0       0       0       0       0       0       0
  1100 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1101 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1102 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1103 ;;Total ram usage:        7 bytes
  1104 ;; Hardware stack levels used:    1
  1105 ;; Hardware stack levels required when called:    2
  1106 ;; This function calls:
  1107 ;;		Nothing
  1108 ;; This function is called by:
  1109 ;;		_contador_de_campanas
  1110 ;;		_main
  1111 ;; This function uses a non-reentrant model
  1112 ;;
  1113                           
  1114                           	psect	text4
  1115  000DC2                     __ptext4:
  1116                           	opt callstack 0
  1117  000DC2                     ___lwdiv:
  1118                           	opt callstack 27
  1119                           
  1120                           ;incstack = 0
  1121  000DC2  0E00               	movlw	0
  1122  000DC4  6E0F               	movwf	___lwdiv@quotient+1,c
  1123  000DC6  0E00               	movlw	0
  1124  000DC8  6E0E               	movwf	___lwdiv@quotient,c
  1125  000DCA  500C               	movf	___lwdiv@divisor,w,c
  1126  000DCC  100D               	iorwf	___lwdiv@divisor+1,w,c
  1127  000DCE  B4D8               	btfsc	status,2,c
  1128  000DD0  D01C               	goto	l677
  1129  000DD2  0E01               	movlw	1
  1130  000DD4  6E10               	movwf	___lwdiv@counter,c
  1131  000DD6  D004               	goto	l1349
  1132  000DD8                     l1347:
  1133  000DD8  90D8               	bcf	status,0,c
  1134  000DDA  360C               	rlcf	___lwdiv@divisor,f,c
  1135  000DDC  360D               	rlcf	___lwdiv@divisor+1,f,c
  1136  000DDE  2A10               	incf	___lwdiv@counter,f,c
  1137  000DE0                     l1349:
  1138  000DE0  AE0D               	btfss	___lwdiv@divisor+1,7,c
  1139  000DE2  D7FA               	goto	l1347
  1140  000DE4                     u580:
  1141  000DE4  90D8               	bcf	status,0,c
  1142  000DE6  360E               	rlcf	___lwdiv@quotient,f,c
  1143  000DE8  360F               	rlcf	___lwdiv@quotient+1,f,c
  1144  000DEA  500C               	movf	___lwdiv@divisor,w,c
  1145  000DEC  5C0A               	subwf	___lwdiv@dividend,w,c
  1146  000DEE  500D               	movf	___lwdiv@divisor+1,w,c
  1147  000DF0  580B               	subwfb	___lwdiv@dividend+1,w,c
  1148  000DF2  A0D8               	btfss	status,0,c
  1149  000DF4  D005               	goto	l1359
  1150  000DF6  500C               	movf	___lwdiv@divisor,w,c
  1151  000DF8  5E0A               	subwf	___lwdiv@dividend,f,c
  1152  000DFA  500D               	movf	___lwdiv@divisor+1,w,c
  1153  000DFC  5A0B               	subwfb	___lwdiv@dividend+1,f,c
  1154  000DFE  800E               	bsf	___lwdiv@quotient,0,c
  1155  000E00                     l1359:
  1156  000E00  90D8               	bcf	status,0,c
  1157  000E02  320D               	rrcf	___lwdiv@divisor+1,f,c
  1158  000E04  320C               	rrcf	___lwdiv@divisor,f,c
  1159  000E06  2E10               	decfsz	___lwdiv@counter,f,c
  1160  000E08  D7ED               	goto	u580
  1161  000E0A                     l677:
  1162  000E0A  C00E  F00A         	movff	___lwdiv@quotient,?___lwdiv
  1163  000E0E  C00F  F00B         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1164  000E12  0012               	return		;funcret
  1165  000E14                     __end_of___lwdiv:
  1166                           	opt callstack 0
  1167                           
  1168 ;; *************** function _POS_CURSOR *****************
  1169 ;; Defined at:
  1170 ;;		line 6 in file "LCD.c"
  1171 ;; Parameters:    Size  Location     Type
  1172 ;;  fila            1    wreg     unsigned char 
  1173 ;;  columna         1    7[COMRAM] unsigned char 
  1174 ;; Auto vars:     Size  Location     Type
  1175 ;;  fila            1    8[COMRAM] unsigned char 
  1176 ;; Return value:  Size  Location     Type
  1177 ;;                  1    wreg      void 
  1178 ;; Registers used:
  1179 ;;		wreg, status,2, status,0, cstack
  1180 ;; Tracked objects:
  1181 ;;		On entry : 0/0
  1182 ;;		On exit  : 0/0
  1183 ;;		Unchanged: 0/0
  1184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1185 ;;      Params:         1       0       0       0       0       0       0       0       0
  1186 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1187 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1188 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1189 ;;Total ram usage:        2 bytes
  1190 ;; Hardware stack levels used:    1
  1191 ;; Hardware stack levels required when called:    4
  1192 ;; This function calls:
  1193 ;;		_ENVIA_LCD_CMD
  1194 ;; This function is called by:
  1195 ;;		_contador_de_campanas
  1196 ;;		_main
  1197 ;; This function uses a non-reentrant model
  1198 ;;
  1199                           
  1200                           	psect	text5
  1201  000EF0                     __ptext5:
  1202                           	opt callstack 0
  1203  000EF0                     _POS_CURSOR:
  1204                           	opt callstack 25
  1205                           
  1206                           ;incstack = 0
  1207                           ;POS_CURSOR@fila stored from wreg
  1208  000EF0  6E09               	movwf	POS_CURSOR@fila,c
  1209                           
  1210                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
  1211  000EF2  0409               	decf	POS_CURSOR@fila,w,c
  1212  000EF4  A4D8               	btfss	status,2,c
  1213  000EF6  D005               	goto	l1329
  1214                           
  1215                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
  1216  000EF8  5008               	movf	POS_CURSOR@columna,w,c
  1217  000EFA  0F80               	addlw	128
  1218  000EFC  EC45  F007         	call	_ENVIA_LCD_CMD
  1219                           
  1220                           ;LCD.c: 11:  }
  1221  000F00  0012               	return	
  1222  000F02                     l1329:
  1223  000F02  0E02               	movlw	2
  1224  000F04  1809               	xorwf	POS_CURSOR@fila,w,c
  1225  000F06  A4D8               	btfss	status,2,c
  1226  000F08  0012               	return	
  1227                           
  1228                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
  1229  000F0A  5008               	movf	POS_CURSOR@columna,w,c
  1230  000F0C  0FC0               	addlw	192
  1231  000F0E  EC45  F007         	call	_ENVIA_LCD_CMD
  1232  000F12  0012               	return		;funcret
  1233  000F14                     __end_of_POS_CURSOR:
  1234                           	opt callstack 0
  1235                           
  1236 ;; *************** function _ESCRIBE_MENSAJE *****************
  1237 ;; Defined at:
  1238 ;;		line 41 in file "LCD.c"
  1239 ;; Parameters:    Size  Location     Type
  1240 ;;  cadena          2    7[COMRAM] PTR const unsigned char 
  1241 ;;		 -> STR_4(15), STR_3(7), STR_2(12), STR_1(15), 
  1242 ;;  tam             1    9[COMRAM] unsigned char 
  1243 ;; Auto vars:     Size  Location     Type
  1244 ;;  i               1   12[COMRAM] unsigned char 
  1245 ;; Return value:  Size  Location     Type
  1246 ;;                  1    wreg      void 
  1247 ;; Registers used:
  1248 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1249 ;; Tracked objects:
  1250 ;;		On entry : 0/0
  1251 ;;		On exit  : 0/0
  1252 ;;		Unchanged: 0/0
  1253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1254 ;;      Params:         3       0       0       0       0       0       0       0       0
  1255 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1256 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1257 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1258 ;;Total ram usage:        6 bytes
  1259 ;; Hardware stack levels used:    1
  1260 ;; Hardware stack levels required when called:    4
  1261 ;; This function calls:
  1262 ;;		_ENVIA_CHAR
  1263 ;; This function is called by:
  1264 ;;		_contador_de_campanas
  1265 ;;		_main
  1266 ;; This function uses a non-reentrant model
  1267 ;;
  1268                           
  1269                           	psect	text6
  1270  000EBE                     __ptext6:
  1271                           	opt callstack 0
  1272  000EBE                     _ESCRIBE_MENSAJE:
  1273                           	opt callstack 25
  1274                           
  1275                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
  1276                           
  1277                           ;incstack = 0
  1278  000EBE  0E00               	movlw	0
  1279  000EC0  6E0D               	movwf	ESCRIBE_MENSAJE@i,c
  1280                           
  1281                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
  1282  000EC2  0E00               	movlw	0
  1283  000EC4  6E0D               	movwf	ESCRIBE_MENSAJE@i,c
  1284  000EC6  D00F               	goto	l1339
  1285  000EC8                     l1335:
  1286                           
  1287                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
  1288  000EC8  500D               	movf	ESCRIBE_MENSAJE@i,w,c
  1289  000ECA  2408               	addwf	ESCRIBE_MENSAJE@cadena,w,c
  1290  000ECC  6E0B               	movwf	??_ESCRIBE_MENSAJE& (0+255),c
  1291  000ECE  0E00               	movlw	0
  1292  000ED0  2009               	addwfc	ESCRIBE_MENSAJE@cadena+1,w,c
  1293  000ED2  6E0C               	movwf	(??_ESCRIBE_MENSAJE+1)& (0+255),c
  1294  000ED4  C00B  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
  1295  000ED8  C00C  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
  1296  000EDC                     	if	0	;tblptru may be non-zero
  1297  000EDC                     	endif
  1298  000EDC                     	if	0	;tblptru may be non-zero
  1299  000EDC                     	endif
  1300  000EDC  0008               	tblrd		*
  1301  000EDE  50F5               	movf	tablat,w,c
  1302  000EE0  EC2B  F007         	call	_ENVIA_CHAR
  1303                           
  1304                           ;LCD.c: 47:  }
  1305  000EE4  2A0D               	incf	ESCRIBE_MENSAJE@i,f,c
  1306  000EE6                     l1339:
  1307  000EE6  500A               	movf	ESCRIBE_MENSAJE@tam,w,c
  1308  000EE8  5C0D               	subwf	ESCRIBE_MENSAJE@i,w,c
  1309  000EEA  B0D8               	btfsc	status,0,c
  1310  000EEC  0012               	return	
  1311  000EEE  D7EC               	goto	l1335
  1312  000EF0                     __end_of_ESCRIBE_MENSAJE:
  1313                           	opt callstack 0
  1314                           
  1315 ;; *************** function _ENVIA_CHAR *****************
  1316 ;; Defined at:
  1317 ;;		line 50 in file "LCD.c"
  1318 ;; Parameters:    Size  Location     Type
  1319 ;;  dato            1    wreg     unsigned char 
  1320 ;; Auto vars:     Size  Location     Type
  1321 ;;  dato            1    5[COMRAM] unsigned char 
  1322 ;;  aux             1    6[COMRAM] unsigned char 
  1323 ;; Return value:  Size  Location     Type
  1324 ;;                  1    wreg      void 
  1325 ;; Registers used:
  1326 ;;		wreg, status,2, status,0, cstack
  1327 ;; Tracked objects:
  1328 ;;		On entry : 0/0
  1329 ;;		On exit  : 0/0
  1330 ;;		Unchanged: 0/0
  1331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1332 ;;      Params:         0       0       0       0       0       0       0       0       0
  1333 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1334 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1335 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1336 ;;Total ram usage:        2 bytes
  1337 ;; Hardware stack levels used:    1
  1338 ;; Hardware stack levels required when called:    3
  1339 ;; This function calls:
  1340 ;;		_ENVIA_NIBBLE
  1341 ;;		_LEER_LCD
  1342 ;; This function is called by:
  1343 ;;		_ESCRIBE_MENSAJE
  1344 ;;		_contador_de_campanas
  1345 ;;		_main
  1346 ;;		_GENERACARACTER
  1347 ;; This function uses a non-reentrant model
  1348 ;;
  1349                           
  1350                           	psect	text7
  1351  000E56                     __ptext7:
  1352                           	opt callstack 0
  1353  000E56                     _ENVIA_CHAR:
  1354                           	opt callstack 25
  1355                           
  1356                           ;incstack = 0
  1357                           ;ENVIA_CHAR@dato stored from wreg
  1358  000E56  6E06               	movwf	ENVIA_CHAR@dato,c
  1359                           
  1360                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
  1361  000E58  808C               	bsf	3980,0,c	;volatile
  1362                           
  1363                           ;LCD.c: 54:  LEER_LCD();
  1364  000E5A  EC55  F006         	call	_LEER_LCD	;wreg free
  1365                           
  1366                           ;LCD.c: 55:  TRISD = 0x00;
  1367  000E5E  0E00               	movlw	0
  1368  000E60  6E95               	movwf	3989,c	;volatile
  1369                           
  1370                           ;LCD.c: 56:         _delay(1200);
  1371  000E62  0EF0               	movlw	240
  1372  000E64                     u987:
  1373  000E64  D000               	nop2	
  1374  000E66  2EE8               	decfsz	wreg,f,c
  1375  000E68  D7FD               	bra	u987
  1376                           
  1377                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
  1378  000E6A  928C               	bcf	3980,1,c	;volatile
  1379                           
  1380                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
  1381  000E6C  948C               	bcf	3980,2,c	;volatile
  1382                           
  1383                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
  1384  000E6E  808C               	bsf	3980,0,c	;volatile
  1385                           
  1386                           ;LCD.c: 61:  aux = dato & 0xF0;
  1387  000E70  5006               	movf	ENVIA_CHAR@dato,w,c
  1388  000E72  0BF0               	andlw	240
  1389  000E74  6E07               	movwf	ENVIA_CHAR@aux,c
  1390                           
  1391                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
  1392  000E76  5007               	movf	ENVIA_CHAR@aux,w,c
  1393  000E78  ECA7  F007         	call	_ENVIA_NIBBLE
  1394                           
  1395                           ;LCD.c: 63:  aux = dato << 4;
  1396  000E7C  3806               	swapf	ENVIA_CHAR@dato,w,c
  1397  000E7E  0BF0               	andlw	240
  1398  000E80  6E07               	movwf	ENVIA_CHAR@aux,c
  1399                           
  1400                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
  1401  000E82  5007               	movf	ENVIA_CHAR@aux,w,c
  1402  000E84  ECA7  F007         	call	_ENVIA_NIBBLE
  1403  000E88  0012               	return		;funcret
  1404  000E8A                     __end_of_ENVIA_CHAR:
  1405                           	opt callstack 0
  1406                           
  1407 ;; *************** function ___awmod *****************
  1408 ;; Defined at:
  1409 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awmod.c"
  1410 ;; Parameters:    Size  Location     Type
  1411 ;;  dividend        2    4[COMRAM] int 
  1412 ;;  divisor         2    6[COMRAM] int 
  1413 ;; Auto vars:     Size  Location     Type
  1414 ;;  sign            1    9[COMRAM] unsigned char 
  1415 ;;  counter         1    8[COMRAM] unsigned char 
  1416 ;; Return value:  Size  Location     Type
  1417 ;;                  2    4[COMRAM] int 
  1418 ;; Registers used:
  1419 ;;		wreg, status,2, status,0
  1420 ;; Tracked objects:
  1421 ;;		On entry : 0/0
  1422 ;;		On exit  : 0/0
  1423 ;;		Unchanged: 0/0
  1424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1425 ;;      Params:         4       0       0       0       0       0       0       0       0
  1426 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1427 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1428 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1429 ;;Total ram usage:        6 bytes
  1430 ;; Hardware stack levels used:    1
  1431 ;; Hardware stack levels required when called:    2
  1432 ;; This function calls:
  1433 ;;		Nothing
  1434 ;; This function is called by:
  1435 ;;		_main
  1436 ;; This function uses a non-reentrant model
  1437 ;;
  1438                           
  1439                           	psect	text8
  1440  000C3A                     __ptext8:
  1441                           	opt callstack 0
  1442  000C3A                     ___awmod:
  1443                           	opt callstack 28
  1444                           
  1445                           ;incstack = 0
  1446  000C3A  0E00               	movlw	0
  1447  000C3C  6E0A               	movwf	___awmod@sign,c
  1448  000C3E  AE06               	btfss	___awmod@dividend+1,7,c
  1449  000C40  D006               	goto	l1447
  1450  000C42  6C05               	negf	___awmod@dividend,c
  1451  000C44  1E06               	comf	___awmod@dividend+1,f,c
  1452  000C46  B0D8               	btfsc	status,0,c
  1453  000C48  2A06               	incf	___awmod@dividend+1,f,c
  1454  000C4A  0E01               	movlw	1
  1455  000C4C  6E0A               	movwf	___awmod@sign,c
  1456  000C4E                     l1447:
  1457  000C4E  AE08               	btfss	___awmod@divisor+1,7,c
  1458  000C50  D004               	goto	l1451
  1459  000C52  6C07               	negf	___awmod@divisor,c
  1460  000C54  1E08               	comf	___awmod@divisor+1,f,c
  1461  000C56  B0D8               	btfsc	status,0,c
  1462  000C58  2A08               	incf	___awmod@divisor+1,f,c
  1463  000C5A                     l1451:
  1464  000C5A  5007               	movf	___awmod@divisor,w,c
  1465  000C5C  1008               	iorwf	___awmod@divisor+1,w,c
  1466  000C5E  B4D8               	btfsc	status,2,c
  1467  000C60  D018               	goto	l1467
  1468  000C62  0E01               	movlw	1
  1469  000C64  6E09               	movwf	___awmod@counter,c
  1470  000C66  D004               	goto	l1457
  1471  000C68                     l1455:
  1472  000C68  90D8               	bcf	status,0,c
  1473  000C6A  3607               	rlcf	___awmod@divisor,f,c
  1474  000C6C  3608               	rlcf	___awmod@divisor+1,f,c
  1475  000C6E  2A09               	incf	___awmod@counter,f,c
  1476  000C70                     l1457:
  1477  000C70  AE08               	btfss	___awmod@divisor+1,7,c
  1478  000C72  D7FA               	goto	l1455
  1479  000C74                     u740:
  1480  000C74  5007               	movf	___awmod@divisor,w,c
  1481  000C76  5C05               	subwf	___awmod@dividend,w,c
  1482  000C78  5008               	movf	___awmod@divisor+1,w,c
  1483  000C7A  5806               	subwfb	___awmod@dividend+1,w,c
  1484  000C7C  A0D8               	btfss	status,0,c
  1485  000C7E  D004               	goto	l1463
  1486  000C80  5007               	movf	___awmod@divisor,w,c
  1487  000C82  5E05               	subwf	___awmod@dividend,f,c
  1488  000C84  5008               	movf	___awmod@divisor+1,w,c
  1489  000C86  5A06               	subwfb	___awmod@dividend+1,f,c
  1490  000C88                     l1463:
  1491  000C88  90D8               	bcf	status,0,c
  1492  000C8A  3208               	rrcf	___awmod@divisor+1,f,c
  1493  000C8C  3207               	rrcf	___awmod@divisor,f,c
  1494  000C8E  2E09               	decfsz	___awmod@counter,f,c
  1495  000C90  D7F1               	goto	u740
  1496  000C92                     l1467:
  1497  000C92  500A               	movf	___awmod@sign,w,c
  1498  000C94  B4D8               	btfsc	status,2,c
  1499  000C96  D004               	goto	l1471
  1500  000C98  6C05               	negf	___awmod@dividend,c
  1501  000C9A  1E06               	comf	___awmod@dividend+1,f,c
  1502  000C9C  B0D8               	btfsc	status,0,c
  1503  000C9E  2A06               	incf	___awmod@dividend+1,f,c
  1504  000CA0                     l1471:
  1505  000CA0  C005  F005         	movff	___awmod@dividend,?___awmod
  1506  000CA4  C006  F006         	movff	___awmod@dividend+1,?___awmod+1
  1507  000CA8  0012               	return		;funcret
  1508  000CAA                     __end_of___awmod:
  1509                           	opt callstack 0
  1510                           
  1511 ;; *************** function ___awdiv *****************
  1512 ;; Defined at:
  1513 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  1514 ;; Parameters:    Size  Location     Type
  1515 ;;  dividend        2    4[COMRAM] int 
  1516 ;;  divisor         2    6[COMRAM] int 
  1517 ;; Auto vars:     Size  Location     Type
  1518 ;;  quotient        2   10[COMRAM] int 
  1519 ;;  sign            1    9[COMRAM] unsigned char 
  1520 ;;  counter         1    8[COMRAM] unsigned char 
  1521 ;; Return value:  Size  Location     Type
  1522 ;;                  2    4[COMRAM] int 
  1523 ;; Registers used:
  1524 ;;		wreg, status,2, status,0
  1525 ;; Tracked objects:
  1526 ;;		On entry : 0/0
  1527 ;;		On exit  : 0/0
  1528 ;;		Unchanged: 0/0
  1529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1530 ;;      Params:         4       0       0       0       0       0       0       0       0
  1531 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1532 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1533 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1534 ;;Total ram usage:        8 bytes
  1535 ;; Hardware stack levels used:    1
  1536 ;; Hardware stack levels required when called:    2
  1537 ;; This function calls:
  1538 ;;		Nothing
  1539 ;; This function is called by:
  1540 ;;		_main
  1541 ;; This function uses a non-reentrant model
  1542 ;;
  1543                           
  1544                           	psect	text9
  1545  000BB6                     __ptext9:
  1546                           	opt callstack 0
  1547  000BB6                     ___awdiv:
  1548                           	opt callstack 28
  1549                           
  1550                           ;incstack = 0
  1551  000BB6  0E00               	movlw	0
  1552  000BB8  6E0A               	movwf	___awdiv@sign,c
  1553  000BBA  AE08               	btfss	___awdiv@divisor+1,7,c
  1554  000BBC  D006               	goto	l1403
  1555  000BBE  6C07               	negf	___awdiv@divisor,c
  1556  000BC0  1E08               	comf	___awdiv@divisor+1,f,c
  1557  000BC2  B0D8               	btfsc	status,0,c
  1558  000BC4  2A08               	incf	___awdiv@divisor+1,f,c
  1559  000BC6  0E01               	movlw	1
  1560  000BC8  6E0A               	movwf	___awdiv@sign,c
  1561  000BCA                     l1403:
  1562  000BCA  AE06               	btfss	___awdiv@dividend+1,7,c
  1563  000BCC  D006               	goto	l1409
  1564  000BCE  6C05               	negf	___awdiv@dividend,c
  1565  000BD0  1E06               	comf	___awdiv@dividend+1,f,c
  1566  000BD2  B0D8               	btfsc	status,0,c
  1567  000BD4  2A06               	incf	___awdiv@dividend+1,f,c
  1568  000BD6  0E01               	movlw	1
  1569  000BD8  1A0A               	xorwf	___awdiv@sign,f,c
  1570  000BDA                     l1409:
  1571  000BDA  0E00               	movlw	0
  1572  000BDC  6E0C               	movwf	___awdiv@quotient+1,c
  1573  000BDE  0E00               	movlw	0
  1574  000BE0  6E0B               	movwf	___awdiv@quotient,c
  1575  000BE2  5007               	movf	___awdiv@divisor,w,c
  1576  000BE4  1008               	iorwf	___awdiv@divisor+1,w,c
  1577  000BE6  B4D8               	btfsc	status,2,c
  1578  000BE8  D01C               	goto	l1431
  1579  000BEA  0E01               	movlw	1
  1580  000BEC  6E09               	movwf	___awdiv@counter,c
  1581  000BEE  D004               	goto	l1417
  1582  000BF0                     l1415:
  1583  000BF0  90D8               	bcf	status,0,c
  1584  000BF2  3607               	rlcf	___awdiv@divisor,f,c
  1585  000BF4  3608               	rlcf	___awdiv@divisor+1,f,c
  1586  000BF6  2A09               	incf	___awdiv@counter,f,c
  1587  000BF8                     l1417:
  1588  000BF8  AE08               	btfss	___awdiv@divisor+1,7,c
  1589  000BFA  D7FA               	goto	l1415
  1590  000BFC                     u680:
  1591  000BFC  90D8               	bcf	status,0,c
  1592  000BFE  360B               	rlcf	___awdiv@quotient,f,c
  1593  000C00  360C               	rlcf	___awdiv@quotient+1,f,c
  1594  000C02  5007               	movf	___awdiv@divisor,w,c
  1595  000C04  5C05               	subwf	___awdiv@dividend,w,c
  1596  000C06  5008               	movf	___awdiv@divisor+1,w,c
  1597  000C08  5806               	subwfb	___awdiv@dividend+1,w,c
  1598  000C0A  A0D8               	btfss	status,0,c
  1599  000C0C  D005               	goto	l1427
  1600  000C0E  5007               	movf	___awdiv@divisor,w,c
  1601  000C10  5E05               	subwf	___awdiv@dividend,f,c
  1602  000C12  5008               	movf	___awdiv@divisor+1,w,c
  1603  000C14  5A06               	subwfb	___awdiv@dividend+1,f,c
  1604  000C16  800B               	bsf	___awdiv@quotient,0,c
  1605  000C18                     l1427:
  1606  000C18  90D8               	bcf	status,0,c
  1607  000C1A  3208               	rrcf	___awdiv@divisor+1,f,c
  1608  000C1C  3207               	rrcf	___awdiv@divisor,f,c
  1609  000C1E  2E09               	decfsz	___awdiv@counter,f,c
  1610  000C20  D7ED               	goto	u680
  1611  000C22                     l1431:
  1612  000C22  500A               	movf	___awdiv@sign,w,c
  1613  000C24  B4D8               	btfsc	status,2,c
  1614  000C26  D004               	goto	l1435
  1615  000C28  6C0B               	negf	___awdiv@quotient,c
  1616  000C2A  1E0C               	comf	___awdiv@quotient+1,f,c
  1617  000C2C  B0D8               	btfsc	status,0,c
  1618  000C2E  2A0C               	incf	___awdiv@quotient+1,f,c
  1619  000C30                     l1435:
  1620  000C30  C00B  F005         	movff	___awdiv@quotient,?___awdiv
  1621  000C34  C00C  F006         	movff	___awdiv@quotient+1,?___awdiv+1
  1622  000C38  0012               	return		;funcret
  1623  000C3A                     __end_of___awdiv:
  1624                           	opt callstack 0
  1625                           
  1626 ;; *************** function _LCD_CONFIG *****************
  1627 ;; Defined at:
  1628 ;;		line 72 in file "LCD.c"
  1629 ;; Parameters:    Size  Location     Type
  1630 ;;		None
  1631 ;; Auto vars:     Size  Location     Type
  1632 ;;		None
  1633 ;; Return value:  Size  Location     Type
  1634 ;;                  1    wreg      void 
  1635 ;; Registers used:
  1636 ;;		wreg, status,2, status,0, cstack
  1637 ;; Tracked objects:
  1638 ;;		On entry : 0/0
  1639 ;;		On exit  : 0/0
  1640 ;;		Unchanged: 0/0
  1641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1642 ;;      Params:         0       0       0       0       0       0       0       0       0
  1643 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1644 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1645 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1646 ;;Total ram usage:        1 bytes
  1647 ;; Hardware stack levels used:    1
  1648 ;; Hardware stack levels required when called:    4
  1649 ;; This function calls:
  1650 ;;		_ENVIA_LCD_CMD
  1651 ;;		_ENVIA_NIBBLE
  1652 ;; This function is called by:
  1653 ;;		_main
  1654 ;; This function uses a non-reentrant model
  1655 ;;
  1656                           
  1657                           	psect	text10
  1658  000D0C                     __ptext10:
  1659                           	opt callstack 0
  1660  000D0C                     _LCD_CONFIG:
  1661                           	opt callstack 26
  1662                           
  1663                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
  1664                           
  1665                           ;incstack = 0
  1666  000D0C  908C               	bcf	3980,0,c	;volatile
  1667                           
  1668                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
  1669  000D0E  928C               	bcf	3980,1,c	;volatile
  1670                           
  1671                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
  1672  000D10  0E30               	movlw	48
  1673  000D12  ECA7  F007         	call	_ENVIA_NIBBLE
  1674                           
  1675                           ;LCD.c: 77:         _delay(24000);
  1676  000D16  0E20               	movlw	32
  1677  000D18  6E08               	movwf	??_LCD_CONFIG& (0+255),c
  1678  000D1A  0E2A               	movlw	42
  1679  000D1C                     u997:
  1680  000D1C  2EE8               	decfsz	wreg,f,c
  1681  000D1E  D7FE               	bra	u997
  1682  000D20  2E08               	decfsz	??_LCD_CONFIG& (0+255),f,c
  1683  000D22  D7FC               	bra	u997
  1684                           
  1685                           ;LCD.c: 78:         _delay(24000);
  1686  000D24  0E20               	movlw	32
  1687  000D26  6E08               	movwf	??_LCD_CONFIG& (0+255),c
  1688  000D28  0E2A               	movlw	42
  1689  000D2A                     u1007:
  1690  000D2A  2EE8               	decfsz	wreg,f,c
  1691  000D2C  D7FE               	bra	u1007
  1692  000D2E  2E08               	decfsz	??_LCD_CONFIG& (0+255),f,c
  1693  000D30  D7FC               	bra	u1007
  1694                           
  1695                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
  1696  000D32  0E30               	movlw	48
  1697  000D34  ECA7  F007         	call	_ENVIA_NIBBLE
  1698                           
  1699                           ;LCD.c: 83:  _delay(1200);
  1700  000D38  0EF0               	movlw	240
  1701  000D3A                     u1017:
  1702  000D3A  D000               	nop2	
  1703  000D3C  2EE8               	decfsz	wreg,f,c
  1704  000D3E  D7FD               	bra	u1017
  1705                           
  1706                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
  1707  000D40  0E30               	movlw	48
  1708  000D42  ECA7  F007         	call	_ENVIA_NIBBLE
  1709                           
  1710                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
  1711  000D46  0E20               	movlw	32
  1712  000D48  ECA7  F007         	call	_ENVIA_NIBBLE
  1713                           
  1714                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
  1715  000D4C  0E01               	movlw	1
  1716  000D4E  EC45  F007         	call	_ENVIA_LCD_CMD
  1717                           
  1718                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
  1719  000D52  0E28               	movlw	40
  1720  000D54  EC45  F007         	call	_ENVIA_LCD_CMD
  1721                           
  1722                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
  1723  000D58  0E0F               	movlw	15
  1724  000D5A  EC45  F007         	call	_ENVIA_LCD_CMD
  1725                           
  1726                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
  1727  000D5E  0E06               	movlw	6
  1728  000D60  EC45  F007         	call	_ENVIA_LCD_CMD
  1729                           
  1730                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
  1731  000D64  0E01               	movlw	1
  1732  000D66  EC45  F007         	call	_ENVIA_LCD_CMD
  1733  000D6A  0012               	return		;funcret
  1734  000D6C                     __end_of_LCD_CONFIG:
  1735                           	opt callstack 0
  1736                           
  1737 ;; *************** function _CURSOR_ONOFF *****************
  1738 ;; Defined at:
  1739 ;;		line 35 in file "LCD.c"
  1740 ;; Parameters:    Size  Location     Type
  1741 ;;  estado          1    wreg     unsigned char 
  1742 ;; Auto vars:     Size  Location     Type
  1743 ;;  estado          1    7[COMRAM] unsigned char 
  1744 ;; Return value:  Size  Location     Type
  1745 ;;                  1    wreg      void 
  1746 ;; Registers used:
  1747 ;;		wreg, status,2, status,0, cstack
  1748 ;; Tracked objects:
  1749 ;;		On entry : 0/0
  1750 ;;		On exit  : 0/0
  1751 ;;		Unchanged: 0/0
  1752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1753 ;;      Params:         0       0       0       0       0       0       0       0       0
  1754 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1755 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1756 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1757 ;;Total ram usage:        1 bytes
  1758 ;; Hardware stack levels used:    1
  1759 ;; Hardware stack levels required when called:    4
  1760 ;; This function calls:
  1761 ;;		_ENVIA_LCD_CMD
  1762 ;; This function is called by:
  1763 ;;		_main
  1764 ;; This function uses a non-reentrant model
  1765 ;;
  1766                           
  1767                           	psect	text11
  1768  000F32                     __ptext11:
  1769                           	opt callstack 0
  1770  000F32                     _CURSOR_ONOFF:
  1771                           	opt callstack 26
  1772                           
  1773                           ;incstack = 0
  1774                           ;CURSOR_ONOFF@estado stored from wreg
  1775  000F32  6E08               	movwf	CURSOR_ONOFF@estado,c
  1776                           
  1777                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
  1778  000F34  5008               	movf	CURSOR_ONOFF@estado,w,c
  1779  000F36  A4D8               	btfss	status,2,c
  1780  000F38  D003               	goto	l1007
  1781  000F3A  0E0E               	movlw	14
  1782  000F3C  EC45  F007         	call	_ENVIA_LCD_CMD
  1783  000F40                     l1007:
  1784                           
  1785                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
  1786  000F40  0408               	decf	CURSOR_ONOFF@estado,w,c
  1787  000F42  A4D8               	btfss	status,2,c
  1788  000F44  0012               	return	
  1789  000F46  0E0C               	movlw	12
  1790  000F48  EC45  F007         	call	_ENVIA_LCD_CMD
  1791  000F4C  0012               	return		;funcret
  1792  000F4E                     __end_of_CURSOR_ONOFF:
  1793                           	opt callstack 0
  1794                           
  1795 ;; *************** function _BORRAR_LCD *****************
  1796 ;; Defined at:
  1797 ;;		line 67 in file "LCD.c"
  1798 ;; Parameters:    Size  Location     Type
  1799 ;;		None
  1800 ;; Auto vars:     Size  Location     Type
  1801 ;;		None
  1802 ;; Return value:  Size  Location     Type
  1803 ;;                  1    wreg      void 
  1804 ;; Registers used:
  1805 ;;		wreg, status,2, status,0, cstack
  1806 ;; Tracked objects:
  1807 ;;		On entry : 0/0
  1808 ;;		On exit  : 0/0
  1809 ;;		Unchanged: 0/0
  1810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1811 ;;      Params:         0       0       0       0       0       0       0       0       0
  1812 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1813 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1814 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1815 ;;Total ram usage:        0 bytes
  1816 ;; Hardware stack levels used:    1
  1817 ;; Hardware stack levels required when called:    4
  1818 ;; This function calls:
  1819 ;;		_ENVIA_LCD_CMD
  1820 ;; This function is called by:
  1821 ;;		_main
  1822 ;; This function uses a non-reentrant model
  1823 ;;
  1824                           
  1825                           	psect	text12
  1826  000F6A                     __ptext12:
  1827                           	opt callstack 0
  1828  000F6A                     _BORRAR_LCD:
  1829                           	opt callstack 26
  1830                           
  1831                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
  1832                           
  1833                           ;incstack = 0
  1834  000F6A  0E01               	movlw	1
  1835  000F6C  EC45  F007         	call	_ENVIA_LCD_CMD
  1836  000F70  0012               	return		;funcret
  1837  000F72                     __end_of_BORRAR_LCD:
  1838                           	opt callstack 0
  1839                           
  1840 ;; *************** function _ENVIA_LCD_CMD *****************
  1841 ;; Defined at:
  1842 ;;		line 104 in file "LCD.c"
  1843 ;; Parameters:    Size  Location     Type
  1844 ;;  dato            1    wreg     unsigned char 
  1845 ;; Auto vars:     Size  Location     Type
  1846 ;;  dato            1    5[COMRAM] unsigned char 
  1847 ;;  aux             1    6[COMRAM] unsigned char 
  1848 ;; Return value:  Size  Location     Type
  1849 ;;                  1    wreg      void 
  1850 ;; Registers used:
  1851 ;;		wreg, status,2, status,0, cstack
  1852 ;; Tracked objects:
  1853 ;;		On entry : 0/0
  1854 ;;		On exit  : 0/0
  1855 ;;		Unchanged: 0/0
  1856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1857 ;;      Params:         0       0       0       0       0       0       0       0       0
  1858 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1859 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1860 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1861 ;;Total ram usage:        2 bytes
  1862 ;; Hardware stack levels used:    1
  1863 ;; Hardware stack levels required when called:    3
  1864 ;; This function calls:
  1865 ;;		_ENVIA_NIBBLE
  1866 ;;		_LEER_LCD
  1867 ;; This function is called by:
  1868 ;;		_POS_CURSOR
  1869 ;;		_CURSOR_ONOFF
  1870 ;;		_BORRAR_LCD
  1871 ;;		_LCD_CONFIG
  1872 ;;		_BLINK_CURSOR
  1873 ;;		_DISPLAY_ONOFF
  1874 ;;		_CURSOR_HOME
  1875 ;;		_GENERACARACTER
  1876 ;; This function uses a non-reentrant model
  1877 ;;
  1878                           
  1879                           	psect	text13
  1880  000E8A                     __ptext13:
  1881                           	opt callstack 0
  1882  000E8A                     _ENVIA_LCD_CMD:
  1883                           	opt callstack 25
  1884                           
  1885                           ;incstack = 0
  1886                           ;ENVIA_LCD_CMD@dato stored from wreg
  1887  000E8A  6E06               	movwf	ENVIA_LCD_CMD@dato,c
  1888                           
  1889                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1890  000E8C  908C               	bcf	3980,0,c	;volatile
  1891                           
  1892                           ;LCD.c: 108:  LEER_LCD();
  1893  000E8E  EC55  F006         	call	_LEER_LCD	;wreg free
  1894                           
  1895                           ;LCD.c: 109:  TRISD = 0b00000000;
  1896  000E92  0E00               	movlw	0
  1897  000E94  6E95               	movwf	3989,c	;volatile
  1898                           
  1899                           ;LCD.c: 111:         _delay(1200);
  1900  000E96  0EF0               	movlw	240
  1901  000E98                     u1027:
  1902  000E98  D000               	nop2	
  1903  000E9A  2EE8               	decfsz	wreg,f,c
  1904  000E9C  D7FD               	bra	u1027
  1905                           
  1906                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1907  000E9E  928C               	bcf	3980,1,c	;volatile
  1908                           
  1909                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1910  000EA0  948C               	bcf	3980,2,c	;volatile
  1911                           
  1912                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1913  000EA2  908C               	bcf	3980,0,c	;volatile
  1914                           
  1915                           ;LCD.c: 115:  aux = dato & 0xF0;
  1916  000EA4  5006               	movf	ENVIA_LCD_CMD@dato,w,c
  1917  000EA6  0BF0               	andlw	240
  1918  000EA8  6E07               	movwf	ENVIA_LCD_CMD@aux,c
  1919                           
  1920                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1921  000EAA  5007               	movf	ENVIA_LCD_CMD@aux,w,c
  1922  000EAC  ECA7  F007         	call	_ENVIA_NIBBLE
  1923                           
  1924                           ;LCD.c: 117:  aux = dato<<4;
  1925  000EB0  3806               	swapf	ENVIA_LCD_CMD@dato,w,c
  1926  000EB2  0BF0               	andlw	240
  1927  000EB4  6E07               	movwf	ENVIA_LCD_CMD@aux,c
  1928                           
  1929                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1930  000EB6  5007               	movf	ENVIA_LCD_CMD@aux,w,c
  1931  000EB8  ECA7  F007         	call	_ENVIA_NIBBLE
  1932  000EBC  0012               	return		;funcret
  1933  000EBE                     __end_of_ENVIA_LCD_CMD:
  1934                           	opt callstack 0
  1935                           
  1936 ;; *************** function _LEER_LCD *****************
  1937 ;; Defined at:
  1938 ;;		line 121 in file "LCD.c"
  1939 ;; Parameters:    Size  Location     Type
  1940 ;;		None
  1941 ;; Auto vars:     Size  Location     Type
  1942 ;;  aux             1    4[COMRAM] unsigned char 
  1943 ;; Return value:  Size  Location     Type
  1944 ;;                  1    wreg      void 
  1945 ;; Registers used:
  1946 ;;		wreg, status,2, status,0
  1947 ;; Tracked objects:
  1948 ;;		On entry : 0/0
  1949 ;;		On exit  : 0/0
  1950 ;;		Unchanged: 0/0
  1951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1952 ;;      Params:         0       0       0       0       0       0       0       0       0
  1953 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1954 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1955 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1956 ;;Total ram usage:        1 bytes
  1957 ;; Hardware stack levels used:    1
  1958 ;; Hardware stack levels required when called:    2
  1959 ;; This function calls:
  1960 ;;		Nothing
  1961 ;; This function is called by:
  1962 ;;		_ENVIA_CHAR
  1963 ;;		_ENVIA_LCD_CMD
  1964 ;; This function uses a non-reentrant model
  1965 ;;
  1966                           
  1967                           	psect	text14
  1968  000CAA                     __ptext14:
  1969                           	opt callstack 0
  1970  000CAA                     _LEER_LCD:
  1971                           	opt callstack 25
  1972                           
  1973                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1974                           
  1975                           ;incstack = 0
  1976  000CAA  0EF8               	movlw	248
  1977  000CAC  6E95               	movwf	3989,c	;volatile
  1978                           
  1979                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1980  000CAE  908C               	bcf	3980,0,c	;volatile
  1981                           
  1982                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1983  000CB0  828C               	bsf	3980,1,c	;volatile
  1984                           
  1985                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1986  000CB2  848C               	bsf	3980,2,c	;volatile
  1987                           
  1988                           ;LCD.c: 128:         _delay(1200);
  1989  000CB4  0EF0               	movlw	240
  1990  000CB6                     u1037:
  1991  000CB6  D000               	nop2	
  1992  000CB8  2EE8               	decfsz	wreg,f,c
  1993  000CBA  D7FD               	bra	u1037
  1994                           
  1995                           ;LCD.c: 130:  aux = PORTD;
  1996  000CBC  CF83 F005          	movff	3971,LEER_LCD@aux	;volatile
  1997                           
  1998                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1999  000CC0  948C               	bcf	3980,2,c	;volatile
  2000                           
  2001                           ;LCD.c: 132:         _delay(1200);
  2002  000CC2  0EF0               	movlw	240
  2003  000CC4                     u1047:
  2004  000CC4  D000               	nop2	
  2005  000CC6  2EE8               	decfsz	wreg,f,c
  2006  000CC8  D7FD               	bra	u1047
  2007                           
  2008                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  2009  000CCA  848C               	bsf	3980,2,c	;volatile
  2010                           
  2011                           ;LCD.c: 135:         _delay(1200);
  2012  000CCC  0EF0               	movlw	240
  2013  000CCE                     u1057:
  2014  000CCE  D000               	nop2	
  2015  000CD0  2EE8               	decfsz	wreg,f,c
  2016  000CD2  D7FD               	bra	u1057
  2017  000CD4                     l879:
  2018                           
  2019                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  2020  000CD4  948C               	bcf	3980,2,c	;volatile
  2021                           
  2022                           ;LCD.c: 138:  aux = aux & 0x80;
  2023  000CD6  5005               	movf	LEER_LCD@aux,w,c
  2024  000CD8  0B80               	andlw	128
  2025  000CDA  6E05               	movwf	LEER_LCD@aux,c
  2026                           
  2027                           ;LCD.c: 139:  while(aux == 0x80)
  2028  000CDC  D012               	goto	l895
  2029  000CDE                     l67:
  2030                           
  2031                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  2032  000CDE  848C               	bsf	3980,2,c	;volatile
  2033                           
  2034                           ;LCD.c: 142:             _delay(1200);
  2035  000CE0  0EF0               	movlw	240
  2036  000CE2                     u1067:
  2037  000CE2  D000               	nop2	
  2038  000CE4  2EE8               	decfsz	wreg,f,c
  2039  000CE6  D7FD               	bra	u1067
  2040                           
  2041                           ;LCD.c: 143:             aux = PORTD;
  2042  000CE8  CF83 F005          	movff	3971,LEER_LCD@aux	;volatile
  2043                           
  2044                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  2045  000CEC  948C               	bcf	3980,2,c	;volatile
  2046                           
  2047                           ;LCD.c: 145:             _delay(1200);
  2048  000CEE  0EF0               	movlw	240
  2049  000CF0                     u1077:
  2050  000CF0  D000               	nop2	
  2051  000CF2  2EE8               	decfsz	wreg,f,c
  2052  000CF4  D7FD               	bra	u1077
  2053                           
  2054                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  2055  000CF6  848C               	bsf	3980,2,c	;volatile
  2056                           
  2057                           ;LCD.c: 147:             _delay(1200);
  2058  000CF8  0EF0               	movlw	240
  2059  000CFA                     u1087:
  2060  000CFA  D000               	nop2	
  2061  000CFC  2EE8               	decfsz	wreg,f,c
  2062  000CFE  D7FD               	bra	u1087
  2063  000D00  D7E9               	goto	l879
  2064  000D02                     l895:
  2065                           
  2066                           ;LCD.c: 139:  while(aux == 0x80)
  2067  000D02  0E80               	movlw	128
  2068  000D04  1805               	xorwf	LEER_LCD@aux,w,c
  2069  000D06  A4D8               	btfss	status,2,c
  2070  000D08  0012               	return	
  2071  000D0A  D7E9               	goto	l67
  2072  000D0C                     __end_of_LEER_LCD:
  2073                           	opt callstack 0
  2074                           
  2075 ;; *************** function _ENVIA_NIBBLE *****************
  2076 ;; Defined at:
  2077 ;;		line 93 in file "LCD.c"
  2078 ;; Parameters:    Size  Location     Type
  2079 ;;  dato            1    wreg     unsigned char 
  2080 ;; Auto vars:     Size  Location     Type
  2081 ;;  dato            1    4[COMRAM] unsigned char 
  2082 ;; Return value:  Size  Location     Type
  2083 ;;                  1    wreg      void 
  2084 ;; Registers used:
  2085 ;;		wreg, status,2, status,0
  2086 ;; Tracked objects:
  2087 ;;		On entry : 0/0
  2088 ;;		On exit  : 0/0
  2089 ;;		Unchanged: 0/0
  2090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2091 ;;      Params:         0       0       0       0       0       0       0       0       0
  2092 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2093 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2094 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2095 ;;Total ram usage:        1 bytes
  2096 ;; Hardware stack levels used:    1
  2097 ;; Hardware stack levels required when called:    2
  2098 ;; This function calls:
  2099 ;;		Nothing
  2100 ;; This function is called by:
  2101 ;;		_ENVIA_CHAR
  2102 ;;		_LCD_CONFIG
  2103 ;;		_ENVIA_LCD_CMD
  2104 ;; This function uses a non-reentrant model
  2105 ;;
  2106                           
  2107                           	psect	text15
  2108  000F4E                     __ptext15:
  2109                           	opt callstack 0
  2110  000F4E                     _ENVIA_NIBBLE:
  2111                           	opt callstack 25
  2112                           
  2113                           ;incstack = 0
  2114                           ;ENVIA_NIBBLE@dato stored from wreg
  2115  000F4E  6E05               	movwf	ENVIA_NIBBLE@dato,c
  2116                           
  2117                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  2118  000F50  0E0F               	movlw	15
  2119  000F52  168C               	andwf	3980,f,c	;volatile
  2120                           
  2121                           ;LCD.c: 96:  dato &= 0xF0;
  2122  000F54  0EF0               	movlw	240
  2123  000F56  1605               	andwf	ENVIA_NIBBLE@dato,f,c
  2124                           
  2125                           ;LCD.c: 97:  LATD|= dato;
  2126  000F58  5005               	movf	ENVIA_NIBBLE@dato,w,c	;volatile
  2127  000F5A  128C               	iorwf	3980,f,c	;volatile
  2128                           
  2129                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  2130  000F5C  848C               	bsf	3980,2,c	;volatile
  2131                           
  2132                           ;LCD.c: 100:         _delay(1200);
  2133  000F5E  0EF0               	movlw	240
  2134  000F60                     u1097:
  2135  000F60  D000               	nop2	
  2136  000F62  2EE8               	decfsz	wreg,f,c
  2137  000F64  D7FD               	bra	u1097
  2138                           
  2139                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  2140  000F66  948C               	bcf	3980,2,c	;volatile
  2141  000F68  0012               	return		;funcret
  2142  000F6A                     __end_of_ENVIA_NIBBLE:
  2143                           	opt callstack 0
  2144                           
  2145 ;; *************** function _elboton *****************
  2146 ;; Defined at:
  2147 ;;		line 137 in file "intento con servo.c"
  2148 ;; Parameters:    Size  Location     Type
  2149 ;;		None
  2150 ;; Auto vars:     Size  Location     Type
  2151 ;;		None
  2152 ;; Return value:  Size  Location     Type
  2153 ;;                  1    wreg      void 
  2154 ;; Registers used:
  2155 ;;		wreg, status,2, status,0
  2156 ;; Tracked objects:
  2157 ;;		On entry : 0/0
  2158 ;;		On exit  : 0/0
  2159 ;;		Unchanged: 0/0
  2160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2161 ;;      Params:         0       0       0       0       0       0       0       0       0
  2162 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2163 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2164 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2165 ;;Total ram usage:        4 bytes
  2166 ;; Hardware stack levels used:    1
  2167 ;; Hardware stack levels required when called:    1
  2168 ;; This function calls:
  2169 ;;		Nothing
  2170 ;; This function is called by:
  2171 ;;		Interrupt level 1
  2172 ;; This function uses a non-reentrant model
  2173 ;;
  2174                           
  2175                           	psect	intcodelo
  2176  000018                     __pintcodelo:
  2177                           	opt callstack 0
  2178  000018                     _elboton:
  2179                           	opt callstack 25
  2180                           
  2181                           ;incstack = 0
  2182  000018  801B               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  2183  00001A  CFD8 F002          	movff	status,??_elboton+1
  2184  00001E  CFE8 F003          	movff	wreg,??_elboton+2
  2185  000022  CFE0 F004          	movff	bsr,??_elboton+3
  2186                           
  2187                           ;intento con servo.c: 138:     INTCON3bits.INT1IF=0;
  2188  000026  90F0               	bcf	4080,0,c	;volatile
  2189                           
  2190                           ;intento con servo.c: 139:     pulsa++;
  2191  000028  2A17               	incf	_pulsa,f,c
  2192                           
  2193                           ;intento con servo.c: 140:     if(pulsa==1 || pulsa==2){T1CONbits.TMR1ON=!T1CONbits.TMR1
      +                          ON;}
  2194  00002A  0417               	decf	_pulsa,w,c
  2195  00002C  B4D8               	btfsc	status,2,c
  2196  00002E  D004               	goto	i1u51_20
  2197  000030  0E02               	movlw	2
  2198  000032  1817               	xorwf	_pulsa,w,c
  2199  000034  A4D8               	btfss	status,2,c
  2200  000036  D00B               	goto	i1l183
  2201  000038                     i1u51_20:
  2202  000038  B0CD               	btfsc	4045,0,c	;volatile
  2203  00003A  D003               	goto	i1u52_20
  2204  00003C  6A01               	clrf	??_elboton& (0+255),c
  2205  00003E  2A01               	incf	??_elboton& (0+255),f,c
  2206  000040  D001               	goto	i1u53_28
  2207  000042                     i1u52_20:
  2208  000042  6A01               	clrf	??_elboton& (0+255),c
  2209  000044                     i1u53_28:
  2210  000044  50CD               	movf	4045,w,c	;volatile
  2211  000046  1801               	xorwf	??_elboton,w,c
  2212  000048  0BFE               	andlw	-2
  2213  00004A  1801               	xorwf	??_elboton,w,c
  2214  00004C  6ECD               	movwf	4045,c	;volatile
  2215  00004E                     i1l183:
  2216  00004E  C004  FFE0         	movff	??_elboton+3,bsr
  2217  000052  C003  FFE8         	movff	??_elboton+2,wreg
  2218  000056  C002  FFD8         	movff	??_elboton+1,status
  2219  00005A  901B               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  2220  00005C  0010               	retfie	
  2221  00005E                     __end_of_elboton:
  2222                           	opt callstack 0
  2223                           
  2224 ;; *************** function _elcomparador *****************
  2225 ;; Defined at:
  2226 ;;		line 129 in file "intento con servo.c"
  2227 ;; Parameters:    Size  Location     Type
  2228 ;;		None
  2229 ;; Auto vars:     Size  Location     Type
  2230 ;;		None
  2231 ;; Return value:  Size  Location     Type
  2232 ;;                  1    wreg      void 
  2233 ;; Registers used:
  2234 ;;		wreg, status,2, status,0
  2235 ;; Tracked objects:
  2236 ;;		On entry : 0/0
  2237 ;;		On exit  : 0/0
  2238 ;;		Unchanged: 0/0
  2239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2240 ;;      Params:         0       0       0       0       0       0       0       0       0
  2241 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2242 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2243 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2244 ;;Total ram usage:        0 bytes
  2245 ;; Hardware stack levels used:    1
  2246 ;; This function calls:
  2247 ;;		Nothing
  2248 ;; This function is called by:
  2249 ;;		Interrupt level 2
  2250 ;; This function uses a non-reentrant model
  2251 ;;
  2252                           
  2253                           	psect	intcode
  2254  000008                     __pintcode:
  2255                           	opt callstack 0
  2256  000008                     _elcomparador:
  2257                           	opt callstack 25
  2258                           
  2259                           ;incstack = 0
  2260  000008  821B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2261  00000A  EDB6  F006         	call	int_func,f	;refresh shadow registers
  2262                           
  2263                           	psect	intcode_body
  2264  000D6C                     __pintcode_body:
  2265                           	opt callstack 25
  2266  000D6C                     int_func:
  2267                           	opt callstack 25
  2268  000D6C  0006               	pop		; remove dummy address from shadow register refresh
  2269                           
  2270                           ;intento con servo.c: 130:     PIR1bits.CCP1IF=0;
  2271  000D6E  949E               	bcf	3998,2,c	;volatile
  2272                           
  2273                           ;intento con servo.c: 131:     cent=cent+5;
  2274  000D70  0E05               	movlw	5
  2275  000D72  2415               	addwf	_cent,w,c
  2276  000D74  6E15               	movwf	_cent,c
  2277  000D76  0E00               	movlw	0
  2278  000D78  2016               	addwfc	_cent+1,w,c
  2279  000D7A  6E16               	movwf	_cent+1,c
  2280                           
  2281                           ;intento con servo.c: 132:     if(cent==1000){cent=0;seg++;}
  2282  000D7C  0EE8               	movlw	232
  2283  000D7E  1815               	xorwf	_cent,w,c
  2284  000D80  E109               	bnz	i2l1305
  2285  000D82  0E03               	movlw	3
  2286  000D84  1816               	xorwf	_cent+1,w,c
  2287  000D86  A4D8               	btfss	status,2,c
  2288  000D88  D005               	goto	i2l1305
  2289  000D8A  0E00               	movlw	0
  2290  000D8C  6E16               	movwf	_cent+1,c
  2291  000D8E  0E00               	movlw	0
  2292  000D90  6E15               	movwf	_cent,c
  2293  000D92  2A19               	incf	_seg,f,c
  2294  000D94                     i2l1305:
  2295                           
  2296                           ;intento con servo.c: 133:     if(seg==60){seg=0;min++;}
  2297  000D94  0E3C               	movlw	60
  2298  000D96  1819               	xorwf	_seg,w,c
  2299  000D98  A4D8               	btfss	status,2,c
  2300  000D9A  D003               	goto	i2l1311
  2301  000D9C  0E00               	movlw	0
  2302  000D9E  6E19               	movwf	_seg,c
  2303  000DA0  2A1A               	incf	_min,f,c
  2304  000DA2                     i2l1311:
  2305                           
  2306                           ;intento con servo.c: 134:     if(min==60){min=0;seg=0;cent=0;pasa=1;}
  2307  000DA2  0E3C               	movlw	60
  2308  000DA4  181A               	xorwf	_min,w,c
  2309  000DA6  A4D8               	btfss	status,2,c
  2310  000DA8  D00A               	goto	i2l174
  2311  000DAA  0E00               	movlw	0
  2312  000DAC  6E1A               	movwf	_min,c
  2313  000DAE  0E00               	movlw	0
  2314  000DB0  6E19               	movwf	_seg,c
  2315  000DB2  0E00               	movlw	0
  2316  000DB4  6E16               	movwf	_cent+1,c
  2317  000DB6  0E00               	movlw	0
  2318  000DB8  6E15               	movwf	_cent,c
  2319  000DBA  0E01               	movlw	1
  2320  000DBC  6E18               	movwf	_pasa,c
  2321  000DBE                     i2l174:
  2322  000DBE  921B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2323  000DC0  0011               	retfie		f
  2324  000DC2                     __end_of_elcomparador:
  2325                           	opt callstack 0
  2326                           
  2327                           	psect	rparam
  2328  0000                     
  2329                           	psect	temp
  2330  00001B                     btemp:
  2331                           	opt callstack 0
  2332  00001B                     	ds	1
  2333  0000                     int$flags	set	btemp
  2334  0000                     wtemp8	set	btemp+1
  2335  0000                     ttemp5	set	btemp+1
  2336  0000                     ttemp6	set	btemp+4
  2337  0000                     ttemp7	set	btemp+8
  2338                           tosu	equ	0xFFF
  2339                           tosh	equ	0xFFE
  2340                           tosl	equ	0xFFD
  2341                           stkptr	equ	0xFFC
  2342                           pclatu	equ	0xFFB
  2343                           pclath	equ	0xFFA
  2344                           pcl	equ	0xFF9
  2345                           tblptru	equ	0xFF8
  2346                           tblptrh	equ	0xFF7
  2347                           tblptrl	equ	0xFF6
  2348                           tablat	equ	0xFF5
  2349                           prodh	equ	0xFF4
  2350                           prodl	equ	0xFF3
  2351                           indf0	equ	0xFEF
  2352                           postinc0	equ	0xFEE
  2353                           postdec0	equ	0xFED
  2354                           preinc0	equ	0xFEC
  2355                           plusw0	equ	0xFEB
  2356                           fsr0h	equ	0xFEA
  2357                           fsr0l	equ	0xFE9
  2358                           wreg	equ	0xFE8
  2359                           indf1	equ	0xFE7
  2360                           postinc1	equ	0xFE6
  2361                           postdec1	equ	0xFE5
  2362                           preinc1	equ	0xFE4
  2363                           plusw1	equ	0xFE3
  2364                           fsr1h	equ	0xFE2
  2365                           fsr1l	equ	0xFE1
  2366                           bsr	equ	0xFE0
  2367                           indf2	equ	0xFDF
  2368                           postinc2	equ	0xFDE
  2369                           postdec2	equ	0xFDD
  2370                           preinc2	equ	0xFDC
  2371                           plusw2	equ	0xFDB
  2372                           fsr2h	equ	0xFDA
  2373                           fsr2l	equ	0xFD9
  2374                           status	equ	0xFD8


Data Sizes:
    Strings     37
    Constant    0
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     18      26
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_4(CODE[15]), STR_3(CODE[7]), STR_2(CODE[12]), STR_1(CODE[15]), 


Critical Paths under _main in COMRAM

    _main->___lwdiv
    _contador_de_campanas->___lwdiv
    ___lwdiv->___lwmod
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD

Critical Paths under _elboton in COMRAM

    None.

Critical Paths under _elcomparador in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _elboton in BANK0

    None.

Critical Paths under _elcomparador in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _elboton in BANK1

    None.

Critical Paths under _elcomparador in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _elboton in BANK2

    None.

Critical Paths under _elcomparador in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _elboton in BANK3

    None.

Critical Paths under _elcomparador in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _elboton in BANK4

    None.

Critical Paths under _elcomparador in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _elboton in BANK5

    None.

Critical Paths under _elcomparador in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _elboton in BANK6

    None.

Critical Paths under _elcomparador in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _elboton in BANK7

    None.

Critical Paths under _elcomparador in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    7645
                                             16 COMRAM     2     2      0
                         _BORRAR_LCD
                       _CURSOR_ONOFF
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _LCD_CONFIG
                         _POS_CURSOR
                            ___awdiv
                            ___awmod
                            ___lwdiv
                            ___lwmod
               _contador_de_campanas
                              _mover
 ---------------------------------------------------------------------------------
 (1) _mover                                                8     8      0      60
                                              4 COMRAM     8     8      0
 ---------------------------------------------------------------------------------
 (1) _contador_de_campanas                                 0     0      0    2912
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _POS_CURSOR
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     615
                                              4 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     770
                                              9 COMRAM     7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _POS_CURSOR                                           2     1      1     588
                                              7 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _ESCRIBE_MENSAJE                                      6     3      3     819
                                              7 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (3) _ENVIA_CHAR                                           2     2      0     120
                                              5 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     752
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     604
                                              4 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _LCD_CONFIG                                           1     1      0     135
                                              7 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (1) _CURSOR_ONOFF                                         1     1      0     150
                                              7 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _ENVIA_LCD_CMD                                        2     2      0     120
                                              5 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (4) _LEER_LCD                                             1     1      0      45
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _ENVIA_NIBBLE                                         1     1      0      15
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _elboton                                              4     4      0       0
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _elcomparador                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BORRAR_LCD
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _CURSOR_ONOFF
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _LCD_CONFIG
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
     _ENVIA_NIBBLE
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   ___awdiv
   ___awmod
   ___lwdiv
     ___lwmod (ARG)
   ___lwmod
   _contador_de_campanas
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
     _ESCRIBE_MENSAJE
       _ENVIA_CHAR
         _ENVIA_NIBBLE
         _LEER_LCD
     _POS_CURSOR
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
   _mover

 _elboton (ROOT)

 _elcomparador (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     12      1A       1       27.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1A      20        0.0%
DATA                 0      0      1A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Jun 06 09:54:25 2019

                           l67 0CDE                   ___awdiv@sign 000A                             bsr 000FE0  
           __CFG_FOSC$XTPLL_XT 000000                  ENVIA_CHAR@aux 0007                            l140 0AD8  
                          l141 0A8E                            l137 0A6A                            l138 0A2C  
                          l677 0E0A                            l687 0E4C                            l895 0D02  
                          l879 0CD4                            u610 0E2E                            u800 09AA  
                          u740 0C74                            u580 0DE4                            u680 0BFC  
                          u840 09D2                            u907 0838                            u917 0A34  
                          u927 0A48                            u880 0A02                            u937 0A5C  
                          u947 0A96                            u957 0AA4                            u967 0AB8  
                          u977 0ACC                            u987 0E64                            u997 0D1C  
                 __CFG_BOR$OFF 000000                            _min 001A                            _seg 0019  
                 ___awmod@sign 000A                    LEER_LCD@aux 0005                            wreg 000FE8  
               ??_ENVIA_NIBBLE 0005                   __CFG_LVP$OFF 000000                 ??_elcomparador 0001  
               ENVIA_CHAR@dato 0006                   __CFG_WDT$OFF 000000                           l1007 0F40  
                         l1403 0BCA                           l1415 0BF0                           l1431 0C22  
                         l1335 0EC8                           l1417 0BF8                           l1409 0BDA  
                         l1329 0F02                           l1435 0C30                           l1427 0C18  
                         l1451 0C5A                           l1339 0EE6                           l1347 0DD8  
                         l1349 0DE0                           l1525 08AC                           l1471 0CA0  
                         l1463 0C88                           l1455 0C68                           l1447 0C4E  
                         l1359 0E00                           l1375 0E42                           l1367 0E22  
                         l1391 0B32                           l1457 0C70                           l1369 0E2A  
                         l1385 0B0E                           l1467 0C92                           l1555 09B2  
                         l1569 09E2                           STR_1 0801                           STR_2 0813  
                         STR_3 081F                           STR_4 0810                           u1007 0D2A  
                         u1017 0D3A                           u1027 0E98                           u1037 0CB6  
                         u1047 0CC4                           u1057 0CCE                           u1067 0CE2  
                         u1077 0CF0                           u1087 0CFA                           _LATD 000F8C  
                         u1097 0F60                   __CFG_PWRT$ON 000000                           _cent 0015  
                         _main 0828                           _pasa 0018                           btemp 001B  
                         start 005E                  ?_CURSOR_ONOFF 0001                  __CFG_MCLRE$ON 000000  
                 ___param_bank 000000                ??_ENVIA_LCD_CMD 0006               __end_of_LEER_LCD 0D0C  
          __size_of_BORRAR_LCD 0008                  __CFG_PLLDIV$1 000000                 __CFG_CCP2MX$ON 000000  
                        ?_main 0001                __end_of___awdiv 0C3A                __end_of___awmod 0CAA  
              ___awdiv@divisor 0007                          _T1CON 000FCD                __end_of___lwdiv 0E14  
                        i1l183 004E                __end_of___lwmod 0E56                          i2l174 0DBE  
              ___awdiv@counter 0009                          _TMR1H 000FCF                          _TMR1L 000FCE  
                        _PORTD 000F83            __size_of_LCD_CONFIG 0060                          _TRISD 000F95  
          __size_of_ENVIA_CHAR 0034                __end_of_elboton 005E                    ?_POS_CURSOR 0008  
                        _mover 0A1E                          _pulsa 0017                          tablat 000FF5  
                        ttemp5 001C                          ttemp6 001F                          ttemp7 0023  
                        status 000FD8                          wtemp8 001C                 ??_CURSOR_ONOFF 0008  
              __initialization 0F14                   __end_of_main 0A1E                _ESCRIBE_MENSAJE 0EBE  
                       ??_main 0011                  __activetblptr 000001                         _CCPR1H 000FBF  
                       _CCPR1L 000FBE               ___awdiv@dividend 0005                         ?_mover 0001  
                       i2l1311 0DA2                         i2l1305 0D94                      ??___awdiv 0009  
                    ??___awmod 0009           __end_of_ENVIA_NIBBLE 0F6A           __end_of_elcomparador 0DC2  
                    ??___lwdiv 000E                      ??___lwmod 0009            __size_of_POS_CURSOR 0024  
                       clear_0 0F1A               ___awdiv@quotient 000B                ___awmod@divisor 0007  
              ___awmod@counter 0009                      ??_elboton 0001                   __mediumconst 0000  
                       mover@j 0008                         mover@w 000C                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8                   ??_BORRAR_LCD 0008  
                    ?_LEER_LCD 0001                     __accesstop 0060        __end_of__initialization 0F20  
              __CFG_PBADEN$OFF 000000                   ??_LCD_CONFIG 0008                  ___rparam_used 000001  
                 ??_ENVIA_CHAR 0006        __end_of_ESCRIBE_MENSAJE 0EF0  __size_of_contador_de_campanas 00C2  
               __pcstackCOMRAM 0001                  __end_of_mover 0AF4             __end_of_BORRAR_LCD 0F72  
             ENVIA_LCD_CMD@aux 0007           __end_of_CURSOR_ONOFF 0F4E             __end_of_LCD_CONFIG 0D6C  
           __end_of_ENVIA_CHAR 0E8A                        ??_mover 0005                     ??_LEER_LCD 0005  
             ENVIA_NIBBLE@dato 0005                        _CCP1CON 000FBD                        i1u51_20 0038  
                      i1u52_20 0042                        i1u53_28 0044                   ??_POS_CURSOR 0009  
        __size_of_ENVIA_NIBBLE 001C          __size_of_elcomparador 0DBA                        __Hparam 0000  
                      __Lparam 0000               ?_ESCRIBE_MENSAJE 0008                        ___awdiv 0BB6  
                      ___awmod 0C3A                        ___lwdiv 0DC2                        ___lwmod 0E14  
                 __psmallconst 0800          __end_of_ENVIA_LCD_CMD 0EBE                        _campana 0013  
                      __pcinit 0F14             __end_of_POS_CURSOR 0F14                        __ramtop 0800  
                      __ptext0 0828                        __ptext1 0A1E                        __ptext2 0AF4  
                      __ptext3 0E14                        __ptext4 0DC2                        __ptext5 0EF0  
                      __ptext6 0EBE                        __ptext7 0E56                        __ptext8 0C3A  
                      __ptext9 0BB6                        _elboton 0018                      _T1CONbits 000FCD  
             ___awmod@dividend 0005                 __pintcode_body 0D6C                   _ENVIA_NIBBLE 0F4E  
         end_of_initialization 0F20                   _elcomparador 0008                        int_func 0D6C  
                      postinc0 000FEE          __size_of_CURSOR_ONOFF 001C                      _TRISBbits 000F93  
            __size_of_LEER_LCD 0062                   _CURSOR_ONOFF 0F32             CURSOR_ONOFF@estado 0008  
          start_initialization 0F14   __end_of_contador_de_campanas 0BB6              ENVIA_LCD_CMD@dato 0006  
                  __pbssCOMRAM 0013               ___lwdiv@dividend 000A                      __pintcode 0008  
                     ?___awdiv 0005                       ?___awmod 0005                       ?___lwdiv 000A  
                     ?___lwmod 0005                    __pintcodelo 0018                       ?_elboton 0001  
                  __smallconst 0800                     mover@j_600 000A               ___lwdiv@quotient 000E  
               __size_of_mover 00D6                       _LEER_LCD 0CAA                       _LATBbits 000F8A  
                     _LATDbits 000F8C                       _IPR1bits 000F9F                       _PIE1bits 000F9D  
                     _PIR1bits 000F9E           _contador_de_campanas 0AF4                       _RCONbits 000FD0  
             ESCRIBE_MENSAJE@i 000D                 POS_CURSOR@fila 0009       __size_of_ESCRIBE_MENSAJE 0032  
                  _INTCON2bits 000FF1                    _INTCON3bits 000FF0         __size_of_ENVIA_LCD_CMD 0034  
                     __Hrparam 0000          ?_contador_de_campanas 0001                       __Lrparam 0000  
                 __Lsmallconst 0800               __size_of___awdiv 0084               __size_of___awmod 0070  
             __size_of___lwdiv 0052               __size_of___lwmod 0042               __size_of_elboton 0046  
              ___lwdiv@divisor 000C                ___lwdiv@counter 0010                       __ptext10 0D0C  
                     __ptext11 0F32                       __ptext12 0F6A                       __ptext13 0E8A  
                     __ptext14 0CAA                       __ptext15 0F4E                     _BORRAR_LCD 0F6A  
                __size_of_main 01F6                     _LCD_CONFIG 0D0C                     _ENVIA_CHAR 0E56  
                     int$flags 001B                  _ENVIA_LCD_CMD 0E8A          __CFG_CPUDIV$OSC1_PLL2 000000  
                   _INTCONbits 000FF2              ??_ESCRIBE_MENSAJE 000B                       intlevel1 0000  
                     intlevel2 0000          ESCRIBE_MENSAJE@cadena 0008               ___lwmod@dividend 0005  
       ??_contador_de_campanas 0011                 ?_ENVIA_LCD_CMD 0001                ___lwmod@divisor 0007  
              ___lwmod@counter 0009                    ?_BORRAR_LCD 0001                  ?_ENVIA_NIBBLE 0001  
                   _POS_CURSOR 0EF0                  ?_elcomparador 0001                    ?_LCD_CONFIG 0001  
           ESCRIBE_MENSAJE@tam 000A                    ?_ENVIA_CHAR 0001              POS_CURSOR@columna 0008  
